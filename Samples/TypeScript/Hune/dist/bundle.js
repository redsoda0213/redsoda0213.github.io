/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../../Framework/src/cubismdefaultparameterid.ts":
/*!************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/cubismdefaultparameterid.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    Live2DCubismFramework.HitAreaPrefix = 'HitArea';\r\n    Live2DCubismFramework.HitAreaHead = 'Head';\r\n    Live2DCubismFramework.HitAreaBody = 'Body';\r\n    Live2DCubismFramework.PartsIdCore = 'Parts01Core';\r\n    Live2DCubismFramework.PartsArmPrefix = 'Parts01Arm_';\r\n    Live2DCubismFramework.PartsArmLPrefix = 'Parts01ArmL_';\r\n    Live2DCubismFramework.PartsArmRPrefix = 'Parts01ArmR_';\r\n    Live2DCubismFramework.ParamAngleX = 'ParamAngleX';\r\n    Live2DCubismFramework.ParamAngleY = 'ParamAngleY';\r\n    Live2DCubismFramework.ParamAngleZ = 'ParamAngleZ';\r\n    Live2DCubismFramework.ParamEyeLOpen = 'ParamEyeLOpen';\r\n    Live2DCubismFramework.ParamEyeLSmile = 'ParamEyeLSmile';\r\n    Live2DCubismFramework.ParamEyeROpen = 'ParamEyeROpen';\r\n    Live2DCubismFramework.ParamEyeRSmile = 'ParamEyeRSmile';\r\n    Live2DCubismFramework.ParamEyeBallX = 'ParamEyeBallX';\r\n    Live2DCubismFramework.ParamEyeBallY = 'ParamEyeBallY';\r\n    Live2DCubismFramework.ParamEyeBallForm = 'ParamEyeBallForm';\r\n    Live2DCubismFramework.ParamBrowLY = 'ParamBrowLY';\r\n    Live2DCubismFramework.ParamBrowRY = 'ParamBrowRY';\r\n    Live2DCubismFramework.ParamBrowLX = 'ParamBrowLX';\r\n    Live2DCubismFramework.ParamBrowRX = 'ParamBrowRX';\r\n    Live2DCubismFramework.ParamBrowLAngle = 'ParamBrowLAngle';\r\n    Live2DCubismFramework.ParamBrowRAngle = 'ParamBrowRAngle';\r\n    Live2DCubismFramework.ParamBrowLForm = 'ParamBrowLForm';\r\n    Live2DCubismFramework.ParamBrowRForm = 'ParamBrowRForm';\r\n    Live2DCubismFramework.ParamMouthForm = 'ParamMouthForm';\r\n    Live2DCubismFramework.ParamMouthOpenY = 'ParamMouthOpenY';\r\n    Live2DCubismFramework.ParamCheek = 'ParamCheek';\r\n    Live2DCubismFramework.ParamBodyAngleX = 'ParamBodyAngleX';\r\n    Live2DCubismFramework.ParamBodyAngleY = 'ParamBodyAngleY';\r\n    Live2DCubismFramework.ParamBodyAngleZ = 'ParamBodyAngleZ';\r\n    Live2DCubismFramework.ParamBreath = 'ParamBreath';\r\n    Live2DCubismFramework.ParamArmLA = 'ParamArmLA';\r\n    Live2DCubismFramework.ParamArmRA = 'ParamArmRA';\r\n    Live2DCubismFramework.ParamArmLB = 'ParamArmLB';\r\n    Live2DCubismFramework.ParamArmRB = 'ParamArmRB';\r\n    Live2DCubismFramework.ParamHandL = 'ParamHandL';\r\n    Live2DCubismFramework.ParamHandR = 'ParamHandR';\r\n    Live2DCubismFramework.ParamHairFront = 'ParamHairFront';\r\n    Live2DCubismFramework.ParamHairSide = 'ParamHairSide';\r\n    Live2DCubismFramework.ParamHairBack = 'ParamHairBack';\r\n    Live2DCubismFramework.ParamHairFluffy = 'ParamHairFluffy';\r\n    Live2DCubismFramework.ParamShoulderY = 'ParamShoulderY';\r\n    Live2DCubismFramework.ParamBustX = 'ParamBustX';\r\n    Live2DCubismFramework.ParamBustY = 'ParamBustY';\r\n    Live2DCubismFramework.ParamBaseX = 'ParamBaseX';\r\n    Live2DCubismFramework.ParamBaseY = 'ParamBaseY';\r\n    Live2DCubismFramework.ParamNONE = 'NONE:';\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9jdWJpc21kZWZhdWx0cGFyYW1ldGVyaWQudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovVXNlcnMvbWlmYXMvRG9jdW1lbnRzL3JlZHNvZGEwMjEzLmdpdGh1Yi5pby9GcmFtZXdvcmsvc3JjL2N1YmlzbWRlZmF1bHRwYXJhbWV0ZXJpZC50cz9iNDBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBicmllZiDjg5Hjg6njg6Hjg7zjgr9JROOBruODh+ODleOCqeODq+ODiOWApOOCkuS/neaMgeOBmeOCi+WumuaVsDxicj5cclxuICogICAgICAgICDjg4fjg5Xjgqnjg6vjg4jlgKTjga7ku5Xmp5jjga/ku6XkuIvjga7jg57jg4vjg6XjgqLjg6vjgavln7rjgaXjgY88YnI+XHJcbiAqICAgICAgICAgaHR0cHM6Ly9kb2NzLmxpdmUyZC5jb20vY3ViaXNtLWVkaXRvci1tYW51YWwvc3RhbmRhcmQtcGFyYW1ldG9yLWxpc3QvXHJcbiAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgLy8g44OR44O844OESURcclxuICBleHBvcnQgY29uc3QgSGl0QXJlYVByZWZpeCA9ICdIaXRBcmVhJztcclxuICBleHBvcnQgY29uc3QgSGl0QXJlYUhlYWQgPSAnSGVhZCc7XHJcbiAgZXhwb3J0IGNvbnN0IEhpdEFyZWFCb2R5ID0gJ0JvZHknO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJ0c0lkQ29yZSA9ICdQYXJ0czAxQ29yZSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcnRzQXJtUHJlZml4ID0gJ1BhcnRzMDFBcm1fJztcclxuICBleHBvcnQgY29uc3QgUGFydHNBcm1MUHJlZml4ID0gJ1BhcnRzMDFBcm1MXyc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcnRzQXJtUlByZWZpeCA9ICdQYXJ0czAxQXJtUl8nO1xyXG5cclxuICAvLyDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWCA9ICdQYXJhbUFuZ2xlWCc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQW5nbGVZID0gJ1BhcmFtQW5nbGVZJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1BbmdsZVogPSAnUGFyYW1BbmdsZVonO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUxPcGVuID0gJ1BhcmFtRXllTE9wZW4nO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUxTbWlsZSA9ICdQYXJhbUV5ZUxTbWlsZSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllUk9wZW4gPSAnUGFyYW1FeWVST3Blbic7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllUlNtaWxlID0gJ1BhcmFtRXllUlNtaWxlJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1FeWVCYWxsWCA9ICdQYXJhbUV5ZUJhbGxYJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1FeWVCYWxsWSA9ICdQYXJhbUV5ZUJhbGxZJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1FeWVCYWxsRm9ybSA9ICdQYXJhbUV5ZUJhbGxGb3JtJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93TFkgPSAnUGFyYW1Ccm93TFknO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSWSA9ICdQYXJhbUJyb3dSWSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xYID0gJ1BhcmFtQnJvd0xYJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UlggPSAnUGFyYW1Ccm93UlgnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dMQW5nbGUgPSAnUGFyYW1Ccm93TEFuZ2xlJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UkFuZ2xlID0gJ1BhcmFtQnJvd1JBbmdsZSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xGb3JtID0gJ1BhcmFtQnJvd0xGb3JtJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93UkZvcm0gPSAnUGFyYW1Ccm93UkZvcm0nO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbU1vdXRoRm9ybSA9ICdQYXJhbU1vdXRoRm9ybSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtTW91dGhPcGVuWSA9ICdQYXJhbU1vdXRoT3BlblknO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUNoZWVrID0gJ1BhcmFtQ2hlZWsnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVggPSAnUGFyYW1Cb2R5QW5nbGVYJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Cb2R5QW5nbGVZID0gJ1BhcmFtQm9keUFuZ2xlWSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQm9keUFuZ2xlWiA9ICdQYXJhbUJvZHlBbmdsZVonO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyZWF0aCA9ICdQYXJhbUJyZWF0aCc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtTEEgPSAnUGFyYW1Bcm1MQSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtUkEgPSAnUGFyYW1Bcm1SQSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtTEIgPSAnUGFyYW1Bcm1MQic7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQXJtUkIgPSAnUGFyYW1Bcm1SQic7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFuZEwgPSAnUGFyYW1IYW5kTCc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFuZFIgPSAnUGFyYW1IYW5kUic7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtSGFpckZyb250ID0gJ1BhcmFtSGFpckZyb250JztcclxuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyU2lkZSA9ICdQYXJhbUhhaXJTaWRlJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyQmFjayA9ICdQYXJhbUhhaXJCYWNrJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyRmx1ZmZ5ID0gJ1BhcmFtSGFpckZsdWZmeSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtU2hvdWxkZXJZID0gJ1BhcmFtU2hvdWxkZXJZJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1CdXN0WCA9ICdQYXJhbUJ1c3RYJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1CdXN0WSA9ICdQYXJhbUJ1c3RZJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1CYXNlWCA9ICdQYXJhbUJhc2VYJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1CYXNlWSA9ICdQYXJhbUJhc2VZJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1OT05FID0gJ05PTkU6JztcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7O0FBWUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../Framework/src/cubismdefaultparameterid.ts\n");

/***/ }),

/***/ "../../../Framework/src/cubismframeworkconfig.ts":
/*!*********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/cubismframeworkconfig.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CSM_LOG_LEVEL_VERBOSE = 0;\r\nexports.CSM_LOG_LEVEL_DEBUG = 1;\r\nexports.CSM_LOG_LEVEL_INFO = 2;\r\nexports.CSM_LOG_LEVEL_WARNING = 3;\r\nexports.CSM_LOG_LEVEL_ERROR = 4;\r\nexports.CSM_LOG_LEVEL_OFF = 5;\r\nexports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_VERBOSE;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9jdWJpc21mcmFtZXdvcmtjb25maWcudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovVXNlcnMvbWlmYXMvRG9jdW1lbnRzL3JlZHNvZGEwMjEzLmdpdGh1Yi5pby9GcmFtZXdvcmsvc3JjL2N1YmlzbWZyYW1ld29ya2NvbmZpZy50cz9jZjdlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vLyAg44Ot44Kw5Ye65Yqb6Zai5pWw44Gu6Kit5a6aXHJcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbi8vLS0tLS0tLS0tLSDjg63jgrDlh7rlipvjg6zjg5njg6sg6YG45oqe6aCF55uuIOWumue+qSAtLS0tLS0tLS0tXHJcbi8vIOips+e0sOODreOCsOWHuuWKm+ioreWumlxyXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9WRVJCT1NFID0gMDtcclxuLy8g44OH44OQ44OD44Kw44Ot44Kw5Ye65Yqb6Kit5a6aXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX0RFQlVHID0gMTtcclxuLy8gSW5mb+ODreOCsOWHuuWKm+ioreWumlxyXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9JTkZPID0gMjtcclxuLy8g6K2m5ZGK44Ot44Kw5Ye65Yqb6Kit5a6aXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX1dBUk5JTkcgPSAzO1xyXG4vLyDjgqjjg6njg7zjg63jgrDlh7rlipvoqK3lrppcclxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfRVJST1IgPSA0O1xyXG4vLyDjg63jgrDlh7rlipvjgqrjg5XoqK3lrppcclxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfT0ZGID0gNTtcclxuXHJcbi8qKlxyXG4gKiDjg63jgrDlh7rlipvjg6zjg5njg6voqK3lrprjgIJcclxuICpcclxuICog5by35Yi255qE44Gr44Ot44Kw5Ye65Yqb44Os44OZ44Or44KS5aSJ44GI44KL5pmC44Gr5a6a576p44KS5pyJ5Yq544Gr44GZ44KL44CCXHJcbiAqIENTTV9MT0dfTEVWRUxfVkVSQk9TRSDvvZ4gQ1NNX0xPR19MRVZFTF9PRkYg44KS6YG45oqe44GZ44KL44CCXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTDogbnVtYmVyID0gQ1NNX0xPR19MRVZFTF9WRVJCT1NFO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBYUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBUUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../Framework/src/cubismframeworkconfig.ts\n");

/***/ }),

/***/ "../../../Framework/src/cubismmodelsettingjson.ts":
/*!**********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/cubismmodelsettingjson.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ./live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar icubismmodelsetting_1 = __webpack_require__(/*! ./icubismmodelsetting */ \"../../../Framework/src/icubismmodelsetting.ts\");\r\nvar cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ \"../../../Framework/src/utils/cubismjson.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ./type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar ICubismModelSetting = icubismmodelsetting_1.Live2DCubismFramework.ICubismModelSetting;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var Version = 'Version';\r\n    var FileReferences = 'FileReferences';\r\n    var Groups = 'Groups';\r\n    var Layout = 'Layout';\r\n    var HitAreas = 'HitAreas';\r\n    var Moc = 'Moc';\r\n    var Textures = 'Textures';\r\n    var Physics = 'Physics';\r\n    var Pose = 'Pose';\r\n    var Expressions = 'Expressions';\r\n    var Motions = 'Motions';\r\n    var UserData = 'UserData';\r\n    var Name = 'Name';\r\n    var FilePath = 'File';\r\n    var Id = 'Id';\r\n    var Ids = 'Ids';\r\n    var Target = 'Target';\r\n    var Idle = 'Idle';\r\n    var TapBody = 'TapBody';\r\n    var PinchIn = 'PinchIn';\r\n    var PinchOut = 'PinchOut';\r\n    var Shake = 'Shake';\r\n    var FlickHead = 'FlickHead';\r\n    var Parameter = 'Parameter';\r\n    var SoundPath = 'Sound';\r\n    var FadeInTime = 'FadeInTime';\r\n    var FadeOutTime = 'FadeOutTime';\r\n    var CenterX = 'CenterX';\r\n    var CenterY = 'CenterY';\r\n    var X = 'X';\r\n    var Y = 'Y';\r\n    var Width = 'Width';\r\n    var Height = 'Height';\r\n    var LipSync = 'LipSync';\r\n    var EyeBlink = 'EyeBlink';\r\n    var InitParameter = 'init_param';\r\n    var InitPartsVisible = 'init_parts_visible';\r\n    var Val = 'val';\r\n    var FrequestNode;\r\n    (function (FrequestNode) {\r\n        FrequestNode[FrequestNode[\"FrequestNode_Groups\"] = 0] = \"FrequestNode_Groups\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Moc\"] = 1] = \"FrequestNode_Moc\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Motions\"] = 2] = \"FrequestNode_Motions\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Expressions\"] = 3] = \"FrequestNode_Expressions\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Textures\"] = 4] = \"FrequestNode_Textures\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Physics\"] = 5] = \"FrequestNode_Physics\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Pose\"] = 6] = \"FrequestNode_Pose\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_HitAreas\"] = 7] = \"FrequestNode_HitAreas\";\r\n    })(FrequestNode || (FrequestNode = {}));\r\n    var CubismModelSettingJson = (function (_super) {\r\n        __extends(CubismModelSettingJson, _super);\r\n        function CubismModelSettingJson(buffer, size) {\r\n            var _this = _super.call(this) || this;\r\n            _this._json = CubismJson.create(buffer, size);\r\n            if (_this._json) {\r\n                _this._jsonValue = new csmVector();\r\n                _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(Groups));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Moc));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Motions));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Expressions));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Textures));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Physics));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Pose));\r\n                _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(HitAreas));\r\n            }\r\n            return _this;\r\n        }\r\n        CubismModelSettingJson.prototype.release = function () {\r\n            CubismJson.delete(this._json);\r\n            this._jsonValue = null;\r\n        };\r\n        CubismModelSettingJson.prototype.GetJson = function () {\r\n            return this._json;\r\n        };\r\n        CubismModelSettingJson.prototype.getModelFileName = function () {\r\n            if (!this.isExistModelFile()) {\r\n                return '';\r\n            }\r\n            return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getTextureCount = function () {\r\n            if (!this.isExistTextureFiles()) {\r\n                return 0;\r\n            }\r\n            return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\r\n        };\r\n        CubismModelSettingJson.prototype.getTextureDirectory = function () {\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Textures)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getTextureFileName = function (index) {\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Textures)\r\n                .getValueByIndex(index)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getHitAreasCount = function () {\r\n            if (!this.isExistHitAreas()) {\r\n                return 0;\r\n            }\r\n            return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\r\n        };\r\n        CubismModelSettingJson.prototype.getHitAreaId = function (index) {\r\n            return CubismFramework.getIdManager().getId(this._jsonValue\r\n                .at(FrequestNode.FrequestNode_HitAreas)\r\n                .getValueByIndex(index)\r\n                .getValueByString(Id)\r\n                .getRawString());\r\n        };\r\n        CubismModelSettingJson.prototype.getHitAreaName = function (index) {\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_HitAreas)\r\n                .getValueByIndex(index)\r\n                .getValueByString(Name)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getPhysicsFileName = function () {\r\n            if (!this.isExistPhysicsFile()) {\r\n                return '';\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Physics)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getPoseFileName = function () {\r\n            if (!this.isExistPoseFile()) {\r\n                return '';\r\n            }\r\n            return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getExpressionCount = function () {\r\n            if (!this.isExistExpressionFile()) {\r\n                return 0;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Expressions)\r\n                .getSize();\r\n        };\r\n        CubismModelSettingJson.prototype.getExpressionName = function (index) {\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Expressions)\r\n                .getValueByIndex(index)\r\n                .getValueByString(Name)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getExpressionFileName = function (index) {\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Expressions)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FilePath)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionGroupCount = function () {\r\n            if (!this.isExistMotionGroups()) {\r\n                return 0;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getKeys()\r\n                .getSize();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionGroupName = function (index) {\r\n            if (!this.isExistMotionGroups()) {\r\n                return null;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getKeys()\r\n                .at(index);\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionCount = function (groupName) {\r\n            if (!this.isExistMotionGroupName(groupName)) {\r\n                return 0;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getSize();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionFileName = function (groupName, index) {\r\n            if (!this.isExistMotionGroupName(groupName)) {\r\n                return '';\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FilePath)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionSoundFileName = function (groupName, index) {\r\n            if (!this.isExistMotionSoundFile(groupName, index)) {\r\n                return '';\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(SoundPath)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionFadeInTimeValue = function (groupName, index) {\r\n            if (!this.isExistMotionFadeIn(groupName, index)) {\r\n                return -1.0;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FadeInTime)\r\n                .toFloat();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionFadeOutTimeValue = function (groupName, index) {\r\n            if (!this.isExistMotionFadeOut(groupName, index)) {\r\n                return -1.0;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FadeOutTime)\r\n                .toFloat();\r\n        };\r\n        CubismModelSettingJson.prototype.getUserDataFile = function () {\r\n            if (!this.isExistUserDataFile()) {\r\n                return '';\r\n            }\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(FileReferences)\r\n                .getValueByString(UserData)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getLayoutMap = function (outLayoutMap) {\r\n            var map = this._json\r\n                .getRoot()\r\n                .getValueByString(Layout)\r\n                .getMap();\r\n            if (map == null) {\r\n                return false;\r\n            }\r\n            var ret = false;\r\n            for (var ite = map.begin(); ite.notEqual(map.end()); ite.preIncrement()) {\r\n                outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\r\n                ret = true;\r\n            }\r\n            return ret;\r\n        };\r\n        CubismModelSettingJson.prototype.getEyeBlinkParameterCount = function () {\r\n            if (!this.isExistEyeBlinkParameters()) {\r\n                return 0;\r\n            }\r\n            var num = 0;\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\r\n                var refI = this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i);\r\n                if (refI.isNull() || refI.isError()) {\r\n                    continue;\r\n                }\r\n                if (refI.getValueByString(Name).getRawString() == EyeBlink) {\r\n                    num = refI\r\n                        .getValueByString(Ids)\r\n                        .getVector()\r\n                        .getSize();\r\n                    break;\r\n                }\r\n            }\r\n            return num;\r\n        };\r\n        CubismModelSettingJson.prototype.getEyeBlinkParameterId = function (index) {\r\n            if (!this.isExistEyeBlinkParameters()) {\r\n                return null;\r\n            }\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\r\n                var refI = this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i);\r\n                if (refI.isNull() || refI.isError()) {\r\n                    continue;\r\n                }\r\n                if (refI.getValueByString(Name).getRawString() == EyeBlink) {\r\n                    return CubismFramework.getIdManager().getId(refI\r\n                        .getValueByString(Ids)\r\n                        .getValueByIndex(index)\r\n                        .getRawString());\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        CubismModelSettingJson.prototype.getLipSyncParameterCount = function () {\r\n            if (!this.isExistLipSyncParameters()) {\r\n                return 0;\r\n            }\r\n            var num = 0;\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\r\n                var refI = this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i);\r\n                if (refI.isNull() || refI.isError()) {\r\n                    continue;\r\n                }\r\n                if (refI.getValueByString(Name).getRawString() == LipSync) {\r\n                    num = refI\r\n                        .getValueByString(Ids)\r\n                        .getVector()\r\n                        .getSize();\r\n                    break;\r\n                }\r\n            }\r\n            return num;\r\n        };\r\n        CubismModelSettingJson.prototype.getLipSyncParameterId = function (index) {\r\n            if (!this.isExistLipSyncParameters()) {\r\n                return null;\r\n            }\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\r\n                var refI = this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i);\r\n                if (refI.isNull() || refI.isError()) {\r\n                    continue;\r\n                }\r\n                if (refI.getValueByString(Name).getRawString() == LipSync) {\r\n                    return CubismFramework.getIdManager().getId(refI\r\n                        .getValueByString(Ids)\r\n                        .getValueByIndex(index)\r\n                        .getRawString());\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        CubismModelSettingJson.prototype.isExistModelFile = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistTextureFiles = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Textures);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistHitAreas = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistPhysicsFile = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistPoseFile = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistExpressionFile = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Expressions);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistMotionGroups = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistMotionGroupName = function (groupName) {\r\n            var node = this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistMotionSoundFile = function (groupName, index) {\r\n            var node = this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(SoundPath);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistMotionFadeIn = function (groupName, index) {\r\n            var node = this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FadeInTime);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistMotionFadeOut = function (groupName, index) {\r\n            var node = this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FadeOutTime);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistUserDataFile = function () {\r\n            var node = this._json\r\n                .getRoot()\r\n                .getValueByString(FileReferences)\r\n                .getValueByString(UserData);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistEyeBlinkParameters = function () {\r\n            if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\r\n                this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {\r\n                if (this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i)\r\n                    .getValueByString(Name)\r\n                    .getRawString() == EyeBlink) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        CubismModelSettingJson.prototype.isExistLipSyncParameters = function () {\r\n            if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\r\n                this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {\r\n                if (this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i)\r\n                    .getValueByString(Name)\r\n                    .getRawString() == LipSync) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        return CubismModelSettingJson;\r\n    }(ICubismModelSetting));\r\n    Live2DCubismFramework.CubismModelSettingJson = CubismModelSettingJson;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/cubismmodelsettingjson.ts\n");

/***/ }),

/***/ "../../../Framework/src/effect/cubismbreath.ts":
/*!*******************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/effect/cubismbreath.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismBreath = (function () {\r\n        function CubismBreath() {\r\n            this._currentTime = 0.0;\r\n        }\r\n        CubismBreath.create = function () {\r\n            return new CubismBreath();\r\n        };\r\n        CubismBreath.delete = function (instance) {\r\n            if (instance != null) {\r\n                instance = null;\r\n            }\r\n        };\r\n        CubismBreath.prototype.setParameters = function (breathParameters) {\r\n            this._breathParameters = breathParameters;\r\n        };\r\n        CubismBreath.prototype.getParameters = function () {\r\n            return this._breathParameters;\r\n        };\r\n        CubismBreath.prototype.updateParameters = function (model, deltaTimeSeconds) {\r\n            this._currentTime += deltaTimeSeconds;\r\n            var t = this._currentTime * 2.0 * 3.14159;\r\n            for (var i = 0; i < this._breathParameters.getSize(); ++i) {\r\n                var data = this._breathParameters.at(i);\r\n                model.addParameterValueById(data.parameterId, data.offset + data.peak * Math.sin(t / data.cycle), data.weight);\r\n            }\r\n        };\r\n        return CubismBreath;\r\n    }());\r\n    Live2DCubismFramework.CubismBreath = CubismBreath;\r\n    var BreathParameterData = (function () {\r\n        function BreathParameterData(parameterId, offset, peak, cycle, weight) {\r\n            this.parameterId = parameterId == undefined ? null : parameterId;\r\n            this.offset = offset == undefined ? 0.0 : offset;\r\n            this.peak = peak == undefined ? 0.0 : peak;\r\n            this.cycle = cycle == undefined ? 0.0 : cycle;\r\n            this.weight = weight == undefined ? 0.0 : weight;\r\n        }\r\n        return BreathParameterData;\r\n    }());\r\n    Live2DCubismFramework.BreathParameterData = BreathParameterData;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtYnJlYXRoLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL0M6L1VzZXJzL21pZmFzL0RvY3VtZW50cy9yZWRzb2RhMDIxMy5naXRodWIuaW8vRnJhbWV3b3JrL3NyYy9lZmZlY3QvY3ViaXNtYnJlYXRoLnRzPzZkZWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcclxuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XHJcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xyXG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICAvKipcclxuICAgKiDlkbzlkLjmqZ/og71cclxuICAgKlxyXG4gICAqIOWRvOWQuOapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21CcmVhdGgge1xyXG4gICAgLyoqXHJcbiAgICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTogQ3ViaXNtQnJlYXRoIHtcclxuICAgICAgcmV0dXJuIG5ldyBDdWJpc21CcmVhdGgoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruegtOajhFxyXG4gICAgICogQHBhcmFtIGluc3RhbmNlIOWvvuixoeOBrkN1YmlzbUJyZWF0aFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShpbnN0YW5jZTogQ3ViaXNtQnJlYXRoKTogdm9pZCB7XHJcbiAgICAgIGlmIChpbnN0YW5jZSAhPSBudWxsKSB7XHJcbiAgICAgICAgaW5zdGFuY2UgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlkbzlkLjjga7jg5Hjg6njg6Hjg7zjgr/jga7ntJDjgaXjgZFcclxuICAgICAqIEBwYXJhbSBicmVhdGhQYXJhbWV0ZXJzIOWRvOWQuOOCkue0kOOBpeOBkeOBn+OBhOODkeODqeODoeODvOOCv+OBruODquOCueODiFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0UGFyYW1ldGVycyhcclxuICAgICAgYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+XHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgdGhpcy5fYnJlYXRoUGFyYW1ldGVycyA9IGJyZWF0aFBhcmFtZXRlcnM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlkbzlkLjjgavntJDjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7lj5blvpdcclxuICAgICAqIEByZXR1cm4g5ZG85ZC444Gr57SQ44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu44Oq44K544OIXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRQYXJhbWV0ZXJzKCk6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPiB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Oi44OH44Or44Gu44OR44Op44Oh44O844K/44Gu5pu05pawXHJcbiAgICAgKiBAcGFyYW0gbW9kZWwg5a++6LGh44Gu44Oi44OH44OrXHJcbiAgICAgKiBAcGFyYW0gZGVsdGFUaW1lU2Vjb25kcyDjg4fjg6vjgr/mmYLplpNb56eSXVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXBkYXRlUGFyYW1ldGVycyhcclxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxyXG4gICAgICBkZWx0YVRpbWVTZWNvbmRzOiBudW1iZXJcclxuICAgICk6IHZvaWQge1xyXG4gICAgICB0aGlzLl9jdXJyZW50VGltZSArPSBkZWx0YVRpbWVTZWNvbmRzO1xyXG5cclxuICAgICAgY29uc3QgdDogbnVtYmVyID0gdGhpcy5fY3VycmVudFRpbWUgKiAyLjAgKiAzLjE0MTU5O1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzLmdldFNpemUoKTsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YTogQnJlYXRoUGFyYW1ldGVyRGF0YSA9IHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMuYXQoaSk7XHJcblxyXG4gICAgICAgIG1vZGVsLmFkZFBhcmFtZXRlclZhbHVlQnlJZChcclxuICAgICAgICAgIGRhdGEucGFyYW1ldGVySWQsXHJcbiAgICAgICAgICBkYXRhLm9mZnNldCArIGRhdGEucGVhayAqIE1hdGguc2luKHQgLyBkYXRhLmN5Y2xlKSxcclxuICAgICAgICAgIGRhdGEud2VpZ2h0XHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSAwLjA7XHJcbiAgICB9XHJcblxyXG4gICAgX2JyZWF0aFBhcmFtZXRlcnM6IGNzbVZlY3RvcjxCcmVhdGhQYXJhbWV0ZXJEYXRhPjsgLy8g5ZG85ZC444Gr44Gy44KC44Gl44GE44Gm44GE44KL44OR44Op44Oh44O844K/44Gu44Oq44K544OIXHJcbiAgICBfY3VycmVudFRpbWU6IG51bWJlcjsgLy8g56mN566X5pmC6ZaTW+enkl1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWRvOWQuOOBruODkeODqeODoeODvOOCv+aDheWgsVxyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBCcmVhdGhQYXJhbWV0ZXJEYXRhIHtcclxuICAgIC8qKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVySWQgICDlkbzlkLjjgpLjgbLjgoLjgaXjgZHjgovjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAgICogQHBhcmFtIG9mZnNldCAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu44Kq44OV44K744OD44OIXHJcbiAgICAgKiBAcGFyYW0gcGVhayAgICAgICAgICDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7pq5jjgZVcclxuICAgICAqIEBwYXJhbSBjeWNsZSAgICAgICAgIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBruWRqOacn1xyXG4gICAgICogQHBhcmFtIHdlaWdodCAgICAgICAg44OR44Op44Oh44O844K/44G444Gu6YeN44G/XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICBwYXJhbWV0ZXJJZD86IEN1YmlzbUlkSGFuZGxlLFxyXG4gICAgICBvZmZzZXQ/OiBudW1iZXIsXHJcbiAgICAgIHBlYWs/OiBudW1iZXIsXHJcbiAgICAgIGN5Y2xlPzogbnVtYmVyLFxyXG4gICAgICB3ZWlnaHQ/OiBudW1iZXJcclxuICAgICkge1xyXG4gICAgICB0aGlzLnBhcmFtZXRlcklkID0gcGFyYW1ldGVySWQgPT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtZXRlcklkO1xyXG4gICAgICB0aGlzLm9mZnNldCA9IG9mZnNldCA9PSB1bmRlZmluZWQgPyAwLjAgOiBvZmZzZXQ7XHJcbiAgICAgIHRoaXMucGVhayA9IHBlYWsgPT0gdW5kZWZpbmVkID8gMC4wIDogcGVhaztcclxuICAgICAgdGhpcy5jeWNsZSA9IGN5Y2xlID09IHVuZGVmaW5lZCA/IDAuMCA6IGN5Y2xlO1xyXG4gICAgICB0aGlzLndlaWdodCA9IHdlaWdodCA9PSB1bmRlZmluZWQgPyAwLjAgOiB3ZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDlkbzlkLjjgpLjgbLjgoLjgaXjgZHjgovjg5Hjg6njg6Hjg7zjgr9JRFxcXHJcbiAgICBvZmZzZXQ6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu44Kq44OV44K744OD44OIXHJcbiAgICBwZWFrOiBudW1iZXI7IC8vIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBrumrmOOBlVxyXG4gICAgY3ljbGU6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXHJcbiAgICB3ZWlnaHQ6IG51bWJlcjsgLy8g44OR44Op44Oh44O844K/44G444Gu6YeN44G/XHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFjQTtBQUFBO0FBTUE7QUErREE7QUFDQTtBQUNBO0FBN0RBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUdBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFPQTtBQUlBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBV0E7QUFBQTtBQXJFQTtBQTBFQTtBQVNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFBQTtBQTVCQTtBQTZCQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../../Framework/src/effect/cubismbreath.ts\n");

/***/ }),

/***/ "../../../Framework/src/effect/cubismeyeblink.ts":
/*!*********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/effect/cubismeyeblink.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismEyeBlink = (function () {\r\n        function CubismEyeBlink(modelSetting) {\r\n            this._blinkingState = EyeState.EyeState_First;\r\n            this._nextBlinkingTime = 0.0;\r\n            this._stateStartTimeSeconds = 0.0;\r\n            this._blinkingIntervalSeconds = 4.0;\r\n            this._closingSeconds = 0.1;\r\n            this._closedSeconds = 0.05;\r\n            this._openingSeconds = 0.15;\r\n            this._userTimeSeconds = 0.0;\r\n            this._parameterIds = new csmVector();\r\n            if (modelSetting == null) {\r\n                return;\r\n            }\r\n            for (var i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\r\n                this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\r\n            }\r\n        }\r\n        CubismEyeBlink.create = function (modelSetting) {\r\n            if (modelSetting === void 0) { modelSetting = null; }\r\n            return new CubismEyeBlink(modelSetting);\r\n        };\r\n        CubismEyeBlink.delete = function (eyeBlink) {\r\n            if (eyeBlink != null) {\r\n                eyeBlink = null;\r\n            }\r\n        };\r\n        CubismEyeBlink.prototype.setBlinkingInterval = function (blinkingInterval) {\r\n            this._blinkingIntervalSeconds = blinkingInterval;\r\n        };\r\n        CubismEyeBlink.prototype.setBlinkingSetting = function (closing, closed, opening) {\r\n            this._closingSeconds = closing;\r\n            this._closedSeconds = closed;\r\n            this._openingSeconds = opening;\r\n        };\r\n        CubismEyeBlink.prototype.setParameterIds = function (parameterIds) {\r\n            this._parameterIds = parameterIds;\r\n        };\r\n        CubismEyeBlink.prototype.getParameterIds = function () {\r\n            return this._parameterIds;\r\n        };\r\n        CubismEyeBlink.prototype.updateParameters = function (model, deltaTimeSeconds) {\r\n            this._userTimeSeconds += deltaTimeSeconds;\r\n            var parameterValue;\r\n            var t = 0.0;\r\n            switch (this._blinkingState) {\r\n                case EyeState.EyeState_Closing:\r\n                    t =\r\n                        (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n                            this._closingSeconds;\r\n                    if (t >= 1.0) {\r\n                        t = 1.0;\r\n                        this._blinkingState = EyeState.EyeState_Closed;\r\n                        this._stateStartTimeSeconds = this._userTimeSeconds;\r\n                    }\r\n                    parameterValue = 1.0 - t;\r\n                    break;\r\n                case EyeState.EyeState_Closed:\r\n                    t =\r\n                        (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n                            this._closedSeconds;\r\n                    if (t >= 1.0) {\r\n                        this._blinkingState = EyeState.EyeState_Opening;\r\n                        this._stateStartTimeSeconds = this._userTimeSeconds;\r\n                    }\r\n                    parameterValue = 0.0;\r\n                    break;\r\n                case EyeState.EyeState_Opening:\r\n                    t =\r\n                        (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n                            this._openingSeconds;\r\n                    if (t >= 1.0) {\r\n                        t = 1.0;\r\n                        this._blinkingState = EyeState.EyeState_Interval;\r\n                        this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n                    }\r\n                    parameterValue = t;\r\n                    break;\r\n                case EyeState.EyeState_Interval:\r\n                    if (this._nextBlinkingTime < this._userTimeSeconds) {\r\n                        this._blinkingState = EyeState.EyeState_Closing;\r\n                        this._stateStartTimeSeconds = this._userTimeSeconds;\r\n                    }\r\n                    parameterValue = 1.0;\r\n                    break;\r\n                case EyeState.EyeState_First:\r\n                default:\r\n                    this._blinkingState = EyeState.EyeState_Interval;\r\n                    this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n                    parameterValue = 1.0;\r\n                    break;\r\n            }\r\n            if (!CubismEyeBlink.CloseIfZero) {\r\n                parameterValue = -parameterValue;\r\n            }\r\n            for (var i = 0; i < this._parameterIds.getSize(); ++i) {\r\n                model.setParameterValueById(this._parameterIds.at(i), parameterValue);\r\n            }\r\n        };\r\n        CubismEyeBlink.prototype.determinNextBlinkingTiming = function () {\r\n            var r = Math.random();\r\n            return (this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0));\r\n        };\r\n        CubismEyeBlink.CloseIfZero = true;\r\n        return CubismEyeBlink;\r\n    }());\r\n    Live2DCubismFramework.CubismEyeBlink = CubismEyeBlink;\r\n    var EyeState;\r\n    (function (EyeState) {\r\n        EyeState[EyeState[\"EyeState_First\"] = 0] = \"EyeState_First\";\r\n        EyeState[EyeState[\"EyeState_Interval\"] = 1] = \"EyeState_Interval\";\r\n        EyeState[EyeState[\"EyeState_Closing\"] = 2] = \"EyeState_Closing\";\r\n        EyeState[EyeState[\"EyeState_Closed\"] = 3] = \"EyeState_Closed\";\r\n        EyeState[EyeState[\"EyeState_Opening\"] = 4] = \"EyeState_Opening\";\r\n    })(EyeState = Live2DCubismFramework.EyeState || (Live2DCubismFramework.EyeState = {}));\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/effect/cubismeyeblink.ts\n");

/***/ }),

/***/ "../../../Framework/src/effect/cubismpose.ts":
/*!*****************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/effect/cubismpose.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"../../../Framework/src/utils/cubismjson.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var Epsilon = 0.001;\r\n    var DefaultFadeInSeconds = 0.5;\r\n    var FadeIn = 'FadeInTime';\r\n    var Link = 'Link';\r\n    var Groups = 'Groups';\r\n    var Id = 'Id';\r\n    var CubismPose = (function () {\r\n        function CubismPose() {\r\n            this._fadeTimeSeconds = DefaultFadeInSeconds;\r\n            this._lastModel = null;\r\n            this._partGroups = new csmVector();\r\n            this._partGroupCounts = new csmVector();\r\n        }\r\n        CubismPose.create = function (pose3json, size) {\r\n            var ret = new CubismPose();\r\n            var json = CubismJson.create(pose3json, size);\r\n            var root = json.getRoot();\r\n            if (!root.getValueByString(FadeIn).isNull()) {\r\n                ret._fadeTimeSeconds = root\r\n                    .getValueByString(FadeIn)\r\n                    .toFloat(DefaultFadeInSeconds);\r\n                if (ret._fadeTimeSeconds <= 0.0) {\r\n                    ret._fadeTimeSeconds = DefaultFadeInSeconds;\r\n                }\r\n            }\r\n            var poseListInfo = root.getValueByString(Groups);\r\n            var poseCount = poseListInfo.getSize();\r\n            for (var poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\r\n                var idListInfo = poseListInfo.getValueByIndex(poseIndex);\r\n                var idCount = idListInfo.getSize();\r\n                var groupCount = 0;\r\n                for (var groupIndex = 0; groupIndex < idCount; ++groupIndex) {\r\n                    var partInfo = idListInfo.getValueByIndex(groupIndex);\r\n                    var partData = new PartData();\r\n                    var parameterId = CubismFramework.getIdManager().getId(partInfo.getValueByString(Id).getRawString());\r\n                    partData.partId = parameterId;\r\n                    if (!partInfo.getValueByString(Link).isNull()) {\r\n                        var linkListInfo = partInfo.getValueByString(Link);\r\n                        var linkCount = linkListInfo.getSize();\r\n                        for (var linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\r\n                            var linkPart = new PartData();\r\n                            var linkId = CubismFramework.getIdManager().getId(linkListInfo.getValueByIndex(linkIndex).getString());\r\n                            linkPart.partId = linkId;\r\n                            partData.link.pushBack(linkPart);\r\n                        }\r\n                    }\r\n                    ret._partGroups.pushBack(partData.clone());\r\n                    ++groupCount;\r\n                }\r\n                ret._partGroupCounts.pushBack(groupCount);\r\n            }\r\n            CubismJson.delete(json);\r\n            return ret;\r\n        };\r\n        CubismPose.delete = function (pose) {\r\n            if (pose != null) {\r\n                pose = null;\r\n            }\r\n        };\r\n        CubismPose.prototype.updateParameters = function (model, deltaTimeSeconds) {\r\n            if (model != this._lastModel) {\r\n                this.reset(model);\r\n            }\r\n            this._lastModel = model;\r\n            if (deltaTimeSeconds < 0.0) {\r\n                deltaTimeSeconds = 0.0;\r\n            }\r\n            var beginIndex = 0;\r\n            for (var i = 0; i < this._partGroupCounts.getSize(); i++) {\r\n                var partGroupCount = this._partGroupCounts.at(i);\r\n                this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\r\n                beginIndex += partGroupCount;\r\n            }\r\n            this.copyPartOpacities(model);\r\n        };\r\n        CubismPose.prototype.reset = function (model) {\r\n            var beginIndex = 0;\r\n            for (var i = 0; i < this._partGroupCounts.getSize(); ++i) {\r\n                var groupCount = this._partGroupCounts.at(i);\r\n                for (var j = beginIndex; j < beginIndex + groupCount; ++j) {\r\n                    this._partGroups.at(j).initialize(model);\r\n                    var partsIndex = this._partGroups.at(j).partIndex;\r\n                    var paramIndex = this._partGroups.at(j).parameterIndex;\r\n                    if (partsIndex < 0) {\r\n                        continue;\r\n                    }\r\n                    model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\r\n                    model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);\r\n                    for (var k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\r\n                        this._partGroups\r\n                            .at(j)\r\n                            .link.at(k)\r\n                            .initialize(model);\r\n                    }\r\n                }\r\n                beginIndex += groupCount;\r\n            }\r\n        };\r\n        CubismPose.prototype.copyPartOpacities = function (model) {\r\n            for (var groupIndex = 0; groupIndex < this._partGroups.getSize(); ++groupIndex) {\r\n                var partData = this._partGroups.at(groupIndex);\r\n                if (partData.link.getSize() == 0) {\r\n                    continue;\r\n                }\r\n                var partIndex = this._partGroups.at(groupIndex).partIndex;\r\n                var opacity = model.getPartOpacityByIndex(partIndex);\r\n                for (var linkIndex = 0; linkIndex < partData.link.getSize(); ++linkIndex) {\r\n                    var linkPart = partData.link.at(linkIndex);\r\n                    var linkPartIndex = linkPart.partIndex;\r\n                    if (linkPartIndex < 0) {\r\n                        continue;\r\n                    }\r\n                    model.setPartOpacityByIndex(linkPartIndex, opacity);\r\n                }\r\n            }\r\n        };\r\n        CubismPose.prototype.doFade = function (model, deltaTimeSeconds, beginIndex, partGroupCount) {\r\n            var visiblePartIndex = -1;\r\n            var newOpacity = 1.0;\r\n            var phi = 0.5;\r\n            var backOpacityThreshold = 0.15;\r\n            for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n                var partIndex = this._partGroups.at(i).partIndex;\r\n                var paramIndex = this._partGroups.at(i).parameterIndex;\r\n                if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\r\n                    if (visiblePartIndex >= 0) {\r\n                        break;\r\n                    }\r\n                    visiblePartIndex = i;\r\n                    newOpacity = model.getPartOpacityByIndex(partIndex);\r\n                    newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\r\n                    if (newOpacity > 1.0) {\r\n                        newOpacity = 1.0;\r\n                    }\r\n                }\r\n            }\r\n            if (visiblePartIndex < 0) {\r\n                visiblePartIndex = 0;\r\n                newOpacity = 1.0;\r\n            }\r\n            for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n                var partsIndex = this._partGroups.at(i).partIndex;\r\n                if (visiblePartIndex == i) {\r\n                    model.setPartOpacityByIndex(partsIndex, newOpacity);\r\n                }\r\n                else {\r\n                    var opacity = model.getPartOpacityByIndex(partsIndex);\r\n                    var a1 = void 0;\r\n                    if (newOpacity < phi) {\r\n                        a1 = (newOpacity * (phi - 1)) / phi + 1.0;\r\n                    }\r\n                    else {\r\n                        a1 = ((1 - newOpacity) * phi) / (1.0 - phi);\r\n                    }\r\n                    var backOpacity = (1.0 - a1) * (1.0 - newOpacity);\r\n                    if (backOpacity > backOpacityThreshold) {\r\n                        a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\r\n                    }\r\n                    if (opacity > a1) {\r\n                        opacity = a1;\r\n                    }\r\n                    model.setPartOpacityByIndex(partsIndex, opacity);\r\n                }\r\n            }\r\n        };\r\n        return CubismPose;\r\n    }());\r\n    Live2DCubismFramework.CubismPose = CubismPose;\r\n    var PartData = (function () {\r\n        function PartData(v) {\r\n            this.parameterIndex = 0;\r\n            this.partIndex = 0;\r\n            this.link = new csmVector();\r\n            if (v != undefined) {\r\n                this.partId = v.partId;\r\n                for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {\r\n                    this.link.pushBack(ite.ptr().clone());\r\n                }\r\n            }\r\n        }\r\n        PartData.prototype.assignment = function (v) {\r\n            this.partId = v.partId;\r\n            for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {\r\n                this.link.pushBack(ite.ptr().clone());\r\n            }\r\n            return this;\r\n        };\r\n        PartData.prototype.initialize = function (model) {\r\n            this.parameterIndex = model.getParameterIndex(this.partId);\r\n            this.partIndex = model.getPartIndex(this.partId);\r\n            model.setParameterValueByIndex(this.parameterIndex, 1);\r\n        };\r\n        PartData.prototype.clone = function () {\r\n            var clonePartData = new PartData();\r\n            clonePartData.partId = this.partId;\r\n            clonePartData.parameterIndex = this.parameterIndex;\r\n            clonePartData.partIndex = this.partIndex;\r\n            clonePartData.link = new csmVector();\r\n            for (var ite = this.link.begin(); ite.notEqual(this.link.end()); ite.increment()) {\r\n                clonePartData.link.pushBack(ite.ptr().clone());\r\n            }\r\n            return clonePartData;\r\n        };\r\n        return PartData;\r\n    }());\r\n    Live2DCubismFramework.PartData = PartData;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/effect/cubismpose.ts\n");

/***/ }),

/***/ "../../../Framework/src/icubismmodelsetting.ts":
/*!*******************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/icubismmodelsetting.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var ICubismModelSetting = (function () {\r\n        function ICubismModelSetting() {\r\n        }\r\n        return ICubismModelSetting;\r\n    }());\r\n    Live2DCubismFramework.ICubismModelSetting = ICubismModelSetting;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/icubismmodelsetting.ts\n");

/***/ }),

/***/ "../../../Framework/src/id/cubismid.ts":
/*!***********************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/id/cubismid.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"../../../Framework/src/type/csmstring.ts\");\r\nvar csmString = csmstring_1.Live2DCubismFramework.csmString;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismId = (function () {\r\n        function CubismId(id) {\r\n            if (typeof id === 'string') {\r\n                this._id = new csmString(id);\r\n                return;\r\n            }\r\n            this._id = id;\r\n        }\r\n        CubismId.prototype.getString = function () {\r\n            return this._id;\r\n        };\r\n        CubismId.prototype.isEqual = function (c) {\r\n            if (typeof c === 'string') {\r\n                return this._id.isEqual(c);\r\n            }\r\n            else if (c instanceof csmString) {\r\n                return this._id.isEqual(c.s);\r\n            }\r\n            else if (c instanceof CubismId) {\r\n                return this._id.isEqual(c._id.s);\r\n            }\r\n            return false;\r\n        };\r\n        CubismId.prototype.isNotEqual = function (c) {\r\n            if (typeof c == 'string') {\r\n                return !this._id.isEqual(c);\r\n            }\r\n            else if (c instanceof csmString) {\r\n                return !this._id.isEqual(c.s);\r\n            }\r\n            else if (c instanceof CubismId) {\r\n                return !this._id.isEqual(c._id.s);\r\n            }\r\n            return false;\r\n        };\r\n        return CubismId;\r\n    }());\r\n    Live2DCubismFramework.CubismId = CubismId;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9pZC9jdWJpc21pZC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9DOi9Vc2Vycy9taWZhcy9Eb2N1bWVudHMvcmVkc29kYTAyMTMuZ2l0aHViLmlvL0ZyYW1ld29yay9zcmMvaWQvY3ViaXNtaWQudHM/MzVjOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XHJcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIC8qKlxyXG4gICAqIOODkeODqeODoeODvOOCv+WQjeODu+ODkeODvOODhOWQjeODu0RyYXdhYmxl5ZCN44KS5L+d5oyBXHJcbiAgICpcclxuICAgKiDjg5Hjg6njg6Hjg7zjgr/lkI3jg7vjg5Hjg7zjg4TlkI3jg7tEcmF3YWJsZeWQjeOCkuS/neaMgeOBmeOCi+OCr+ODqeOCueOAglxyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21JZCB7XHJcbiAgICAvKipcclxuICAgICAqIElE5ZCN44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRTdHJpbmcoKTogY3NtU3RyaW5nIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihpZDogc3RyaW5nIHwgY3NtU3RyaW5nKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdGhpcy5faWQgPSBuZXcgY3NtU3RyaW5nKGlkKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX2lkID0gaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBpZOOCkuavlOi8g1xyXG4gICAgICogQHBhcmFtIGMg5q+U6LyD44GZ44KLaWRcclxuICAgICAqIEByZXR1cm4g5ZCM44GY44Gq44KJ44GwdHJ1ZSznlbDjgarjgaPjgabjgYTjgozjgbBmYWxzZeOCkui/lOOBmVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNFcXVhbChjOiBzdHJpbmcgfCBjc21TdHJpbmcgfCBDdWJpc21JZCk6IGJvb2xlYW4ge1xyXG4gICAgICBpZiAodHlwZW9mIGMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pZC5pc0VxdWFsKGMucyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIEN1YmlzbUlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYy5faWQucyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaWTjgpLmr5TovINcclxuICAgICAqIEBwYXJhbSBjIOavlOi8g+OBmeOCi2lkXHJcbiAgICAgKiBAcmV0dXJuIOWQjOOBmOOBquOCieOBsHRydWUs55Ww44Gq44Gj44Gm44GE44KM44GwZmFsc2XjgpLov5TjgZlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzTm90RXF1YWwoYzogc3RyaW5nIHwgY3NtU3RyaW5nIHwgQ3ViaXNtSWQpOiBib29sZWFuIHtcclxuICAgICAgaWYgKHR5cGVvZiBjID09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLl9pZC5pc0VxdWFsKGMpO1xyXG4gICAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBjc21TdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYy5zKTtcclxuICAgICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgQ3ViaXNtSWQpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYy5faWQucyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2lkOiBjc21TdHJpbmc7IC8vIElE5ZCNXHJcbiAgfVxyXG5cclxuICBleHBvcnQgZGVjbGFyZSB0eXBlIEN1YmlzbUlkSGFuZGxlID0gQ3ViaXNtSWQ7XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOztBQU9BO0FBQ0E7QUFFQTtBQUFBO0FBTUE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQWRBO0FBQ0E7QUFDQTtBQW1CQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUFBO0FBckRBO0FBd0RBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../Framework/src/id/cubismid.ts\n");

/***/ }),

/***/ "../../../Framework/src/id/cubismidmanager.ts":
/*!******************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/id/cubismidmanager.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar cubismid_1 = __webpack_require__(/*! ./cubismid */ \"../../../Framework/src/id/cubismid.ts\");\r\nvar CubismId = cubismid_1.Live2DCubismFramework.CubismId;\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismIdManager = (function () {\r\n        function CubismIdManager() {\r\n            this._ids = new csmVector();\r\n        }\r\n        CubismIdManager.prototype.release = function () {\r\n            for (var i = 0; i < this._ids.getSize(); ++i) {\r\n                this._ids.set(i, void 0);\r\n            }\r\n            this._ids = null;\r\n        };\r\n        CubismIdManager.prototype.registerIds = function (ids) {\r\n            for (var i = 0; i < ids.length; i++) {\r\n                this.registerId(ids[i]);\r\n            }\r\n        };\r\n        CubismIdManager.prototype.registerId = function (id) {\r\n            var result = null;\r\n            if ('string' == typeof id) {\r\n                if ((result = this.findId(id)) != null) {\r\n                    return result;\r\n                }\r\n                result = new CubismId(id);\r\n                this._ids.pushBack(result);\r\n            }\r\n            else {\r\n                return this.registerId(id.s);\r\n            }\r\n            return result;\r\n        };\r\n        CubismIdManager.prototype.getId = function (id) {\r\n            return this.registerId(id);\r\n        };\r\n        CubismIdManager.prototype.isExist = function (id) {\r\n            if ('string' == typeof id) {\r\n                return this.findId(id) != null;\r\n            }\r\n            return this.isExist(id.s);\r\n        };\r\n        CubismIdManager.prototype.findId = function (id) {\r\n            for (var i = 0; i < this._ids.getSize(); ++i) {\r\n                if (this._ids\r\n                    .at(i)\r\n                    .getString()\r\n                    .isEqual(id)) {\r\n                    return this._ids.at(i);\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        return CubismIdManager;\r\n    }());\r\n    Live2DCubismFramework.CubismIdManager = CubismIdManager;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9pZC9jdWJpc21pZG1hbmFnZXIudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovVXNlcnMvbWlmYXMvRG9jdW1lbnRzL3JlZHNvZGEwMjEzLmdpdGh1Yi5pby9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkbWFuYWdlci50cz9lY2NiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXZlY3RvciB9IGZyb20gJy4uL3R5cGUvY3NtdmVjdG9yJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi9jdWJpc21pZCc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XHJcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xyXG5pbXBvcnQgQ3ViaXNtSWQgPSBjdWJpc21pZC5DdWJpc21JZDtcclxuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgLyoqXHJcbiAgICogSUTlkI3jga7nrqHnkIZcclxuICAgKlxyXG4gICAqIElE5ZCN44KS566h55CG44GZ44KL44CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbUlkTWFuYWdlciB7XHJcbiAgICAvKipcclxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIHRoaXMuX2lkcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtSWQ+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5faWRzLmdldFNpemUoKTsgKytpKSB7XHJcbiAgICAgICAgdGhpcy5faWRzLnNldChpLCB2b2lkIDApO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX2lkcyA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJROWQjeOCkuODquOCueODiOOBi+OCieeZu+mMslxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpZHMgSUTlkI3jg6rjgrnjg4hcclxuICAgICAqIEBwYXJhbSBjb3VudCBJROOBruWAi+aVsFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVnaXN0ZXJJZHMoaWRzOiBzdHJpbmdbXSB8IGNzbVN0cmluZ1tdKTogdm9pZCB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcklkKGlkc1tpXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIElE5ZCN44KS55m76YyyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlkIElE5ZCNXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWdpc3RlcklkKGlkOiBzdHJpbmcgfCBjc21TdHJpbmcpOiBDdWJpc21JZCB7XHJcbiAgICAgIGxldCByZXN1bHQ6IEN1YmlzbUlkID0gbnVsbDtcclxuXHJcbiAgICAgIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgaWQpIHtcclxuICAgICAgICBpZiAoKHJlc3VsdCA9IHRoaXMuZmluZElkKGlkKSkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3VsdCA9IG5ldyBDdWJpc21JZChpZCk7XHJcbiAgICAgICAgdGhpcy5faWRzLnB1c2hCYWNrKHJlc3VsdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJJZChpZC5zKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIElE5ZCN44GL44KJSUTjgpLlj5blvpfjgZnjgotcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaWQgSUTlkI1cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldElkKGlkOiBjc21TdHJpbmcgfCBzdHJpbmcpOiBDdWJpc21JZCB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlZ2lzdGVySWQoaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSUTlkI3jgYvjgolJROOBrueiuuiqjVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gdHJ1ZSDlrZjlnKjjgZnjgotcclxuICAgICAqIEByZXR1cm4gZmFsc2Ug5a2Y5Zyo44GX44Gq44GEXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0V4aXN0KGlkOiBjc21TdHJpbmcgfCBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBpZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRJZChpZCkgIT0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5pc0V4aXN0KGlkLnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSUTlkI3jgYvjgolJROOCkuaknOe0ouOBmeOCi+OAglxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpZCBJROWQjVxyXG4gICAgICogQHJldHVybiDnmbvpjLLjgZXjgozjgabjgYTjgotJROOAguOBquOBkeOCjOOBsE5VTEzjgIJcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBmaW5kSWQoaWQ6IHN0cmluZyk6IEN1YmlzbUlkIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pZHMuZ2V0U2l6ZSgpOyArK2kpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICB0aGlzLl9pZHNcclxuICAgICAgICAgICAgLmF0KGkpXHJcbiAgICAgICAgICAgIC5nZXRTdHJpbmcoKVxyXG4gICAgICAgICAgICAuaXNFcXVhbChpZClcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLl9pZHMuYXQoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9pZHM6IGNzbVZlY3RvcjxDdWJpc21JZD47IC8vIOeZu+mMsuOBleOCjOOBpuOBhOOCi0lE44Gu44Oq44K544OIXHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFPQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQUE7QUFNQTtBQUlBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQUE7QUFoR0E7QUFpR0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../Framework/src/id/cubismidmanager.ts\n");

/***/ }),

/***/ "../../../Framework/src/live2dcubismframework.ts":
/*!*********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/live2dcubismframework.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ \"../../../Framework/src/utils/cubismjson.ts\");\r\nvar cubismidmanager_1 = __webpack_require__(/*! ./id/cubismidmanager */ \"../../../Framework/src/id/cubismidmanager.ts\");\r\nvar cubismrenderer_1 = __webpack_require__(/*! ./rendering/cubismrenderer */ \"../../../Framework/src/rendering/cubismrenderer.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ./utils/cubismdebug */ \"../../../Framework/src/utils/cubismdebug.ts\");\r\nvar Value = cubismjson_1.Live2DCubismFramework.Value;\r\nvar CubismIdManager = cubismidmanager_1.Live2DCubismFramework.CubismIdManager;\r\nvar CubismRenderer = cubismrenderer_1.Live2DCubismFramework.CubismRenderer;\r\nfunction strtod(s, endPtr) {\r\n    var index = 0;\r\n    for (var i = 1;; i++) {\r\n        var testC = s.slice(i - 1, i);\r\n        if (testC == 'e' || testC == '-' || testC == 'E') {\r\n            continue;\r\n        }\r\n        var test = s.substring(0, i);\r\n        var number = Number(test);\r\n        if (isNaN(number)) {\r\n            break;\r\n        }\r\n        index = i;\r\n    }\r\n    var d = parseFloat(s);\r\n    if (isNaN(d)) {\r\n        d = NaN;\r\n    }\r\n    endPtr[0] = s.slice(index);\r\n    return d;\r\n}\r\nexports.strtod = strtod;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var s_isStarted = false;\r\n    var s_isInitialized = false;\r\n    var s_option = null;\r\n    var s_cubismIdManager = null;\r\n    var Constant;\r\n    (function (Constant) {\r\n        Constant.vertexOffset = 0;\r\n        Constant.vertexStep = 2;\r\n    })(Constant = Live2DCubismFramework.Constant || (Live2DCubismFramework.Constant = {}));\r\n    function csmDelete(address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        address = void 0;\r\n    }\r\n    Live2DCubismFramework.csmDelete = csmDelete;\r\n    var CubismFramework = (function () {\r\n        function CubismFramework() {\r\n        }\r\n        CubismFramework.startUp = function (option) {\r\n            if (option === void 0) { option = null; }\r\n            if (s_isStarted) {\r\n                cubismdebug_1.CubismLogInfo('CubismFramework.startUp() is already done.');\r\n                return s_isStarted;\r\n            }\r\n            s_option = option;\r\n            if (s_option != null) {\r\n                Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\r\n            }\r\n            s_isStarted = true;\r\n            if (s_isStarted) {\r\n                var version = Live2DCubismCore.Version.csmGetVersion();\r\n                var major = (version & 0xff000000) >> 24;\r\n                var minor = (version & 0x00ff0000) >> 16;\r\n                var patch = version & 0x0000ffff;\r\n                var versionNumber = version;\r\n                cubismdebug_1.CubismLogInfo(\"Live2D Cubism Core version: {0}.{1}.{2} ({3})\", ('00' + major).slice(-2), ('00' + minor).slice(-2), ('0000' + patch).slice(-4), versionNumber);\r\n            }\r\n            cubismdebug_1.CubismLogInfo('CubismFramework.startUp() is complete.');\r\n            return s_isStarted;\r\n        };\r\n        CubismFramework.cleanUp = function () {\r\n            s_isStarted = false;\r\n            s_isInitialized = false;\r\n            s_option = null;\r\n            s_cubismIdManager = null;\r\n        };\r\n        CubismFramework.initialize = function () {\r\n            cubismdebug_1.CSM_ASSERT(s_isStarted);\r\n            if (!s_isStarted) {\r\n                cubismdebug_1.CubismLogWarning('CubismFramework is not started.');\r\n                return;\r\n            }\r\n            if (s_isInitialized) {\r\n                cubismdebug_1.CubismLogWarning('CubismFramework.initialize() skipped, already initialized.');\r\n                return;\r\n            }\r\n            Value.staticInitializeNotForClientCall();\r\n            s_cubismIdManager = new CubismIdManager();\r\n            s_isInitialized = true;\r\n            cubismdebug_1.CubismLogInfo('CubismFramework.initialize() is complete.');\r\n        };\r\n        CubismFramework.dispose = function () {\r\n            cubismdebug_1.CSM_ASSERT(s_isStarted);\r\n            if (!s_isStarted) {\r\n                cubismdebug_1.CubismLogWarning('CubismFramework is not started.');\r\n                return;\r\n            }\r\n            if (!s_isInitialized) {\r\n                cubismdebug_1.CubismLogWarning('CubismFramework.dispose() skipped, not initialized.');\r\n                return;\r\n            }\r\n            Value.staticReleaseNotForClientCall();\r\n            s_cubismIdManager.release();\r\n            s_cubismIdManager = null;\r\n            CubismRenderer.staticRelease();\r\n            s_isInitialized = false;\r\n            cubismdebug_1.CubismLogInfo('CubismFramework.dispose() is complete.');\r\n        };\r\n        CubismFramework.isStarted = function () {\r\n            return s_isStarted;\r\n        };\r\n        CubismFramework.isInitialized = function () {\r\n            return s_isInitialized;\r\n        };\r\n        CubismFramework.coreLogFunction = function (message) {\r\n            if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\r\n                return;\r\n            }\r\n            Live2DCubismCore.Logging.csmGetLogFunction()(message);\r\n        };\r\n        CubismFramework.getLoggingLevel = function () {\r\n            if (s_option != null) {\r\n                return s_option.loggingLevel;\r\n            }\r\n            return LogLevel.LogLevel_Off;\r\n        };\r\n        CubismFramework.getIdManager = function () {\r\n            return s_cubismIdManager;\r\n        };\r\n        return CubismFramework;\r\n    }());\r\n    Live2DCubismFramework.CubismFramework = CubismFramework;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\nvar Option = (function () {\r\n    function Option() {\r\n    }\r\n    return Option;\r\n}());\r\nexports.Option = Option;\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"LogLevel_Verbose\"] = 0] = \"LogLevel_Verbose\";\r\n    LogLevel[LogLevel[\"LogLevel_Debug\"] = 1] = \"LogLevel_Debug\";\r\n    LogLevel[LogLevel[\"LogLevel_Info\"] = 2] = \"LogLevel_Info\";\r\n    LogLevel[LogLevel[\"LogLevel_Warning\"] = 3] = \"LogLevel_Warning\";\r\n    LogLevel[LogLevel[\"LogLevel_Error\"] = 4] = \"LogLevel_Error\";\r\n    LogLevel[LogLevel[\"LogLevel_Off\"] = 5] = \"LogLevel_Off\";\r\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/live2dcubismframework.ts\n");

/***/ }),

/***/ "../../../Framework/src/math/cubismmath.ts":
/*!***************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/math/cubismmath.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismvector2_1 = __webpack_require__(/*! ./cubismvector2 */ \"../../../Framework/src/math/cubismvector2.ts\");\r\nvar CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMath = (function () {\r\n        function CubismMath() {\r\n        }\r\n        CubismMath.range = function (value, min, max) {\r\n            if (value < min) {\r\n                value = min;\r\n            }\r\n            else if (value > max) {\r\n                value = max;\r\n            }\r\n            return value;\r\n        };\r\n        CubismMath.sin = function (x) {\r\n            return Math.sin(x);\r\n        };\r\n        CubismMath.cos = function (x) {\r\n            return Math.cos(x);\r\n        };\r\n        CubismMath.abs = function (x) {\r\n            return Math.abs(x);\r\n        };\r\n        CubismMath.sqrt = function (x) {\r\n            return Math.sqrt(x);\r\n        };\r\n        CubismMath.getEasingSine = function (value) {\r\n            if (value < 0.0) {\r\n                return 0.0;\r\n            }\r\n            else if (value > 1.0) {\r\n                return 1.0;\r\n            }\r\n            return 0.5 - 0.5 * this.cos(value * Math.PI);\r\n        };\r\n        CubismMath.max = function (left, right) {\r\n            return left > right ? left : right;\r\n        };\r\n        CubismMath.min = function (left, right) {\r\n            return left > right ? right : left;\r\n        };\r\n        CubismMath.degreesToRadian = function (degrees) {\r\n            return (degrees / 180.0) * Math.PI;\r\n        };\r\n        CubismMath.radianToDegrees = function (radian) {\r\n            return (radian * 180.0) / Math.PI;\r\n        };\r\n        CubismMath.directionToRadian = function (from, to) {\r\n            var q1 = Math.atan2(to.y, to.x);\r\n            var q2 = Math.atan2(from.y, from.x);\r\n            var ret = q1 - q2;\r\n            while (ret < -Math.PI) {\r\n                ret += Math.PI * 2.0;\r\n            }\r\n            while (ret > Math.PI) {\r\n                ret -= Math.PI * 2.0;\r\n            }\r\n            return ret;\r\n        };\r\n        CubismMath.directionToDegrees = function (from, to) {\r\n            var radian = this.directionToRadian(from, to);\r\n            var degree = this.radianToDegrees(radian);\r\n            if (to.x - from.x > 0.0) {\r\n                degree = -degree;\r\n            }\r\n            return degree;\r\n        };\r\n        CubismMath.radianToDirection = function (totalAngle) {\r\n            var ret = new CubismVector2();\r\n            ret.x = this.sin(totalAngle);\r\n            ret.y = this.cos(totalAngle);\r\n            return ret;\r\n        };\r\n        return CubismMath;\r\n    }());\r\n    Live2DCubismFramework.CubismMath = CubismMath;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/math/cubismmath.ts\n");

/***/ }),

/***/ "../../../Framework/src/math/cubismmatrix44.ts":
/*!*******************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/math/cubismmatrix44.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMatrix44 = (function () {\r\n        function CubismMatrix44() {\r\n            this._tr = new Float32Array(16);\r\n            this.loadIdentity();\r\n        }\r\n        CubismMatrix44.multiply = function (a, b, dst) {\r\n            var c = new Float32Array([\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0\r\n            ]);\r\n            var n = 4;\r\n            for (var i = 0; i < n; ++i) {\r\n                for (var j = 0; j < n; ++j) {\r\n                    for (var k = 0; k < n; ++k) {\r\n                        c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\r\n                    }\r\n                }\r\n            }\r\n            for (var i = 0; i < 16; ++i) {\r\n                dst[i] = c[i];\r\n            }\r\n        };\r\n        CubismMatrix44.prototype.loadIdentity = function () {\r\n            var c = new Float32Array([\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            this.setMatrix(c);\r\n        };\r\n        CubismMatrix44.prototype.setMatrix = function (tr) {\r\n            for (var i = 0; i < 16; ++i) {\r\n                this._tr[i] = tr[i];\r\n            }\r\n        };\r\n        CubismMatrix44.prototype.getArray = function () {\r\n            return this._tr;\r\n        };\r\n        CubismMatrix44.prototype.getScaleX = function () {\r\n            return this._tr[0];\r\n        };\r\n        CubismMatrix44.prototype.getScaleY = function () {\r\n            return this._tr[5];\r\n        };\r\n        CubismMatrix44.prototype.getTranslateX = function () {\r\n            return this._tr[12];\r\n        };\r\n        CubismMatrix44.prototype.getTranslateY = function () {\r\n            return this._tr[13];\r\n        };\r\n        CubismMatrix44.prototype.transformX = function (src) {\r\n            return this._tr[0] * src + this._tr[12];\r\n        };\r\n        CubismMatrix44.prototype.transformY = function (src) {\r\n            return this._tr[5] * src + this._tr[13];\r\n        };\r\n        CubismMatrix44.prototype.invertTransformX = function (src) {\r\n            return (src - this._tr[12]) / this._tr[0];\r\n        };\r\n        CubismMatrix44.prototype.invertTransformY = function (src) {\r\n            return (src - this._tr[13]) / this._tr[5];\r\n        };\r\n        CubismMatrix44.prototype.translateRelative = function (x, y) {\r\n            var tr1 = new Float32Array([\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                x,\r\n                y,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n        };\r\n        CubismMatrix44.prototype.translate = function (x, y) {\r\n            this._tr[12] = x;\r\n            this._tr[13] = y;\r\n        };\r\n        CubismMatrix44.prototype.translateX = function (x) {\r\n            this._tr[12] = x;\r\n        };\r\n        CubismMatrix44.prototype.translateY = function (y) {\r\n            this._tr[13] = y;\r\n        };\r\n        CubismMatrix44.prototype.scaleRelative = function (x, y) {\r\n            var tr1 = new Float32Array([\r\n                x,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                y,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n        };\r\n        CubismMatrix44.prototype.scale = function (x, y) {\r\n            this._tr[0] = x;\r\n            this._tr[5] = y;\r\n        };\r\n        CubismMatrix44.prototype.multiplyByMatrix = function (m) {\r\n            CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\r\n        };\r\n        CubismMatrix44.prototype.clone = function () {\r\n            var cloneMatrix = new CubismMatrix44();\r\n            for (var i = 0; i < this._tr.length; i++) {\r\n                cloneMatrix._tr[i] = this._tr[i];\r\n            }\r\n            return cloneMatrix;\r\n        };\r\n        return CubismMatrix44;\r\n    }());\r\n    Live2DCubismFramework.CubismMatrix44 = CubismMatrix44;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/math/cubismmatrix44.ts\n");

/***/ }),

/***/ "../../../Framework/src/math/cubismmodelmatrix.ts":
/*!**********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/math/cubismmodelmatrix.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ \"../../../Framework/src/math/cubismmatrix44.ts\");\r\nvar CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismModelMatrix = (function (_super) {\r\n        __extends(CubismModelMatrix, _super);\r\n        function CubismModelMatrix(w, h) {\r\n            var _this = _super.call(this) || this;\r\n            _this._width = w !== undefined ? w : 0.0;\r\n            _this._height = h !== undefined ? h : 0.0;\r\n            _this.setHeight(1.0);\r\n            return _this;\r\n        }\r\n        CubismModelMatrix.prototype.setWidth = function (w) {\r\n            var scaleX = w / this._width;\r\n            var scaleY = scaleX;\r\n            this.scale(scaleX, scaleY);\r\n        };\r\n        CubismModelMatrix.prototype.setHeight = function (h) {\r\n            var scaleX = h / this._height;\r\n            var scaleY = scaleX;\r\n            this.scale(scaleX, scaleY);\r\n        };\r\n        CubismModelMatrix.prototype.setPosition = function (x, y) {\r\n            this.translate(x, y);\r\n        };\r\n        CubismModelMatrix.prototype.setCenterPosition = function (x, y) {\r\n            this.centerX(x);\r\n            this.centerY(y);\r\n        };\r\n        CubismModelMatrix.prototype.top = function (y) {\r\n            this.setY(y);\r\n        };\r\n        CubismModelMatrix.prototype.bottom = function (y) {\r\n            var h = this._height * this.getScaleY();\r\n            this.translateY(y - h);\r\n        };\r\n        CubismModelMatrix.prototype.left = function (x) {\r\n            this.setX(x);\r\n        };\r\n        CubismModelMatrix.prototype.right = function (x) {\r\n            var w = this._width * this.getScaleX();\r\n            this.translateX(x - w);\r\n        };\r\n        CubismModelMatrix.prototype.centerX = function (x) {\r\n            var w = this._width * this.getScaleX();\r\n            this.translateX(x - w / 2.0);\r\n        };\r\n        CubismModelMatrix.prototype.setX = function (x) {\r\n            this.translateX(x);\r\n        };\r\n        CubismModelMatrix.prototype.centerY = function (y) {\r\n            var h = this._height * this.getScaleY();\r\n            this.translateY(y - h / 2.0);\r\n        };\r\n        CubismModelMatrix.prototype.setY = function (y) {\r\n            this.translateY(y);\r\n        };\r\n        CubismModelMatrix.prototype.setupFromLayout = function (layout) {\r\n            var keyWidth = 'width';\r\n            var keyHeight = 'height';\r\n            var keyX = 'x';\r\n            var keyY = 'y';\r\n            var keyCenterX = 'center_x';\r\n            var keyCenterY = 'center_y';\r\n            var keyTop = 'top';\r\n            var keyBottom = 'bottom';\r\n            var keyLeft = 'left';\r\n            var keyRight = 'right';\r\n            for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {\r\n                var key = ite.ptr().first;\r\n                var value = ite.ptr().second;\r\n                if (key == keyWidth) {\r\n                    this.setWidth(value);\r\n                }\r\n                else if (key == keyHeight) {\r\n                    this.setHeight(value);\r\n                }\r\n            }\r\n            for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {\r\n                var key = ite.ptr().first;\r\n                var value = ite.ptr().second;\r\n                if (key == keyX) {\r\n                    this.setX(value);\r\n                }\r\n                else if (key == keyY) {\r\n                    this.setY(value);\r\n                }\r\n                else if (key == keyCenterX) {\r\n                    this.centerX(value);\r\n                }\r\n                else if (key == keyCenterY) {\r\n                    this.centerY(value);\r\n                }\r\n                else if (key == keyTop) {\r\n                    this.top(value);\r\n                }\r\n                else if (key == keyBottom) {\r\n                    this.bottom(value);\r\n                }\r\n                else if (key == keyLeft) {\r\n                    this.left(value);\r\n                }\r\n                else if (key == keyRight) {\r\n                    this.right(value);\r\n                }\r\n            }\r\n        };\r\n        return CubismModelMatrix;\r\n    }(CubismMatrix44));\r\n    Live2DCubismFramework.CubismModelMatrix = CubismModelMatrix;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/math/cubismmodelmatrix.ts\n");

/***/ }),

/***/ "../../../Framework/src/math/cubismtargetpoint.ts":
/*!**********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/math/cubismtargetpoint.ts ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmath_1 = __webpack_require__(/*! ./cubismmath */ \"../../../Framework/src/math/cubismmath.ts\");\r\nvar CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var FrameRate = 30;\r\n    var Epsilon = 0.01;\r\n    var CubismTargetPoint = (function () {\r\n        function CubismTargetPoint() {\r\n            this._faceTargetX = 0.0;\r\n            this._faceTargetY = 0.0;\r\n            this._faceX = 0.0;\r\n            this._faceY = 0.0;\r\n            this._faceVX = 0.0;\r\n            this._faceVY = 0.0;\r\n            this._lastTimeSeconds = 0.0;\r\n            this._userTimeSeconds = 0.0;\r\n        }\r\n        CubismTargetPoint.prototype.update = function (deltaTimeSeconds) {\r\n            this._userTimeSeconds += deltaTimeSeconds;\r\n            var faceParamMaxV = 40.0 / 10.0;\r\n            var maxV = (faceParamMaxV * 1.0) / FrameRate;\r\n            if (this._lastTimeSeconds == 0.0) {\r\n                this._lastTimeSeconds = this._userTimeSeconds;\r\n                return;\r\n            }\r\n            var deltaTimeWeight = (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\r\n            this._lastTimeSeconds = this._userTimeSeconds;\r\n            var timeToMaxSpeed = 0.15;\r\n            var frameToMaxSpeed = timeToMaxSpeed * FrameRate;\r\n            var maxA = (deltaTimeWeight * maxV) / frameToMaxSpeed;\r\n            var dx = this._faceTargetX - this._faceX;\r\n            var dy = this._faceTargetY - this._faceY;\r\n            if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {\r\n                return;\r\n            }\r\n            var d = CubismMath.sqrt(dx * dx + dy * dy);\r\n            var vx = (maxV * dx) / d;\r\n            var vy = (maxV * dy) / d;\r\n            var ax = vx - this._faceVX;\r\n            var ay = vy - this._faceVY;\r\n            var a = CubismMath.sqrt(ax * ax + ay * ay);\r\n            if (a < -maxA || a > maxA) {\r\n                ax *= maxA / a;\r\n                ay *= maxA / a;\r\n            }\r\n            this._faceVX += ax;\r\n            this._faceVY += ay;\r\n            {\r\n                var maxV_1 = 0.5 *\r\n                    (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -\r\n                        maxA);\r\n                var curV = CubismMath.sqrt(this._faceVX * this._faceVX + this._faceVY * this._faceVY);\r\n                if (curV > maxV_1) {\r\n                    this._faceVX *= maxV_1 / curV;\r\n                    this._faceVY *= maxV_1 / curV;\r\n                }\r\n            }\r\n            this._faceX += this._faceVX;\r\n            this._faceY += this._faceVY;\r\n        };\r\n        CubismTargetPoint.prototype.getX = function () {\r\n            return this._faceX;\r\n        };\r\n        CubismTargetPoint.prototype.getY = function () {\r\n            return this._faceY;\r\n        };\r\n        CubismTargetPoint.prototype.set = function (x, y) {\r\n            this._faceTargetX = x;\r\n            this._faceTargetY = y;\r\n        };\r\n        return CubismTargetPoint;\r\n    }());\r\n    Live2DCubismFramework.CubismTargetPoint = CubismTargetPoint;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/math/cubismtargetpoint.ts\n");

/***/ }),

/***/ "../../../Framework/src/math/cubismvector2.ts":
/*!******************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/math/cubismvector2.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismVector2 = (function () {\r\n        function CubismVector2(x, y) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.x = x == undefined ? 0.0 : x;\r\n            this.y = y == undefined ? 0.0 : y;\r\n        }\r\n        CubismVector2.prototype.add = function (vector2) {\r\n            var ret = new CubismVector2(0.0, 0.0);\r\n            ret.x = this.x + vector2.x;\r\n            ret.y = this.y + vector2.y;\r\n            return ret;\r\n        };\r\n        CubismVector2.prototype.substract = function (vector2) {\r\n            var ret = new CubismVector2(0.0, 0.0);\r\n            ret.x = this.x - vector2.x;\r\n            ret.y = this.y - vector2.y;\r\n            return ret;\r\n        };\r\n        CubismVector2.prototype.multiply = function (vector2) {\r\n            var ret = new CubismVector2(0.0, 0.0);\r\n            ret.x = this.x * vector2.x;\r\n            ret.y = this.y * vector2.y;\r\n            return ret;\r\n        };\r\n        CubismVector2.prototype.multiplyByScaler = function (scalar) {\r\n            return this.multiply(new CubismVector2(scalar, scalar));\r\n        };\r\n        CubismVector2.prototype.division = function (vector2) {\r\n            var ret = new CubismVector2(0.0, 0.0);\r\n            ret.x = this.x / vector2.x;\r\n            ret.y = this.y / vector2.y;\r\n            return ret;\r\n        };\r\n        CubismVector2.prototype.divisionByScalar = function (scalar) {\r\n            return this.division(new CubismVector2(scalar, scalar));\r\n        };\r\n        CubismVector2.prototype.getLength = function () {\r\n            return Math.sqrt(this.x * this.x + this.y * this.y);\r\n        };\r\n        CubismVector2.prototype.getDistanceWith = function (a) {\r\n            return Math.sqrt((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));\r\n        };\r\n        CubismVector2.prototype.dot = function (a) {\r\n            return this.x * a.x + this.y * a.y;\r\n        };\r\n        CubismVector2.prototype.normalize = function () {\r\n            var length = Math.pow(this.x * this.x + this.y * this.y, 0.5);\r\n            this.x = this.x / length;\r\n            this.y = this.y / length;\r\n        };\r\n        CubismVector2.prototype.isEqual = function (rhs) {\r\n            return this.x == rhs.x && this.y == rhs.y;\r\n        };\r\n        CubismVector2.prototype.isNotEqual = function (rhs) {\r\n            return !this.isEqual(rhs);\r\n        };\r\n        return CubismVector2;\r\n    }());\r\n    Live2DCubismFramework.CubismVector2 = CubismVector2;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9tYXRoL2N1YmlzbXZlY3RvcjIudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovVXNlcnMvbWlmYXMvRG9jdW1lbnRzL3JlZHNvZGEwMjEzLmdpdGh1Yi5pby9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtdmVjdG9yMi50cz8yZGUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIC8qKlxyXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6vlnotcclxuICAgKlxyXG4gICAqIDLmrKHlhYPjg5njgq/jg4jjg6vlnovjga7mqZ/og73jgpLmj5DkvpvjgZnjgovjgIJcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICAvKipcclxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IocHVibGljIHg/OiBudW1iZXIsIHB1YmxpYyB5PzogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMueCA9IHggPT0gdW5kZWZpbmVkID8gMC4wIDogeDtcclxuXHJcbiAgICAgIHRoaXMueSA9IHkgPT0gdW5kZWZpbmVkID8gMC4wIDogeTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODmeOCr+ODiOODq+OBruWKoOeul1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIOWKoOeul+OBmeOCi+ODmeOCr+ODiOODq+WApFxyXG4gICAgICogQHJldHVybiDliqDnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGQodmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjIge1xyXG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICAgIHJldC54ID0gdGhpcy54ICsgdmVjdG9yMi54O1xyXG4gICAgICByZXQueSA9IHRoaXMueSArIHZlY3RvcjIueTtcclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODmeOCr+ODiOODq+OBrua4m+eul1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIOa4m+eul+OBmeOCi+ODmeOCr+ODiOODq+WApFxyXG4gICAgICogQHJldHVybiDmuJvnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdWJzdHJhY3QodmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjIge1xyXG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICAgIHJldC54ID0gdGhpcy54IC0gdmVjdG9yMi54O1xyXG4gICAgICByZXQueSA9IHRoaXMueSAtIHZlY3RvcjIueTtcclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODmeOCr+ODiOODq+OBruS5l+eul1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIOS5l+eul+OBmeOCi+ODmeOCr+ODiOODq+WApFxyXG4gICAgICogQHJldHVybiDkuZfnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtdWx0aXBseSh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgcmV0LnggPSB0aGlzLnggKiB2ZWN0b3IyLng7XHJcbiAgICAgIHJldC55ID0gdGhpcy55ICogdmVjdG9yMi55O1xyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OZ44Kv44OI44Or44Gu5LmX566XKOOCueOCq+ODqeODvClcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc2NhbGFyIOS5l+eul+OBmeOCi+OCueOCq+ODqeODvOWApFxyXG4gICAgICogQHJldHVybiDkuZfnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtdWx0aXBseUJ5U2NhbGVyKHNjYWxhcjogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5KG5ldyBDdWJpc21WZWN0b3IyKHNjYWxhciwgc2NhbGFyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg5njgq/jg4jjg6vjga7pmaTnrpdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdmVjdG9yMiDpmaTnrpfjgZnjgovjg5njgq/jg4jjg6vlgKRcclxuICAgICAqIEByZXR1cm4g6Zmk566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGl2aXNpb24odmVjdG9yMjogQ3ViaXNtVmVjdG9yMik6IEN1YmlzbVZlY3RvcjIge1xyXG4gICAgICBjb25zdCByZXQ6IEN1YmlzbVZlY3RvcjIgPSBuZXcgQ3ViaXNtVmVjdG9yMigwLjAsIDAuMCk7XHJcbiAgICAgIHJldC54ID0gdGhpcy54IC8gdmVjdG9yMi54O1xyXG4gICAgICByZXQueSA9IHRoaXMueSAvIHZlY3RvcjIueTtcclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODmeOCr+ODiOODq+OBrumZpOeulyjjgrnjgqvjg6njg7wpXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHNjYWxhciDpmaTnrpfjgZnjgovjgrnjgqvjg6njg7zlgKRcclxuICAgICAqIEByZXR1cm4g6Zmk566X57WQ5p6cIOODmeOCr+ODiOODq+WApFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGl2aXNpb25CeVNjYWxhcihzY2FsYXI6IG51bWJlcik6IEN1YmlzbVZlY3RvcjIge1xyXG4gICAgICByZXR1cm4gdGhpcy5kaXZpc2lvbihuZXcgQ3ViaXNtVmVjdG9yMihzY2FsYXIsIHNjYWxhcikpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OZ44Kv44OI44Or44Gu6ZW344GV44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiDjg5njgq/jg4jjg6vjga7plbfjgZVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldExlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg5njgq/jg4jjg6vjga7ot53pm6Ljga7lj5blvpdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYSDngrlcclxuICAgICAqIEByZXR1cm4g44OZ44Kv44OI44Or44Gu6Led6ZuiXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXREaXN0YW5jZVdpdGgoYTogQ3ViaXNtVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiBNYXRoLnNxcnQoXHJcbiAgICAgICAgKHRoaXMueCAtIGEueCkgKiAodGhpcy54IC0gYS54KSArICh0aGlzLnkgLSBhLnkpICogKHRoaXMueSAtIGEueSlcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODieODg+ODiOepjeOBruioiOeul1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhIOWApFxyXG4gICAgICogQHJldHVybiDntZDmnpxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGRvdChhOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMueCAqIGEueCArIHRoaXMueSAqIGEueTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOato+imj+WMluOBrumBqeeUqFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbm9ybWFsaXplKCk6IHZvaWQge1xyXG4gICAgICBjb25zdCBsZW5ndGg6IG51bWJlciA9IE1hdGgucG93KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSwgMC41KTtcclxuXHJcbiAgICAgIHRoaXMueCA9IHRoaXMueCAvIGxlbmd0aDtcclxuICAgICAgdGhpcy55ID0gdGhpcy55IC8gbGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog562J44GX44GV44Gu56K66KqN77yI562J44GX44GE44GL77yf77yJXHJcbiAgICAgKlxyXG4gICAgICog5YCk44GM562J44GX44GE44GL77yfXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHJocyDnorroqo3jgZnjgovlgKRcclxuICAgICAqIEByZXR1cm4gdHJ1ZSDlgKTjga/nrYnjgZfjgYRcclxuICAgICAqIEByZXR1cm4gZmFsc2Ug5YCk44Gv562J44GX44GP44Gq44GEXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0VxdWFsKHJoczogQ3ViaXNtVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gdGhpcy54ID09IHJocy54ICYmIHRoaXMueSA9PSByaHMueTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOetieOBl+OBleOBrueiuuiqje+8iOetieOBl+OBj+OBquOBhOOBi++8n++8iVxyXG4gICAgICpcclxuICAgICAqIOWApOOBjOetieOBl+OBj+OBquOBhOOBi++8n1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSByaHMg56K66KqN44GZ44KL5YCkXHJcbiAgICAgKiBAcmV0dXJuIHRydWUg5YCk44Gv562J44GX44GP44Gq44GEXHJcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOWApOOBr+etieOBl+OBhFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNOb3RFcXVhbChyaHM6IEN1YmlzbVZlY3RvcjIpOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuICF0aGlzLmlzRXF1YWwocmhzKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOztBQU9BO0FBQUE7QUFNQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFHQTtBQVFBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBcEpBO0FBcUpBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../Framework/src/math/cubismvector2.ts\n");

/***/ }),

/***/ "../../../Framework/src/math/cubismviewmatrix.ts":
/*!*********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/math/cubismviewmatrix.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ \"../../../Framework/src/math/cubismmatrix44.ts\");\r\nvar CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismViewMatrix = (function (_super) {\r\n        __extends(CubismViewMatrix, _super);\r\n        function CubismViewMatrix() {\r\n            var _this = _super.call(this) || this;\r\n            _this._screenLeft = 0.0;\r\n            _this._screenRight = 0.0;\r\n            _this._screenTop = 0.0;\r\n            _this._screenBottom = 0.0;\r\n            _this._maxLeft = 0.0;\r\n            _this._maxRight = 0.0;\r\n            _this._maxTop = 0.0;\r\n            _this._maxBottom = 0.0;\r\n            _this._maxScale = 0.0;\r\n            _this._minScale = 0.0;\r\n            return _this;\r\n        }\r\n        CubismViewMatrix.prototype.adjustTranslate = function (x, y) {\r\n            if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {\r\n                x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];\r\n            }\r\n            if (this._tr[0] * this._maxRight + (this._tr[12] + x) <\r\n                this._screenRight) {\r\n                x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];\r\n            }\r\n            if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {\r\n                y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];\r\n            }\r\n            if (this._tr[5] * this._maxBottom + (this._tr[13] + y) >\r\n                this._screenBottom) {\r\n                y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];\r\n            }\r\n            var tr1 = new Float32Array([\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                x,\r\n                y,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n        };\r\n        CubismViewMatrix.prototype.adjustScale = function (cx, cy, scale) {\r\n            var maxScale = this.getMaxScale();\r\n            var minScale = this.getMinScale();\r\n            var targetScale = scale * this._tr[0];\r\n            if (targetScale < minScale) {\r\n                if (this._tr[0] > 0.0) {\r\n                    scale = minScale / this._tr[0];\r\n                }\r\n            }\r\n            else if (targetScale > maxScale) {\r\n                if (this._tr[0] > 0.0) {\r\n                    scale = maxScale / this._tr[0];\r\n                }\r\n            }\r\n            var tr1 = new Float32Array([\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                cx,\r\n                cy,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            var tr2 = new Float32Array([\r\n                scale,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                scale,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            var tr3 = new Float32Array([\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                -cx,\r\n                -cy,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            CubismMatrix44.multiply(tr3, this._tr, this._tr);\r\n            CubismMatrix44.multiply(tr2, this._tr, this._tr);\r\n            CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n        };\r\n        CubismViewMatrix.prototype.setScreenRect = function (left, right, bottom, top) {\r\n            this._screenLeft = left;\r\n            this._screenRight = right;\r\n            this._screenBottom = bottom;\r\n            this._screenTop = top;\r\n        };\r\n        CubismViewMatrix.prototype.setMaxScreenRect = function (left, right, bottom, top) {\r\n            this._maxLeft = left;\r\n            this._maxRight = right;\r\n            this._maxTop = top;\r\n            this._maxBottom = bottom;\r\n        };\r\n        CubismViewMatrix.prototype.setMaxScale = function (maxScale) {\r\n            this._maxScale = maxScale;\r\n        };\r\n        CubismViewMatrix.prototype.setMinScale = function (minScale) {\r\n            this._minScale = minScale;\r\n        };\r\n        CubismViewMatrix.prototype.getMaxScale = function () {\r\n            return this._maxScale;\r\n        };\r\n        CubismViewMatrix.prototype.getMinScale = function () {\r\n            return this._minScale;\r\n        };\r\n        CubismViewMatrix.prototype.isMaxScale = function () {\r\n            return this.getScaleX() >= this._maxScale;\r\n        };\r\n        CubismViewMatrix.prototype.isMinScale = function () {\r\n            return this.getScaleX() <= this._minScale;\r\n        };\r\n        CubismViewMatrix.prototype.getScreenLeft = function () {\r\n            return this._screenLeft;\r\n        };\r\n        CubismViewMatrix.prototype.getScreenRight = function () {\r\n            return this._screenRight;\r\n        };\r\n        CubismViewMatrix.prototype.getScreenBottom = function () {\r\n            return this._screenBottom;\r\n        };\r\n        CubismViewMatrix.prototype.getScreenTop = function () {\r\n            return this._screenTop;\r\n        };\r\n        CubismViewMatrix.prototype.getMaxLeft = function () {\r\n            return this._maxLeft;\r\n        };\r\n        CubismViewMatrix.prototype.getMaxRight = function () {\r\n            return this._maxRight;\r\n        };\r\n        CubismViewMatrix.prototype.getMaxBottom = function () {\r\n            return this._maxBottom;\r\n        };\r\n        CubismViewMatrix.prototype.getMaxTop = function () {\r\n            return this._maxTop;\r\n        };\r\n        return CubismViewMatrix;\r\n    }(CubismMatrix44));\r\n    Live2DCubismFramework.CubismViewMatrix = CubismViewMatrix;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/math/cubismviewmatrix.ts\n");

/***/ }),

/***/ "../../../Framework/src/model/cubismmoc.ts":
/*!***************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/model/cubismmoc.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmodel_1 = __webpack_require__(/*! ./cubismmodel */ \"../../../Framework/src/model/cubismmodel.ts\");\r\nvar CubismModel = cubismmodel_1.Live2DCubismFramework.CubismModel;\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"../../../Framework/src/utils/cubismdebug.ts\");\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMoc = (function () {\r\n        function CubismMoc(moc) {\r\n            this._moc = moc;\r\n            this._modelCount = 0;\r\n        }\r\n        CubismMoc.create = function (mocBytes) {\r\n            var cubismMoc = null;\r\n            var moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);\r\n            if (moc) {\r\n                cubismMoc = new CubismMoc(moc);\r\n            }\r\n            return cubismMoc;\r\n        };\r\n        CubismMoc.delete = function (moc) {\r\n            moc._moc._release();\r\n            moc._moc = null;\r\n            moc = null;\r\n        };\r\n        CubismMoc.prototype.createModel = function () {\r\n            var cubismModel = null;\r\n            var model = Live2DCubismCore.Model.fromMoc(this._moc);\r\n            if (model) {\r\n                cubismModel = new CubismModel(model);\r\n                cubismModel.initialize();\r\n                ++this._modelCount;\r\n            }\r\n            return cubismModel;\r\n        };\r\n        CubismMoc.prototype.deleteModel = function (model) {\r\n            if (model != null) {\r\n                model.release();\r\n                model = null;\r\n                --this._modelCount;\r\n            }\r\n        };\r\n        CubismMoc.prototype.release = function () {\r\n            cubismdebug_1.CSM_ASSERT(this._modelCount == 0);\r\n            this._moc._release();\r\n            this._moc = null;\r\n        };\r\n        return CubismMoc;\r\n    }());\r\n    Live2DCubismFramework.CubismMoc = CubismMoc;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2MudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovVXNlcnMvbWlmYXMvRG9jdW1lbnRzL3JlZHNvZGEwMjEzLmdpdGh1Yi5pby9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vYy50cz82YjY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xyXG5pbXBvcnQgeyBDU01fQVNTRVJUIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIC8qKlxyXG4gICAqIE1vY+ODh+ODvOOCv+OBrueuoeeQhlxyXG4gICAqXHJcbiAgICogTW9j44OH44O844K/44Gu566h55CG44KS6KGM44GG44Kv44Op44K544CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vYyB7XHJcbiAgICAvKipcclxuICAgICAqIE1vY+ODh+ODvOOCv+OBruS9nOaIkFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShtb2NCeXRlczogQXJyYXlCdWZmZXIpOiBDdWJpc21Nb2Mge1xyXG4gICAgICBsZXQgY3ViaXNtTW9jOiBDdWJpc21Nb2MgPSBudWxsO1xyXG4gICAgICBjb25zdCBtb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MuZnJvbUFycmF5QnVmZmVyKFxyXG4gICAgICAgIG1vY0J5dGVzXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAobW9jKSB7XHJcbiAgICAgICAgY3ViaXNtTW9jID0gbmV3IEN1YmlzbU1vYyhtb2MpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gY3ViaXNtTW9jO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW9j44OH44O844K/44KS5YmK6ZmkXHJcbiAgICAgKlxyXG4gICAgICogTW9j44OH44O844K/44KS5YmK6Zmk44GZ44KLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vYzogQ3ViaXNtTW9jKTogdm9pZCB7XHJcbiAgICAgIG1vYy5fbW9jLl9yZWxlYXNlKCk7XHJcbiAgICAgIG1vYy5fbW9jID0gbnVsbDtcclxuICAgICAgbW9jID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODouODh+ODq+OCkuS9nOaIkOOBmeOCi1xyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gTW9j44OH44O844K/44GL44KJ5L2c5oiQ44GV44KM44Gf44Oi44OH44OrXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZU1vZGVsKCk6IEN1YmlzbU1vZGVsIHtcclxuICAgICAgbGV0IGN1YmlzbU1vZGVsOiBDdWJpc21Nb2RlbCA9IG51bGw7XHJcblxyXG4gICAgICBjb25zdCBtb2RlbDogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbCA9IExpdmUyREN1YmlzbUNvcmUuTW9kZWwuZnJvbU1vYyhcclxuICAgICAgICB0aGlzLl9tb2NcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChtb2RlbCkge1xyXG4gICAgICAgIGN1YmlzbU1vZGVsID0gbmV3IEN1YmlzbU1vZGVsKG1vZGVsKTtcclxuICAgICAgICBjdWJpc21Nb2RlbC5pbml0aWFsaXplKCk7XHJcblxyXG4gICAgICAgICsrdGhpcy5fbW9kZWxDb3VudDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGN1YmlzbU1vZGVsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Oi44OH44Or44KS5YmK6Zmk44GZ44KLXHJcbiAgICAgKi9cclxuICAgIGRlbGV0ZU1vZGVsKG1vZGVsOiBDdWJpc21Nb2RlbCk6IHZvaWQge1xyXG4gICAgICBpZiAobW9kZWwgIT0gbnVsbCkge1xyXG4gICAgICAgIG1vZGVsLnJlbGVhc2UoKTtcclxuICAgICAgICBtb2RlbCA9IG51bGw7XHJcbiAgICAgICAgLS10aGlzLl9tb2RlbENvdW50O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihtb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jKSB7XHJcbiAgICAgIHRoaXMuX21vYyA9IG1vYztcclxuICAgICAgdGhpcy5fbW9kZWxDb3VudCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICAgIENTTV9BU1NFUlQodGhpcy5fbW9kZWxDb3VudCA9PSAwKTtcclxuXHJcbiAgICAgIHRoaXMuX21vYy5fcmVsZWFzZSgpO1xyXG4gICAgICB0aGlzLl9tb2MgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIF9tb2M6IExpdmUyREN1YmlzbUNvcmUuTW9jOyAvLyBNb2Pjg4fjg7zjgr9cclxuICAgIF9tb2RlbENvdW50OiBudW1iZXI7IC8vIE1vY+ODh+ODvOOCv+OBi+OCieS9nOOCieOCjOOBn+ODouODh+ODq+OBruWAi+aVsFxyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7O0FBT0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQU1BO0FBZ0VBO0FBQ0E7QUFDQTtBQUNBO0FBL0RBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUFBO0FBakZBO0FBa0ZBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../Framework/src/model/cubismmoc.ts\n");

/***/ }),

/***/ "../../../Framework/src/model/cubismmodel.ts":
/*!*****************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/model/cubismmodel.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismrenderer_1 = __webpack_require__(/*! ../rendering/cubismrenderer */ \"../../../Framework/src/rendering/cubismrenderer.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar csmmap_1 = __webpack_require__(/*! ../type/csmmap */ \"../../../Framework/src/type/csmmap.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"../../../Framework/src/utils/cubismdebug.ts\");\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismBlendMode = cubismrenderer_1.Live2DCubismFramework.CubismBlendMode;\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar csmMap = csmmap_1.Live2DCubismFramework.csmMap;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismModel = (function () {\r\n        function CubismModel(model) {\r\n            this._model = model;\r\n            this._parameterValues = null;\r\n            this._parameterMaximumValues = null;\r\n            this._parameterMinimumValues = null;\r\n            this._partOpacities = null;\r\n            this._savedParameters = new csmVector();\r\n            this._parameterIds = new csmVector();\r\n            this._drawableIds = new csmVector();\r\n            this._partIds = new csmVector();\r\n            this._notExistPartId = new csmMap();\r\n            this._notExistParameterId = new csmMap();\r\n            this._notExistParameterValues = new csmMap();\r\n            this._notExistPartOpacities = new csmMap();\r\n        }\r\n        CubismModel.prototype.update = function () {\r\n            this._model.update();\r\n            this._model.drawables.resetDynamicFlags();\r\n        };\r\n        CubismModel.prototype.getCanvasWidth = function () {\r\n            if (this._model == null) {\r\n                return 0.0;\r\n            }\r\n            return (this._model.canvasinfo.CanvasWidth /\r\n                this._model.canvasinfo.PixelsPerUnit);\r\n        };\r\n        CubismModel.prototype.getCanvasHeight = function () {\r\n            if (this._model == null) {\r\n                return 0.0;\r\n            }\r\n            return (this._model.canvasinfo.CanvasHeight /\r\n                this._model.canvasinfo.PixelsPerUnit);\r\n        };\r\n        CubismModel.prototype.saveParameters = function () {\r\n            var parameterCount = this._model.parameters.count;\r\n            var savedParameterCount = this._savedParameters.getSize();\r\n            for (var i = 0; i < parameterCount; ++i) {\r\n                if (i < savedParameterCount) {\r\n                    this._savedParameters.set(i, this._parameterValues[i]);\r\n                }\r\n                else {\r\n                    this._savedParameters.pushBack(this._parameterValues[i]);\r\n                }\r\n            }\r\n        };\r\n        CubismModel.prototype.getModel = function () {\r\n            return this._model;\r\n        };\r\n        CubismModel.prototype.getPartIndex = function (partId) {\r\n            var partIndex;\r\n            var partCount = this._model.parts.count;\r\n            for (partIndex = 0; partIndex < partCount; ++partIndex) {\r\n                if (partId == this._partIds.at(partIndex)) {\r\n                    return partIndex;\r\n                }\r\n            }\r\n            if (this._notExistPartId.isExist(partId)) {\r\n                return this._notExistPartId.getValue(partId);\r\n            }\r\n            partIndex = partCount + this._notExistPartId.getSize();\r\n            this._notExistPartId.setValue(partId, partIndex);\r\n            this._notExistPartOpacities.appendKey(partIndex);\r\n            return partIndex;\r\n        };\r\n        CubismModel.prototype.getPartCount = function () {\r\n            var partCount = this._model.parts.count;\r\n            return partCount;\r\n        };\r\n        CubismModel.prototype.setPartOpacityByIndex = function (partIndex, opacity) {\r\n            if (this._notExistPartOpacities.isExist(partIndex)) {\r\n                this._notExistPartOpacities.setValue(partIndex, opacity);\r\n                return;\r\n            }\r\n            cubismdebug_1.CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n            this._partOpacities[partIndex] = opacity;\r\n        };\r\n        CubismModel.prototype.setPartOpacityById = function (partId, opacity) {\r\n            var index = this.getPartIndex(partId);\r\n            if (index < 0) {\r\n                return;\r\n            }\r\n            this.setPartOpacityByIndex(index, opacity);\r\n        };\r\n        CubismModel.prototype.getPartOpacityByIndex = function (partIndex) {\r\n            if (this._notExistPartOpacities.isExist(partIndex)) {\r\n                return this._notExistPartOpacities.getValue(partIndex);\r\n            }\r\n            cubismdebug_1.CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n            return this._partOpacities[partIndex];\r\n        };\r\n        CubismModel.prototype.getPartOpacityById = function (partId) {\r\n            var index = this.getPartIndex(partId);\r\n            if (index < 0) {\r\n                return 0;\r\n            }\r\n            return this.getPartOpacityByIndex(index);\r\n        };\r\n        CubismModel.prototype.getParameterIndex = function (parameterId) {\r\n            var parameterIndex;\r\n            var idCount = this._model.parameters.count;\r\n            for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\r\n                if (parameterId != this._parameterIds.at(parameterIndex)) {\r\n                    continue;\r\n                }\r\n                return parameterIndex;\r\n            }\r\n            if (this._notExistParameterId.isExist(parameterId)) {\r\n                return this._notExistParameterId.getValue(parameterId);\r\n            }\r\n            parameterIndex =\r\n                this._model.parameters.count + this._notExistParameterId.getSize();\r\n            this._notExistParameterId.setValue(parameterId, parameterIndex);\r\n            this._notExistParameterValues.appendKey(parameterIndex);\r\n            return parameterIndex;\r\n        };\r\n        CubismModel.prototype.getParameterCount = function () {\r\n            return this._model.parameters.count;\r\n        };\r\n        CubismModel.prototype.getParameterMaximumValue = function (parameterIndex) {\r\n            return this._model.parameters.maximumValues[parameterIndex];\r\n        };\r\n        CubismModel.prototype.getParameterMinimumValue = function (parameterIndex) {\r\n            return this._model.parameters.minimumValues[parameterIndex];\r\n        };\r\n        CubismModel.prototype.getParameterDefaultValue = function (parameterIndex) {\r\n            return this._model.parameters.defaultValues[parameterIndex];\r\n        };\r\n        CubismModel.prototype.getParameterValueByIndex = function (parameterIndex) {\r\n            if (this._notExistParameterValues.isExist(parameterIndex)) {\r\n                return this._notExistParameterValues.getValue(parameterIndex);\r\n            }\r\n            cubismdebug_1.CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\r\n            return this._parameterValues[parameterIndex];\r\n        };\r\n        CubismModel.prototype.getParameterValueById = function (parameterId) {\r\n            var parameterIndex = this.getParameterIndex(parameterId);\r\n            return this.getParameterValueByIndex(parameterIndex);\r\n        };\r\n        CubismModel.prototype.setParameterValueByIndex = function (parameterIndex, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            if (this._notExistParameterValues.isExist(parameterIndex)) {\r\n                this._notExistParameterValues.setValue(parameterIndex, weight == 1\r\n                    ? value\r\n                    : this._notExistParameterValues.getValue(parameterIndex) *\r\n                        (1 - weight) +\r\n                        value * weight);\r\n                return;\r\n            }\r\n            cubismdebug_1.CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\r\n            if (this._model.parameters.maximumValues[parameterIndex] < value) {\r\n                value = this._model.parameters.maximumValues[parameterIndex];\r\n            }\r\n            if (this._model.parameters.minimumValues[parameterIndex] > value) {\r\n                value = this._model.parameters.minimumValues[parameterIndex];\r\n            }\r\n            this._parameterValues[parameterIndex] =\r\n                weight == 1\r\n                    ? value\r\n                    : (this._parameterValues[parameterIndex] =\r\n                        this._parameterValues[parameterIndex] * (1 - weight) +\r\n                            value * weight);\r\n        };\r\n        CubismModel.prototype.setParameterValueById = function (parameterId, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            var index = this.getParameterIndex(parameterId);\r\n            this.setParameterValueByIndex(index, value, weight);\r\n        };\r\n        CubismModel.prototype.addParameterValueByIndex = function (parameterIndex, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);\r\n        };\r\n        CubismModel.prototype.addParameterValueById = function (parameterId, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            var index = this.getParameterIndex(parameterId);\r\n            this.addParameterValueByIndex(index, value, weight);\r\n        };\r\n        CubismModel.prototype.multiplyParameterValueById = function (parameterId, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            var index = this.getParameterIndex(parameterId);\r\n            this.multiplyParameterValueByIndex(index, value, weight);\r\n        };\r\n        CubismModel.prototype.multiplyParameterValueByIndex = function (parameterIndex, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) *\r\n                (1.0 + (value - 1.0) * weight));\r\n        };\r\n        CubismModel.prototype.getDrawableIndex = function (drawableId) {\r\n            var drawableCount = this._model.drawables.count;\r\n            for (var drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {\r\n                if (this._drawableIds.at(drawableIndex) == drawableId) {\r\n                    return drawableIndex;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n        CubismModel.prototype.getDrawableCount = function () {\r\n            var drawableCount = this._model.drawables.count;\r\n            return drawableCount;\r\n        };\r\n        CubismModel.prototype.getDrawableId = function (drawableIndex) {\r\n            var parameterIds = this._model.drawables.ids;\r\n            return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableRenderOrders = function () {\r\n            var renderOrders = this._model.drawables.renderOrders;\r\n            return renderOrders;\r\n        };\r\n        CubismModel.prototype.getDrawableTextureIndices = function (drawableIndex) {\r\n            var textureIndices = this._model.drawables.textureIndices;\r\n            return textureIndices[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableDynamicFlagVertexPositionsDidChange = function (drawableIndex) {\r\n            var dynamicFlags = this._model.drawables.dynamicFlags;\r\n            return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableVertexIndexCount = function (drawableIndex) {\r\n            var indexCounts = this._model.drawables.indexCounts;\r\n            return indexCounts[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableVertexCount = function (drawableIndex) {\r\n            var vertexCounts = this._model.drawables.vertexCounts;\r\n            return vertexCounts[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableVertices = function (drawableIndex) {\r\n            return this.getDrawableVertexPositions(drawableIndex);\r\n        };\r\n        CubismModel.prototype.getDrawableVertexIndices = function (drawableIndex) {\r\n            var indicesArray = this._model.drawables.indices;\r\n            return indicesArray[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableVertexPositions = function (drawableIndex) {\r\n            var verticesArray = this._model.drawables\r\n                .vertexPositions;\r\n            return verticesArray[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableVertexUvs = function (drawableIndex) {\r\n            var uvsArray = this._model.drawables.vertexUvs;\r\n            return uvsArray[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableOpacity = function (drawableIndex) {\r\n            var opacities = this._model.drawables.opacities;\r\n            return opacities[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableCulling = function (drawableIndex) {\r\n            var constantFlags = this._model.drawables.constantFlags;\r\n            return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableBlendMode = function (drawableIndex) {\r\n            var constantFlags = this._model.drawables.constantFlags;\r\n            return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex])\r\n                ? CubismBlendMode.CubismBlendMode_Additive\r\n                : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex])\r\n                    ? CubismBlendMode.CubismBlendMode_Multiplicative\r\n                    : CubismBlendMode.CubismBlendMode_Normal;\r\n        };\r\n        CubismModel.prototype.getDrawableInvertedMaskBit = function (drawableIndex) {\r\n            var constantFlags = this._model.drawables.constantFlags;\r\n            return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableMasks = function () {\r\n            var masks = this._model.drawables.masks;\r\n            return masks;\r\n        };\r\n        CubismModel.prototype.getDrawableMaskCounts = function () {\r\n            var maskCounts = this._model.drawables.maskCounts;\r\n            return maskCounts;\r\n        };\r\n        CubismModel.prototype.isUsingMasking = function () {\r\n            for (var d = 0; d < this._model.drawables.count; ++d) {\r\n                if (this._model.drawables.maskCounts[d] <= 0) {\r\n                    continue;\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        CubismModel.prototype.getDrawableDynamicFlagIsVisible = function (drawableIndex) {\r\n            var dynamicFlags = this._model.drawables.dynamicFlags;\r\n            return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableDynamicFlagVisibilityDidChange = function (drawableIndex) {\r\n            var dynamicFlags = this._model.drawables.dynamicFlags;\r\n            return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableDynamicFlagOpacityDidChange = function (drawableIndex) {\r\n            var dynamicFlags = this._model.drawables.dynamicFlags;\r\n            return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableDynamicFlagRenderOrderDidChange = function (drawableIndex) {\r\n            var dynamicFlags = this._model.drawables.dynamicFlags;\r\n            return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.loadParameters = function () {\r\n            var parameterCount = this._model.parameters.count;\r\n            var savedParameterCount = this._savedParameters.getSize();\r\n            if (parameterCount > savedParameterCount) {\r\n                parameterCount = savedParameterCount;\r\n            }\r\n            for (var i = 0; i < parameterCount; ++i) {\r\n                this._parameterValues[i] = this._savedParameters.at(i);\r\n            }\r\n        };\r\n        CubismModel.prototype.initialize = function () {\r\n            cubismdebug_1.CSM_ASSERT(this._model);\r\n            this._parameterValues = this._model.parameters.values;\r\n            this._partOpacities = this._model.parts.opacities;\r\n            this._parameterMaximumValues = this._model.parameters.maximumValues;\r\n            this._parameterMinimumValues = this._model.parameters.minimumValues;\r\n            {\r\n                var parameterIds = this._model.parameters.ids;\r\n                var parameterCount = this._model.parameters.count;\r\n                this._parameterIds.prepareCapacity(parameterCount);\r\n                for (var i = 0; i < parameterCount; ++i) {\r\n                    this._parameterIds.pushBack(CubismFramework.getIdManager().getId(parameterIds[i]));\r\n                }\r\n            }\r\n            {\r\n                var partIds = this._model.parts.ids;\r\n                var partCount = this._model.parts.count;\r\n                this._partIds.prepareCapacity(partCount);\r\n                for (var i = 0; i < partCount; ++i) {\r\n                    this._partIds.pushBack(CubismFramework.getIdManager().getId(partIds[i]));\r\n                }\r\n            }\r\n            {\r\n                var drawableIds = this._model.drawables.ids;\r\n                var drawableCount = this._model.drawables.count;\r\n                this._drawableIds.prepareCapacity(drawableCount);\r\n                for (var i = 0; i < drawableCount; ++i) {\r\n                    this._drawableIds.pushBack(CubismFramework.getIdManager().getId(drawableIds[i]));\r\n                }\r\n            }\r\n        };\r\n        CubismModel.prototype.release = function () {\r\n            this._model.release();\r\n            this._model = null;\r\n        };\r\n        return CubismModel;\r\n    }());\r\n    Live2DCubismFramework.CubismModel = CubismModel;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/model/cubismmodel.ts\n");

/***/ }),

/***/ "../../../Framework/src/model/cubismmodeluserdata.ts":
/*!*************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/model/cubismmodeluserdata.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmodeluserdatajson_1 = __webpack_require__(/*! ./cubismmodeluserdatajson */ \"../../../Framework/src/model/cubismmodeluserdatajson.ts\");\r\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"../../../Framework/src/type/csmstring.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar csmString = csmstring_1.Live2DCubismFramework.csmString;\r\nvar CubismModelUserDataJson = cubismmodeluserdatajson_1.Live2DCubismFramework.CubismModelUserDataJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var ArtMesh = 'ArtMesh';\r\n    var CubismModelUserDataNode = (function () {\r\n        function CubismModelUserDataNode() {\r\n        }\r\n        return CubismModelUserDataNode;\r\n    }());\r\n    Live2DCubismFramework.CubismModelUserDataNode = CubismModelUserDataNode;\r\n    var CubismModelUserData = (function () {\r\n        function CubismModelUserData() {\r\n            this._userDataNodes = new csmVector();\r\n            this._artMeshUserDataNode = new csmVector();\r\n        }\r\n        CubismModelUserData.create = function (buffer, size) {\r\n            var ret = new CubismModelUserData();\r\n            ret.parseUserData(buffer, size);\r\n            return ret;\r\n        };\r\n        CubismModelUserData.delete = function (modelUserData) {\r\n            if (modelUserData != null) {\r\n                modelUserData.release();\r\n                modelUserData = null;\r\n            }\r\n        };\r\n        CubismModelUserData.prototype.getArtMeshUserDatas = function () {\r\n            return this._artMeshUserDataNode;\r\n        };\r\n        CubismModelUserData.prototype.parseUserData = function (buffer, size) {\r\n            var json = new CubismModelUserDataJson(buffer, size);\r\n            var typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);\r\n            var nodeCount = json.getUserDataCount();\r\n            for (var i = 0; i < nodeCount; i++) {\r\n                var addNode = new CubismModelUserDataNode();\r\n                addNode.targetId = json.getUserDataId(i);\r\n                addNode.targetType = CubismFramework.getIdManager().getId(json.getUserDataTargetType(i));\r\n                addNode.value = new csmString(json.getUserDataValue(i));\r\n                this._userDataNodes.pushBack(addNode);\r\n                if (addNode.targetType == typeOfArtMesh) {\r\n                    this._artMeshUserDataNode.pushBack(addNode);\r\n                }\r\n            }\r\n            json.release();\r\n            json = void 0;\r\n        };\r\n        CubismModelUserData.prototype.release = function () {\r\n            for (var i = 0; i < this._userDataNodes.getSize(); ++i) {\r\n                this._userDataNodes.set(i, null);\r\n            }\r\n            this._userDataNodes = null;\r\n        };\r\n        return CubismModelUserData;\r\n    }());\r\n    Live2DCubismFramework.CubismModelUserData = CubismModelUserData;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbHVzZXJkYXRhLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL0M6L1VzZXJzL21pZmFzL0RvY3VtZW50cy9yZWRzb2RhMDIxMy5naXRodWIuaW8vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbHVzZXJkYXRhLnRzPzRhOTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24gfSBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcclxuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XHJcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xyXG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcclxuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XHJcbmltcG9ydCBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiA9IGN1YmlzbW1vZGVsdXNlcmRhdGFqc29uLkN1YmlzbU1vZGVsVXNlckRhdGFKc29uO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGNvbnN0IEFydE1lc2ggPSAnQXJ0TWVzaCc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OCpOODs+OCv+ODvOODleOCp+ODvOOCuVxyXG4gICAqXHJcbiAgICogSnNvbuOBi+OCieiqreOBv+i+vOOCk+OBoOODpuODvOOCtuODvOODh+ODvOOCv+OCkuiomOmMsuOBl+OBpuOBiuOBj+OBn+OCgeOBruani+mAoOS9k1xyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSB7XHJcbiAgICB0YXJnZXRUeXBlOiBDdWJpc21JZEhhbmRsZTsgLy8g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OI44K/44Kk44OXXHJcbiAgICB0YXJnZXRJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv+OCv+ODvOOCsuODg+ODiOOBrklEXHJcbiAgICB2YWx1ZTogY3NtU3RyaW5nOyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODpuODvOOCtuODh+ODvOOCv+OBrueuoeeQhuOCr+ODqeOCuVxyXG4gICAqXHJcbiAgICog44Om44O844K244OH44O844K/44KS44Ot44O844OJ44CB566h55CG44CB5qSc57Si44Kk44Oz44K/44O844OV44Kn44Kk44K544CB6Kej5pS+44G+44Gn44KS6KGM44GG44CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGEge1xyXG4gICAgLyoqXHJcbiAgICAgKiDjgqTjg7Pjgrnjgr/jg7Pjgrnjga7kvZzmiJBcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoXHJcbiAgICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXHJcbiAgICAgIHNpemU6IG51bWJlclxyXG4gICAgKTogQ3ViaXNtTW9kZWxVc2VyRGF0YSB7XHJcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtTW9kZWxVc2VyRGF0YSA9IG5ldyBDdWJpc21Nb2RlbFVzZXJEYXRhKCk7XHJcblxyXG4gICAgICByZXQucGFyc2VVc2VyRGF0YShidWZmZXIsIHNpemUpO1xyXG5cclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOCkuegtOajhOOBmeOCi1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBtb2RlbFVzZXJEYXRhIOegtOajhOOBmeOCi+OCpOODs+OCueOCv+ODs+OCuVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShtb2RlbFVzZXJEYXRhOiBDdWJpc21Nb2RlbFVzZXJEYXRhKTogdm9pZCB7XHJcbiAgICAgIGlmIChtb2RlbFVzZXJEYXRhICE9IG51bGwpIHtcclxuICAgICAgICBtb2RlbFVzZXJEYXRhLnJlbGVhc2UoKTtcclxuICAgICAgICBtb2RlbFVzZXJEYXRhID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXJ0TWVzaOOBruODpuODvOOCtuODvOODh+ODvOOCv+OBruODquOCueODiOOBruWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Oq44K544OIXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRBcnRNZXNoVXNlckRhdGFzKCk6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHVzZXJkYXRhMy5qc29u44Gu44OR44O844K5XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGJ1ZmZlciAgICB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAgICogQHBhcmFtIHNpemUgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBhcnNlVXNlckRhdGEoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgIGxldCBqc29uOiBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbiA9IG5ldyBDdWJpc21Nb2RlbFVzZXJEYXRhSnNvbihcclxuICAgICAgICBidWZmZXIsXHJcbiAgICAgICAgc2l6ZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3QgdHlwZU9mQXJ0TWVzaCA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChBcnRNZXNoKTtcclxuICAgICAgY29uc3Qgbm9kZUNvdW50OiBudW1iZXIgPSBqc29uLmdldFVzZXJEYXRhQ291bnQoKTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZUNvdW50OyBpKyspIHtcclxuICAgICAgICBjb25zdCBhZGROb2RlOiBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSA9IG5ldyBDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZSgpO1xyXG5cclxuICAgICAgICBhZGROb2RlLnRhcmdldElkID0ganNvbi5nZXRVc2VyRGF0YUlkKGkpO1xyXG4gICAgICAgIGFkZE5vZGUudGFyZ2V0VHlwZSA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgICAgIGpzb24uZ2V0VXNlckRhdGFUYXJnZXRUeXBlKGkpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBhZGROb2RlLnZhbHVlID0gbmV3IGNzbVN0cmluZyhqc29uLmdldFVzZXJEYXRhVmFsdWUoaSkpO1xyXG4gICAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMucHVzaEJhY2soYWRkTm9kZSk7XHJcblxyXG4gICAgICAgIGlmIChhZGROb2RlLnRhcmdldFR5cGUgPT0gdHlwZU9mQXJ0TWVzaCkge1xyXG4gICAgICAgICAgdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZS5wdXNoQmFjayhhZGROb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGpzb24ucmVsZWFzZSgpO1xyXG4gICAgICBqc29uID0gdm9pZCAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5fdXNlckRhdGFOb2RlcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+KCk7XHJcbiAgICAgIHRoaXMuX2FydE1lc2hVc2VyRGF0YU5vZGUgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICAgKlxyXG4gICAgICog44Om44O844K244O844OH44O844K/5qeL6YCg5L2T6YWN5YiX44KS6Kej5pS+44GZ44KLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3VzZXJEYXRhTm9kZXMuZ2V0U2l6ZSgpOyArK2kpIHtcclxuICAgICAgICB0aGlzLl91c2VyRGF0YU5vZGVzLnNldChpLCBudWxsKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fdXNlckRhdGFOb2RlcyA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXNlckRhdGFOb2RlczogY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPjsgLy8g44Om44O844K244O844OH44O844K/5qeL6YCg5L2T6YWN5YiXXHJcbiAgICBwcml2YXRlIF9hcnRNZXNoVXNlckRhdGFOb2RlOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+OyAvLyDplrLopqfjg6rjgrnjg4jjga7kv53mjIFcclxuICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOztBQU9BO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBQ0E7QUFPQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBSkE7QUFXQTtBQTZFQTtBQUNBO0FBQ0E7QUFDQTtBQXhFQTtBQUlBO0FBRUE7QUFFQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBQUE7QUFqR0E7QUFrR0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../Framework/src/model/cubismmodeluserdata.ts\n");

/***/ }),

/***/ "../../../Framework/src/model/cubismmodeluserdatajson.ts":
/*!*****************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/model/cubismmodeluserdatajson.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"../../../Framework/src/utils/cubismjson.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var Meta = 'Meta';\r\n    var UserDataCount = 'UserDataCount';\r\n    var TotalUserDataSize = 'TotalUserDataSize';\r\n    var UserData = 'UserData';\r\n    var Target = 'Target';\r\n    var Id = 'Id';\r\n    var Value = 'Value';\r\n    var CubismModelUserDataJson = (function () {\r\n        function CubismModelUserDataJson(buffer, size) {\r\n            this._json = CubismJson.create(buffer, size);\r\n        }\r\n        CubismModelUserDataJson.prototype.release = function () {\r\n            CubismJson.delete(this._json);\r\n        };\r\n        CubismModelUserDataJson.prototype.getUserDataCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(UserDataCount)\r\n                .toInt();\r\n        };\r\n        CubismModelUserDataJson.prototype.getTotalUserDataSize = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalUserDataSize)\r\n                .toInt();\r\n        };\r\n        CubismModelUserDataJson.prototype.getUserDataTargetType = function (i) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(UserData)\r\n                .getValueByIndex(i)\r\n                .getValueByString(Target)\r\n                .getRawString();\r\n        };\r\n        CubismModelUserDataJson.prototype.getUserDataId = function (i) {\r\n            return CubismFramework.getIdManager().getId(this._json\r\n                .getRoot()\r\n                .getValueByString(UserData)\r\n                .getValueByIndex(i)\r\n                .getValueByString(Id)\r\n                .getRawString());\r\n        };\r\n        CubismModelUserDataJson.prototype.getUserDataValue = function (i) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(UserData)\r\n                .getValueByIndex(i)\r\n                .getValueByString(Value)\r\n                .getRawString();\r\n        };\r\n        return CubismModelUserDataJson;\r\n    }());\r\n    Live2DCubismFramework.CubismModelUserDataJson = CubismModelUserDataJson;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbHVzZXJkYXRhanNvbi50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9DOi9Vc2Vycy9taWZhcy9Eb2N1bWVudHMvcmVkc29kYTAyMTMuZ2l0aHViLmlvL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24udHM/NmVmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21qc29uIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtanNvbic7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWZyYW1ld29yayB9IGZyb20gJy4uL2xpdmUyZGN1YmlzbWZyYW1ld29yayc7XHJcbmltcG9ydCBDdWJpc21GcmFtZXdvcmsgPSBjdWJpc21mcmFtZXdvcmsuQ3ViaXNtRnJhbWV3b3JrO1xyXG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcclxuaW1wb3J0IEN1YmlzbUpzb24gPSBjdWJpc21qc29uLkN1YmlzbUpzb247XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgY29uc3QgTWV0YSA9ICdNZXRhJztcclxuICBjb25zdCBVc2VyRGF0YUNvdW50ID0gJ1VzZXJEYXRhQ291bnQnO1xyXG4gIGNvbnN0IFRvdGFsVXNlckRhdGFTaXplID0gJ1RvdGFsVXNlckRhdGFTaXplJztcclxuICBjb25zdCBVc2VyRGF0YSA9ICdVc2VyRGF0YSc7XHJcbiAgY29uc3QgVGFyZ2V0ID0gJ1RhcmdldCc7XHJcbiAgY29uc3QgSWQgPSAnSWQnO1xyXG4gIGNvbnN0IFZhbHVlID0gJ1ZhbHVlJztcclxuXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFKc29uIHtcclxuICAgIC8qKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMuX2pzb24gPSBDdWJpc21Kc29uLmNyZWF0ZShidWZmZXIsIHNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xyXG4gICAgICBDdWJpc21Kc29uLmRlbGV0ZSh0aGlzLl9qc29uKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+WAi+aVsOOBruWPluW+l1xyXG4gICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7lgIvmlbBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFVzZXJEYXRhQ291bnQoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YUNvdW50KVxyXG4gICAgICAgIC50b0ludCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Om44O844K244O844OH44O844K/57eP5paH5a2X5YiX5pWw44Gu5Y+W5b6XXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/nt4/mloflrZfliJfmlbBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFRvdGFsVXNlckRhdGFTaXplKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKE1ldGEpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVG90YWxVc2VyRGF0YVNpemUpXHJcbiAgICAgICAgLnRvSW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jgr/jgqTjg5fjga7lj5blvpdcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruOCv+OCpOODl1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VXNlckRhdGFUYXJnZXRUeXBlKGk6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9qc29uXHJcbiAgICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5SW5kZXgoaSlcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUYXJnZXQpXHJcbiAgICAgICAgLmdldFJhd1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Om44O844K244O844OH44O844K/44Gu44K/44O844Ky44OD44OISUTjga7lj5blvpdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaSDjgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OISURcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFVzZXJEYXRhSWQoaTogbnVtYmVyKTogQ3ViaXNtSWRIYW5kbGUge1xyXG4gICAgICByZXR1cm4gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxyXG4gICAgICAgIHRoaXMuX2pzb25cclxuICAgICAgICAgIC5nZXRSb290KClcclxuICAgICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhKVxyXG4gICAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxyXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoSWQpXHJcbiAgICAgICAgICAuZ2V0UmF3U3RyaW5nKClcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruaWh+Wtl+WIl+OBruWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpIOOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr9cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFVzZXJEYXRhVmFsdWUoaTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXHJcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFZhbHVlKVxyXG4gICAgICAgIC5nZXRSYXdTdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9qc29uOiBDdWJpc21Kc29uO1xyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7O0FBT0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQU1BO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUFBO0FBekZBO0FBMEZBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../Framework/src/model/cubismmodeluserdatajson.ts\n");

/***/ }),

/***/ "../../../Framework/src/model/cubismusermodel.ts":
/*!*********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/model/cubismusermodel.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar cubismmotionmanager_1 = __webpack_require__(/*! ../motion/cubismmotionmanager */ \"../../../Framework/src/motion/cubismmotionmanager.ts\");\r\nvar cubismtargetpoint_1 = __webpack_require__(/*! ../math/cubismtargetpoint */ \"../../../Framework/src/math/cubismtargetpoint.ts\");\r\nvar cubismmodelmatrix_1 = __webpack_require__(/*! ../math/cubismmodelmatrix */ \"../../../Framework/src/math/cubismmodelmatrix.ts\");\r\nvar cubismmoc_1 = __webpack_require__(/*! ./cubismmoc */ \"../../../Framework/src/model/cubismmoc.ts\");\r\nvar cubismmotion_1 = __webpack_require__(/*! ../motion/cubismmotion */ \"../../../Framework/src/motion/cubismmotion.ts\");\r\nvar cubismexpressionmotion_1 = __webpack_require__(/*! ../motion/cubismexpressionmotion */ \"../../../Framework/src/motion/cubismexpressionmotion.ts\");\r\nvar cubismpose_1 = __webpack_require__(/*! ../effect/cubismpose */ \"../../../Framework/src/effect/cubismpose.ts\");\r\nvar cubismmodeluserdata_1 = __webpack_require__(/*! ./cubismmodeluserdata */ \"../../../Framework/src/model/cubismmodeluserdata.ts\");\r\nvar cubismphysics_1 = __webpack_require__(/*! ../physics/cubismphysics */ \"../../../Framework/src/physics/cubismphysics.ts\");\r\nvar cubismbreath_1 = __webpack_require__(/*! ../effect/cubismbreath */ \"../../../Framework/src/effect/cubismbreath.ts\");\r\nvar cubismeyeblink_1 = __webpack_require__(/*! ../effect/cubismeyeblink */ \"../../../Framework/src/effect/cubismeyeblink.ts\");\r\nvar cubismrenderer_webgl_1 = __webpack_require__(/*! ../rendering/cubismrenderer_webgl */ \"../../../Framework/src/rendering/cubismrenderer_webgl.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"../../../Framework/src/utils/cubismdebug.ts\");\r\nvar CubismRenderer_WebGL = cubismrenderer_webgl_1.Live2DCubismFramework.CubismRenderer_WebGL;\r\nvar CubismEyeBlink = cubismeyeblink_1.Live2DCubismFramework.CubismEyeBlink;\r\nvar CubismBreath = cubismbreath_1.Live2DCubismFramework.CubismBreath;\r\nvar Constant = live2dcubismframework_1.Live2DCubismFramework.Constant;\r\nvar CubismPhysics = cubismphysics_1.Live2DCubismFramework.CubismPhysics;\r\nvar CubismModelUserData = cubismmodeluserdata_1.Live2DCubismFramework.CubismModelUserData;\r\nvar CubismPose = cubismpose_1.Live2DCubismFramework.CubismPose;\r\nvar CubismExpressionMotion = cubismexpressionmotion_1.Live2DCubismFramework.CubismExpressionMotion;\r\nvar CubismMotion = cubismmotion_1.Live2DCubismFramework.CubismMotion;\r\nvar CubismMoc = cubismmoc_1.Live2DCubismFramework.CubismMoc;\r\nvar CubismModelMatrix = cubismmodelmatrix_1.Live2DCubismFramework.CubismModelMatrix;\r\nvar CubismTargetPoint = cubismtargetpoint_1.Live2DCubismFramework.CubismTargetPoint;\r\nvar CubismMotionManager = cubismmotionmanager_1.Live2DCubismFramework.CubismMotionManager;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismUserModel = (function () {\r\n        function CubismUserModel() {\r\n            this.loadMotion = function (buffer, size, name, onFinishedMotionHandler) { return CubismMotion.create(buffer, size, onFinishedMotionHandler); };\r\n            this._moc = null;\r\n            this._model = null;\r\n            this._motionManager = null;\r\n            this._expressionManager = null;\r\n            this._eyeBlink = null;\r\n            this._breath = null;\r\n            this._modelMatrix = null;\r\n            this._pose = null;\r\n            this._dragManager = null;\r\n            this._physics = null;\r\n            this._modelUserData = null;\r\n            this._initialized = false;\r\n            this._updating = false;\r\n            this._opacity = 1.0;\r\n            this._lipsync = true;\r\n            this._lastLipSyncValue = 0.0;\r\n            this._dragX = 0.0;\r\n            this._dragY = 0.0;\r\n            this._accelerationX = 0.0;\r\n            this._accelerationY = 0.0;\r\n            this._accelerationZ = 0.0;\r\n            this._debugMode = false;\r\n            this._renderer = null;\r\n            this._motionManager = new CubismMotionManager();\r\n            this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback, this);\r\n            this._expressionManager = new CubismMotionManager();\r\n            this._dragManager = new CubismTargetPoint();\r\n        }\r\n        CubismUserModel.prototype.isInitialized = function () {\r\n            return this._initialized;\r\n        };\r\n        CubismUserModel.prototype.setInitialized = function (v) {\r\n            this._initialized = v;\r\n        };\r\n        CubismUserModel.prototype.isUpdating = function () {\r\n            return this._updating;\r\n        };\r\n        CubismUserModel.prototype.setUpdating = function (v) {\r\n            this._updating = v;\r\n        };\r\n        CubismUserModel.prototype.setDragging = function (x, y) {\r\n            this._dragManager.set(x, y);\r\n        };\r\n        CubismUserModel.prototype.setAcceleration = function (x, y, z) {\r\n            this._accelerationX = x;\r\n            this._accelerationY = y;\r\n            this._accelerationZ = z;\r\n        };\r\n        CubismUserModel.prototype.getModelMatrix = function () {\r\n            return this._modelMatrix;\r\n        };\r\n        CubismUserModel.prototype.setOpacity = function (a) {\r\n            this._opacity = a;\r\n        };\r\n        CubismUserModel.prototype.getOpacity = function () {\r\n            return this._opacity;\r\n        };\r\n        CubismUserModel.prototype.loadModel = function (buffer) {\r\n            this._moc = CubismMoc.create(buffer);\r\n            this._model = this._moc.createModel();\r\n            this._model.saveParameters();\r\n            if (this._moc == null || this._model == null) {\r\n                cubismdebug_1.CubismLogError('Failed to CreateModel().');\r\n                return;\r\n            }\r\n            this._modelMatrix = new CubismModelMatrix(this._model.getCanvasWidth(), this._model.getCanvasHeight());\r\n        };\r\n        CubismUserModel.prototype.loadExpression = function (buffer, size, name) {\r\n            return CubismExpressionMotion.create(buffer, size);\r\n        };\r\n        CubismUserModel.prototype.loadPose = function (buffer, size) {\r\n            this._pose = CubismPose.create(buffer, size);\r\n        };\r\n        CubismUserModel.prototype.loadUserData = function (buffer, size) {\r\n            this._modelUserData = CubismModelUserData.create(buffer, size);\r\n        };\r\n        CubismUserModel.prototype.loadPhysics = function (buffer, size) {\r\n            this._physics = CubismPhysics.create(buffer, size);\r\n        };\r\n        CubismUserModel.prototype.isHit = function (drawableId, pointX, pointY) {\r\n            var drawIndex = this._model.getDrawableIndex(drawableId);\r\n            if (drawIndex < 0) {\r\n                return false;\r\n            }\r\n            var count = this._model.getDrawableVertexCount(drawIndex);\r\n            var vertices = this._model.getDrawableVertices(drawIndex);\r\n            var left = vertices[0];\r\n            var right = vertices[0];\r\n            var top = vertices[1];\r\n            var bottom = vertices[1];\r\n            for (var j = 1; j < count; ++j) {\r\n                var x = vertices[Constant.vertexOffset + j * Constant.vertexStep];\r\n                var y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];\r\n                if (x < left) {\r\n                    left = x;\r\n                }\r\n                if (x > right) {\r\n                    right = x;\r\n                }\r\n                if (y < top) {\r\n                    top = y;\r\n                }\r\n                if (y > bottom) {\r\n                    bottom = y;\r\n                }\r\n            }\r\n            var tx = this._modelMatrix.invertTransformX(pointX);\r\n            var ty = this._modelMatrix.invertTransformY(pointY);\r\n            return left <= tx && tx <= right && top <= ty && ty <= bottom;\r\n        };\r\n        CubismUserModel.prototype.getModel = function () {\r\n            return this._model;\r\n        };\r\n        CubismUserModel.prototype.getRenderer = function () {\r\n            return this._renderer;\r\n        };\r\n        CubismUserModel.prototype.createRenderer = function () {\r\n            if (this._renderer) {\r\n                this.deleteRenderer();\r\n            }\r\n            this._renderer = new CubismRenderer_WebGL();\r\n            this._renderer.initialize(this._model);\r\n        };\r\n        CubismUserModel.prototype.deleteRenderer = function () {\r\n            if (this._renderer != null) {\r\n                this._renderer.release();\r\n                this._renderer = null;\r\n            }\r\n        };\r\n        CubismUserModel.prototype.motionEventFired = function (eventValue) {\r\n            cubismdebug_1.CubismLogInfo('{0}', eventValue.s);\r\n        };\r\n        CubismUserModel.cubismDefaultMotionEventCallback = function (caller, eventValue, customData) {\r\n            var model = customData;\r\n            if (model != null) {\r\n                model.motionEventFired(eventValue);\r\n            }\r\n        };\r\n        CubismUserModel.prototype.release = function () {\r\n            if (this._motionManager != null) {\r\n                this._motionManager.release();\r\n                this._motionManager = null;\r\n            }\r\n            if (this._expressionManager != null) {\r\n                this._expressionManager.release();\r\n                this._expressionManager = null;\r\n            }\r\n            if (this._moc != null) {\r\n                this._moc.deleteModel(this._model);\r\n                this._moc.release();\r\n                this._moc = null;\r\n            }\r\n            this._modelMatrix = null;\r\n            CubismPose.delete(this._pose);\r\n            CubismEyeBlink.delete(this._eyeBlink);\r\n            CubismBreath.delete(this._breath);\r\n            this._dragManager = null;\r\n            CubismPhysics.delete(this._physics);\r\n            CubismModelUserData.delete(this._modelUserData);\r\n            this.deleteRenderer();\r\n        };\r\n        return CubismUserModel;\r\n    }());\r\n    Live2DCubismFramework.CubismUserModel = CubismUserModel;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/model/cubismusermodel.ts\n");

/***/ }),

/***/ "../../../Framework/src/motion/acubismmotion.ts":
/*!********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/motion/acubismmotion.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ \"../../../Framework/src/math/cubismmath.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"../../../Framework/src/utils/cubismdebug.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var ACubismMotion = (function () {\r\n        function ACubismMotion() {\r\n            var _this = this;\r\n            this.setFinishedMotionHandler = function (onFinishedMotionHandler) { return (_this._onFinishedMotion = onFinishedMotionHandler); };\r\n            this.getFinishedMotionHandler = function () { return _this._onFinishedMotion; };\r\n            this._fadeInSeconds = -1.0;\r\n            this._fadeOutSeconds = -1.0;\r\n            this._weight = 1.0;\r\n            this._offsetSeconds = 0.0;\r\n            this._firedEventValues = new csmVector();\r\n        }\r\n        ACubismMotion.delete = function (motion) {\r\n            motion.release();\r\n            motion = void 0;\r\n            motion = null;\r\n        };\r\n        ACubismMotion.prototype.release = function () {\r\n            this._weight = 0.0;\r\n        };\r\n        ACubismMotion.prototype.updateParameters = function (model, motionQueueEntry, userTimeSeconds) {\r\n            if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\r\n                return;\r\n            }\r\n            if (!motionQueueEntry.isStarted()) {\r\n                motionQueueEntry.setIsStarted(true);\r\n                motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds);\r\n                motionQueueEntry.setFadeInStartTime(userTimeSeconds);\r\n                var duration = this.getDuration();\r\n                if (motionQueueEntry.getEndTime() < 0) {\r\n                    motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);\r\n                }\r\n            }\r\n            var fadeWeight = this._weight;\r\n            var fadeIn = this._fadeInSeconds == 0.0\r\n                ? 1.0\r\n                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                    this._fadeInSeconds);\r\n            var fadeOut = this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0\r\n                ? 1.0\r\n                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                    this._fadeOutSeconds);\r\n            fadeWeight = fadeWeight * fadeIn * fadeOut;\r\n            motionQueueEntry.setState(userTimeSeconds, fadeWeight);\r\n            cubismdebug_1.CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\r\n            this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);\r\n            if (motionQueueEntry.getEndTime() > 0 &&\r\n                motionQueueEntry.getEndTime() < userTimeSeconds) {\r\n                motionQueueEntry.setIsFinished(true);\r\n            }\r\n        };\r\n        ACubismMotion.prototype.setFadeInTime = function (fadeInSeconds) {\r\n            this._fadeInSeconds = fadeInSeconds;\r\n        };\r\n        ACubismMotion.prototype.setFadeOutTime = function (fadeOutSeconds) {\r\n            this._fadeOutSeconds = fadeOutSeconds;\r\n        };\r\n        ACubismMotion.prototype.getFadeOutTime = function () {\r\n            return this._fadeOutSeconds;\r\n        };\r\n        ACubismMotion.prototype.getFadeInTime = function () {\r\n            return this._fadeInSeconds;\r\n        };\r\n        ACubismMotion.prototype.setWeight = function (weight) {\r\n            this._weight = weight;\r\n        };\r\n        ACubismMotion.prototype.getWeight = function () {\r\n            return this._weight;\r\n        };\r\n        ACubismMotion.prototype.getDuration = function () {\r\n            return -1.0;\r\n        };\r\n        ACubismMotion.prototype.getLoopDuration = function () {\r\n            return -1.0;\r\n        };\r\n        ACubismMotion.prototype.setOffsetTime = function (offsetSeconds) {\r\n            this._offsetSeconds = offsetSeconds;\r\n        };\r\n        ACubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {\r\n            return this._firedEventValues;\r\n        };\r\n        return ACubismMotion;\r\n    }());\r\n    Live2DCubismFramework.ACubismMotion = ACubismMotion;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/motion/acubismmotion.ts\n");

/***/ }),

/***/ "../../../Framework/src/motion/cubismexpressionmotion.ts":
/*!*****************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/motion/cubismexpressionmotion.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ \"../../../Framework/src/motion/acubismmotion.ts\");\r\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"../../../Framework/src/utils/cubismjson.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var ExpressionKeyFadeIn = 'FadeInTime';\r\n    var ExpressionKeyFadeOut = 'FadeOutTime';\r\n    var ExpressionKeyParameters = 'Parameters';\r\n    var ExpressionKeyId = 'Id';\r\n    var ExpressionKeyValue = 'Value';\r\n    var ExpressionKeyBlend = 'Blend';\r\n    var BlendValueAdd = 'Add';\r\n    var BlendValueMultiply = 'Multiply';\r\n    var BlendValueOverwrite = 'Overwrite';\r\n    var DefaultFadeTime = 1.0;\r\n    var CubismExpressionMotion = (function (_super) {\r\n        __extends(CubismExpressionMotion, _super);\r\n        function CubismExpressionMotion() {\r\n            var _this = _super.call(this) || this;\r\n            _this._parameters = new csmVector();\r\n            return _this;\r\n        }\r\n        CubismExpressionMotion.create = function (buffer, size) {\r\n            var expression = new CubismExpressionMotion();\r\n            var json = CubismJson.create(buffer, size);\r\n            var root = json.getRoot();\r\n            expression.setFadeInTime(root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime));\r\n            expression.setFadeOutTime(root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime));\r\n            var parameterCount = root\r\n                .getValueByString(ExpressionKeyParameters)\r\n                .getSize();\r\n            expression._parameters.prepareCapacity(parameterCount);\r\n            for (var i = 0; i < parameterCount; ++i) {\r\n                var param = root\r\n                    .getValueByString(ExpressionKeyParameters)\r\n                    .getValueByIndex(i);\r\n                var parameterId = CubismFramework.getIdManager().getId(param.getValueByString(ExpressionKeyId).getRawString());\r\n                var value = param\r\n                    .getValueByString(ExpressionKeyValue)\r\n                    .toFloat();\r\n                var blendType = void 0;\r\n                if (param.getValueByString(ExpressionKeyBlend).isNull() ||\r\n                    param.getValueByString(ExpressionKeyBlend).getString() ==\r\n                        BlendValueAdd) {\r\n                    blendType = ExpressionBlendType.ExpressionBlendType_Add;\r\n                }\r\n                else if (param.getValueByString(ExpressionKeyBlend).getString() ==\r\n                    BlendValueMultiply) {\r\n                    blendType = ExpressionBlendType.ExpressionBlendType_Multiply;\r\n                }\r\n                else if (param.getValueByString(ExpressionKeyBlend).getString() ==\r\n                    BlendValueOverwrite) {\r\n                    blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;\r\n                }\r\n                else {\r\n                    blendType = ExpressionBlendType.ExpressionBlendType_Add;\r\n                }\r\n                var item = new ExpressionParameter();\r\n                item.parameterId = parameterId;\r\n                item.blendType = blendType;\r\n                item.value = value;\r\n                expression._parameters.pushBack(item);\r\n            }\r\n            CubismJson.delete(json);\r\n            return expression;\r\n        };\r\n        CubismExpressionMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, weight, motionQueueEntry) {\r\n            for (var i = 0; i < this._parameters.getSize(); ++i) {\r\n                var parameter = this._parameters.at(i);\r\n                switch (parameter.blendType) {\r\n                    case ExpressionBlendType.ExpressionBlendType_Add: {\r\n                        model.addParameterValueById(parameter.parameterId, parameter.value, weight);\r\n                        break;\r\n                    }\r\n                    case ExpressionBlendType.ExpressionBlendType_Multiply: {\r\n                        model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);\r\n                        break;\r\n                    }\r\n                    case ExpressionBlendType.ExpressionBlendType_Overwrite: {\r\n                        model.setParameterValueById(parameter.parameterId, parameter.value, weight);\r\n                        break;\r\n                    }\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n        return CubismExpressionMotion;\r\n    }(ACubismMotion));\r\n    Live2DCubismFramework.CubismExpressionMotion = CubismExpressionMotion;\r\n    var ExpressionBlendType;\r\n    (function (ExpressionBlendType) {\r\n        ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Add\"] = 0] = \"ExpressionBlendType_Add\";\r\n        ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Multiply\"] = 1] = \"ExpressionBlendType_Multiply\";\r\n        ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Overwrite\"] = 2] = \"ExpressionBlendType_Overwrite\";\r\n    })(ExpressionBlendType = Live2DCubismFramework.ExpressionBlendType || (Live2DCubismFramework.ExpressionBlendType = {}));\r\n    var ExpressionParameter = (function () {\r\n        function ExpressionParameter() {\r\n        }\r\n        return ExpressionParameter;\r\n    }());\r\n    Live2DCubismFramework.ExpressionParameter = ExpressionParameter;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/motion/cubismexpressionmotion.ts\n");

/***/ }),

/***/ "../../../Framework/src/motion/cubismmotion.ts":
/*!*******************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/motion/cubismmotion.ts ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmotionjson_1 = __webpack_require__(/*! ./cubismmotionjson */ \"../../../Framework/src/motion/cubismmotionjson.ts\");\r\nvar cubismmotioninternal_1 = __webpack_require__(/*! ./cubismmotioninternal */ \"../../../Framework/src/motion/cubismmotioninternal.ts\");\r\nvar acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ \"../../../Framework/src/motion/acubismmotion.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ \"../../../Framework/src/math/cubismmath.ts\");\r\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"../../../Framework/src/type/csmstring.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"../../../Framework/src/utils/cubismdebug.ts\");\r\nvar csmString = csmstring_1.Live2DCubismFramework.csmString;\r\nvar CubismMotionData = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionData;\r\nvar CubismMotionSegment = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionSegment;\r\nvar CubismMotionPoint = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionPoint;\r\nvar CubismMotionEvent = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionEvent;\r\nvar CubismMotionSegmentType = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionSegmentType;\r\nvar CubismMotionCurve = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionCurve;\r\nvar CubismMotionCurveTarget = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionCurveTarget;\r\nvar CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;\r\nvar CubismMotionJson = cubismmotionjson_1.Live2DCubismFramework.CubismMotionJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var EffectNameEyeBlink = 'EyeBlink';\r\n    var EffectNameLipSync = 'LipSync';\r\n    var TargetNameModel = 'Model';\r\n    var TargetNameParameter = 'Parameter';\r\n    var TargetNamePartOpacity = 'PartOpacity';\r\n    function lerpPoints(a, b, t) {\r\n        var result = new CubismMotionPoint();\r\n        result.time = a.time + (b.time - a.time) * t;\r\n        result.value = a.value + (b.value - a.value) * t;\r\n        return result;\r\n    }\r\n    function linearEvaluate(points, time) {\r\n        var t = (time - points[0].time) / (points[1].time - points[0].time);\r\n        if (t < 0.0) {\r\n            t = 0.0;\r\n        }\r\n        return points[0].value + (points[1].value - points[0].value) * t;\r\n    }\r\n    function bezierEvaluate(points, time) {\r\n        var t = (time - points[0].time) / (points[3].time - points[0].time);\r\n        if (t < 0.0) {\r\n            t = 0.0;\r\n        }\r\n        var p01 = lerpPoints(points[0], points[1], t);\r\n        var p12 = lerpPoints(points[1], points[2], t);\r\n        var p23 = lerpPoints(points[2], points[3], t);\r\n        var p012 = lerpPoints(p01, p12, t);\r\n        var p123 = lerpPoints(p12, p23, t);\r\n        return lerpPoints(p012, p123, t).value;\r\n    }\r\n    function steppedEvaluate(points, time) {\r\n        return points[0].value;\r\n    }\r\n    function inverseSteppedEvaluate(points, time) {\r\n        return points[1].value;\r\n    }\r\n    function evaluateCurve(motionData, index, time) {\r\n        var curve = motionData.curves.at(index);\r\n        var target = -1;\r\n        var totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;\r\n        var pointPosition = 0;\r\n        for (var i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\r\n            pointPosition =\r\n                motionData.segments.at(i).basePointIndex +\r\n                    (motionData.segments.at(i).segmentType ==\r\n                        CubismMotionSegmentType.CubismMotionSegmentType_Bezier\r\n                        ? 3\r\n                        : 1);\r\n            if (motionData.points.at(pointPosition).time > time) {\r\n                target = i;\r\n                break;\r\n            }\r\n        }\r\n        if (target == -1) {\r\n            return motionData.points.at(pointPosition).value;\r\n        }\r\n        var segment = motionData.segments.at(target);\r\n        return segment.evaluate(motionData.points.get(segment.basePointIndex), time);\r\n    }\r\n    var CubismMotion = (function (_super) {\r\n        __extends(CubismMotion, _super);\r\n        function CubismMotion() {\r\n            var _this = _super.call(this) || this;\r\n            _this._sourceFrameRate = 30.0;\r\n            _this._loopDurationSeconds = -1.0;\r\n            _this._isLoop = false;\r\n            _this._isLoopFadeIn = true;\r\n            _this._lastWeight = 0.0;\r\n            _this._motionData = null;\r\n            _this._modelCurveIdEyeBlink = null;\r\n            _this._modelCurveIdLipSync = null;\r\n            _this._eyeBlinkParameterIds = null;\r\n            _this._lipSyncParameterIds = null;\r\n            return _this;\r\n        }\r\n        CubismMotion.create = function (buffer, size, onFinishedMotionHandler) {\r\n            var ret = new CubismMotion();\r\n            ret.parse(buffer, size);\r\n            ret._sourceFrameRate = ret._motionData.fps;\r\n            ret._loopDurationSeconds = ret._motionData.duration;\r\n            ret._onFinishedMotion = onFinishedMotionHandler;\r\n            return ret;\r\n        };\r\n        CubismMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, fadeWeight, motionQueueEntry) {\r\n            if (this._modelCurveIdEyeBlink == null) {\r\n                this._modelCurveIdEyeBlink = CubismFramework.getIdManager().getId(EffectNameEyeBlink);\r\n            }\r\n            if (this._modelCurveIdLipSync == null) {\r\n                this._modelCurveIdLipSync = CubismFramework.getIdManager().getId(EffectNameLipSync);\r\n            }\r\n            var timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();\r\n            if (timeOffsetSeconds < 0.0) {\r\n                timeOffsetSeconds = 0.0;\r\n            }\r\n            var lipSyncValue = Number.MAX_VALUE;\r\n            var eyeBlinkValue = Number.MAX_VALUE;\r\n            var MaxTargetSize = 64;\r\n            var lipSyncFlags = 0;\r\n            var eyeBlinkFlags = 0;\r\n            if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {\r\n                cubismdebug_1.CubismLogDebug('too many eye blink targets : {0}', this._eyeBlinkParameterIds.getSize());\r\n            }\r\n            if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {\r\n                cubismdebug_1.CubismLogDebug('too many lip sync targets : {0}', this._lipSyncParameterIds.getSize());\r\n            }\r\n            var tmpFadeIn = this._fadeInSeconds <= 0.0\r\n                ? 1.0\r\n                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                    this._fadeInSeconds);\r\n            var tmpFadeOut = this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0\r\n                ? 1.0\r\n                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                    this._fadeOutSeconds);\r\n            var value;\r\n            var c, parameterIndex;\r\n            var time = timeOffsetSeconds;\r\n            if (this._isLoop) {\r\n                while (time > this._motionData.duration) {\r\n                    time -= this._motionData.duration;\r\n                }\r\n            }\r\n            var curves = this._motionData.curves;\r\n            for (c = 0; c < this._motionData.curveCount &&\r\n                curves.at(c).type ==\r\n                    CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {\r\n                value = evaluateCurve(this._motionData, c, time);\r\n                if (curves.at(c).id == this._modelCurveIdEyeBlink) {\r\n                    eyeBlinkValue = value;\r\n                }\r\n                else if (curves.at(c).id == this._modelCurveIdLipSync) {\r\n                    lipSyncValue = value;\r\n                }\r\n            }\r\n            var parameterMotionCurveCount = 0;\r\n            for (; c < this._motionData.curveCount &&\r\n                curves.at(c).type ==\r\n                    CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {\r\n                parameterMotionCurveCount++;\r\n                parameterIndex = model.getParameterIndex(curves.at(c).id);\r\n                if (parameterIndex == -1) {\r\n                    continue;\r\n                }\r\n                var sourceValue = model.getParameterValueByIndex(parameterIndex);\r\n                value = evaluateCurve(this._motionData, c, time);\r\n                if (eyeBlinkValue != Number.MAX_VALUE) {\r\n                    for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {\r\n                        if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {\r\n                            value *= eyeBlinkValue;\r\n                            eyeBlinkFlags |= 1 << i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (lipSyncValue != Number.MAX_VALUE) {\r\n                    for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {\r\n                        if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {\r\n                            value += lipSyncValue;\r\n                            lipSyncFlags |= 1 << i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                var v = void 0;\r\n                if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {\r\n                    v = sourceValue + (value - sourceValue) * fadeWeight;\r\n                }\r\n                else {\r\n                    var fin = void 0;\r\n                    var fout = void 0;\r\n                    if (curves.at(c).fadeInTime < 0.0) {\r\n                        fin = tmpFadeIn;\r\n                    }\r\n                    else {\r\n                        fin =\r\n                            curves.at(c).fadeInTime == 0.0\r\n                                ? 1.0\r\n                                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                                    curves.at(c).fadeInTime);\r\n                    }\r\n                    if (curves.at(c).fadeOutTime < 0.0) {\r\n                        fout = tmpFadeOut;\r\n                    }\r\n                    else {\r\n                        fout =\r\n                            curves.at(c).fadeOutTime == 0.0 ||\r\n                                motionQueueEntry.getEndTime() < 0.0\r\n                                ? 1.0\r\n                                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                                    curves.at(c).fadeOutTime);\r\n                    }\r\n                    var paramWeight = this._weight * fin * fout;\r\n                    v = sourceValue + (value - sourceValue) * paramWeight;\r\n                }\r\n                model.setParameterValueByIndex(parameterIndex, v, 1.0);\r\n            }\r\n            {\r\n                if (eyeBlinkValue != Number.MAX_VALUE) {\r\n                    for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {\r\n                        var sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds.at(i));\r\n                        if ((eyeBlinkFlags >> i) & 0x01) {\r\n                            continue;\r\n                        }\r\n                        var v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\r\n                        model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);\r\n                    }\r\n                }\r\n                if (lipSyncValue != Number.MAX_VALUE) {\r\n                    for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {\r\n                        var sourceValue = model.getParameterValueById(this._lipSyncParameterIds.at(i));\r\n                        if ((lipSyncFlags >> i) & 0x01) {\r\n                            continue;\r\n                        }\r\n                        var v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\r\n                        model.setParameterValueById(this._lipSyncParameterIds.at(i), v);\r\n                    }\r\n                }\r\n            }\r\n            for (; c < this._motionData.curveCount &&\r\n                curves.at(c).type ==\r\n                    CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {\r\n                parameterIndex = model.getParameterIndex(curves.at(c).id);\r\n                if (parameterIndex == -1) {\r\n                    continue;\r\n                }\r\n                value = evaluateCurve(this._motionData, c, time);\r\n                model.setParameterValueByIndex(parameterIndex, value);\r\n            }\r\n            if (timeOffsetSeconds >= this._motionData.duration) {\r\n                if (this._isLoop) {\r\n                    motionQueueEntry.setStartTime(userTimeSeconds);\r\n                    if (this._isLoopFadeIn) {\r\n                        motionQueueEntry.setFadeInStartTime(userTimeSeconds);\r\n                    }\r\n                }\r\n                else {\r\n                    if (this._onFinishedMotion) {\r\n                        this._onFinishedMotion(this);\r\n                    }\r\n                    motionQueueEntry.setIsFinished(true);\r\n                }\r\n            }\r\n            this._lastWeight = fadeWeight;\r\n        };\r\n        CubismMotion.prototype.setIsLoop = function (loop) {\r\n            this._isLoop = loop;\r\n        };\r\n        CubismMotion.prototype.isLoop = function () {\r\n            return this._isLoop;\r\n        };\r\n        CubismMotion.prototype.setIsLoopFadeIn = function (loopFadeIn) {\r\n            this._isLoopFadeIn = loopFadeIn;\r\n        };\r\n        CubismMotion.prototype.isLoopFadeIn = function () {\r\n            return this._isLoopFadeIn;\r\n        };\r\n        CubismMotion.prototype.getDuration = function () {\r\n            return this._isLoop ? -1.0 : this._loopDurationSeconds;\r\n        };\r\n        CubismMotion.prototype.getLoopDuration = function () {\r\n            return this._loopDurationSeconds;\r\n        };\r\n        CubismMotion.prototype.setParameterFadeInTime = function (parameterId, value) {\r\n            var curves = this._motionData.curves;\r\n            for (var i = 0; i < this._motionData.curveCount; ++i) {\r\n                if (parameterId == curves.at(i).id) {\r\n                    curves.at(i).fadeInTime = value;\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n        CubismMotion.prototype.setParameterFadeOutTime = function (parameterId, value) {\r\n            var curves = this._motionData.curves;\r\n            for (var i = 0; i < this._motionData.curveCount; ++i) {\r\n                if (parameterId == curves.at(i).id) {\r\n                    curves.at(i).fadeOutTime = value;\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n        CubismMotion.prototype.getParameterFadeInTime = function (parameterId) {\r\n            var curves = this._motionData.curves;\r\n            for (var i = 0; i < this._motionData.curveCount; ++i) {\r\n                if (parameterId == curves.at(i).id) {\r\n                    return curves.at(i).fadeInTime;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n        CubismMotion.prototype.getParameterFadeOutTime = function (parameterId) {\r\n            var curves = this._motionData.curves;\r\n            for (var i = 0; i < this._motionData.curveCount; ++i) {\r\n                if (parameterId == curves.at(i).id) {\r\n                    return curves.at(i).fadeOutTime;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n        CubismMotion.prototype.setEffectIds = function (eyeBlinkParameterIds, lipSyncParameterIds) {\r\n            this._eyeBlinkParameterIds = eyeBlinkParameterIds;\r\n            this._lipSyncParameterIds = lipSyncParameterIds;\r\n        };\r\n        CubismMotion.prototype.release = function () {\r\n            this._motionData = void 0;\r\n            this._motionData = null;\r\n        };\r\n        CubismMotion.prototype.parse = function (motionJson, size) {\r\n            this._motionData = new CubismMotionData();\r\n            var json = new CubismMotionJson(motionJson, size);\r\n            this._motionData.duration = json.getMotionDuration();\r\n            this._motionData.loop = json.isMotionLoop();\r\n            this._motionData.curveCount = json.getMotionCurveCount();\r\n            this._motionData.fps = json.getMotionFps();\r\n            this._motionData.eventCount = json.getEventCount();\r\n            if (json.isExistMotionFadeInTime()) {\r\n                this._fadeInSeconds =\r\n                    json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();\r\n            }\r\n            else {\r\n                this._fadeInSeconds = 1.0;\r\n            }\r\n            if (json.isExistMotionFadeOutTime()) {\r\n                this._fadeOutSeconds =\r\n                    json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();\r\n            }\r\n            else {\r\n                this._fadeOutSeconds = 1.0;\r\n            }\r\n            this._motionData.curves.updateSize(this._motionData.curveCount, CubismMotionCurve, true);\r\n            this._motionData.segments.updateSize(json.getMotionTotalSegmentCount(), CubismMotionSegment, true);\r\n            this._motionData.points.updateSize(json.getMotionTotalPointCount(), CubismMotionPoint, true);\r\n            this._motionData.events.updateSize(this._motionData.eventCount, CubismMotionEvent, true);\r\n            var totalPointCount = 0;\r\n            var totalSegmentCount = 0;\r\n            for (var curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {\r\n                if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {\r\n                    this._motionData.curves.at(curveCount).type =\r\n                        CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n                }\r\n                else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {\r\n                    this._motionData.curves.at(curveCount).type =\r\n                        CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\r\n                }\r\n                else if (json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity) {\r\n                    this._motionData.curves.at(curveCount).type =\r\n                        CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\r\n                }\r\n                this._motionData.curves.at(curveCount).id = json.getMotionCurveId(curveCount);\r\n                this._motionData.curves.at(curveCount).baseSegmentIndex = totalSegmentCount;\r\n                this._motionData.curves.at(curveCount).fadeInTime = json.isExistMotionCurveFadeInTime(curveCount)\r\n                    ? json.getMotionCurveFadeInTime(curveCount)\r\n                    : -1.0;\r\n                this._motionData.curves.at(curveCount).fadeOutTime = json.isExistMotionCurveFadeOutTime(curveCount)\r\n                    ? json.getMotionCurveFadeOutTime(curveCount)\r\n                    : -1.0;\r\n                for (var segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount);) {\r\n                    if (segmentPosition == 0) {\r\n                        this._motionData.segments.at(totalSegmentCount).basePointIndex = totalPointCount;\r\n                        this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition);\r\n                        this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n                        totalPointCount += 1;\r\n                        segmentPosition += 2;\r\n                    }\r\n                    else {\r\n                        this._motionData.segments.at(totalSegmentCount).basePointIndex =\r\n                            totalPointCount - 1;\r\n                    }\r\n                    var segment = json.getMotionCurveSegment(curveCount, segmentPosition);\r\n                    switch (segment) {\r\n                        case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\r\n                            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                                CubismMotionSegmentType.CubismMotionSegmentType_Linear;\r\n                            this._motionData.segments.at(totalSegmentCount).evaluate = linearEvaluate;\r\n                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n                            totalPointCount += 1;\r\n                            segmentPosition += 3;\r\n                            break;\r\n                        }\r\n                        case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\r\n                            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                                CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\r\n                            this._motionData.segments.at(totalSegmentCount).evaluate = bezierEvaluate;\r\n                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n                            this._motionData.points.at(totalPointCount + 1).time = json.getMotionCurveSegment(curveCount, segmentPosition + 3);\r\n                            this._motionData.points.at(totalPointCount + 1).value = json.getMotionCurveSegment(curveCount, segmentPosition + 4);\r\n                            this._motionData.points.at(totalPointCount + 2).time = json.getMotionCurveSegment(curveCount, segmentPosition + 5);\r\n                            this._motionData.points.at(totalPointCount + 2).value = json.getMotionCurveSegment(curveCount, segmentPosition + 6);\r\n                            totalPointCount += 3;\r\n                            segmentPosition += 7;\r\n                            break;\r\n                        }\r\n                        case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\r\n                            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                                CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\r\n                            this._motionData.segments.at(totalSegmentCount).evaluate = steppedEvaluate;\r\n                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n                            totalPointCount += 1;\r\n                            segmentPosition += 3;\r\n                            break;\r\n                        }\r\n                        case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\r\n                            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                                CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\r\n                            this._motionData.segments.at(totalSegmentCount).evaluate = inverseSteppedEvaluate;\r\n                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n                            totalPointCount += 1;\r\n                            segmentPosition += 3;\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            cubismdebug_1.CSM_ASSERT(0);\r\n                            break;\r\n                        }\r\n                    }\r\n                    ++this._motionData.curves.at(curveCount).segmentCount;\r\n                    ++totalSegmentCount;\r\n                }\r\n            }\r\n            for (var userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {\r\n                this._motionData.events.at(userdatacount).fireTime = json.getEventTime(userdatacount);\r\n                this._motionData.events.at(userdatacount).value = json.getEventValue(userdatacount);\r\n            }\r\n            json.release();\r\n            json = void 0;\r\n            json = null;\r\n        };\r\n        CubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {\r\n            this._firedEventValues.updateSize(0);\r\n            for (var u = 0; u < this._motionData.eventCount; ++u) {\r\n                if (this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&\r\n                    this._motionData.events.at(u).fireTime <= motionTimeSeconds) {\r\n                    this._firedEventValues.pushBack(new csmString(this._motionData.events.at(u).value.s));\r\n                }\r\n            }\r\n            return this._firedEventValues;\r\n        };\r\n        return CubismMotion;\r\n    }(ACubismMotion));\r\n    Live2DCubismFramework.CubismMotion = CubismMotion;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/motion/cubismmotion.ts\n");

/***/ }),

/***/ "../../../Framework/src/motion/cubismmotioninternal.ts":
/*!***************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/motion/cubismmotioninternal.ts ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMotionCurveTarget;\r\n    (function (CubismMotionCurveTarget) {\r\n        CubismMotionCurveTarget[CubismMotionCurveTarget[\"CubismMotionCurveTarget_Model\"] = 0] = \"CubismMotionCurveTarget_Model\";\r\n        CubismMotionCurveTarget[CubismMotionCurveTarget[\"CubismMotionCurveTarget_Parameter\"] = 1] = \"CubismMotionCurveTarget_Parameter\";\r\n        CubismMotionCurveTarget[CubismMotionCurveTarget[\"CubismMotionCurveTarget_PartOpacity\"] = 2] = \"CubismMotionCurveTarget_PartOpacity\";\r\n    })(CubismMotionCurveTarget = Live2DCubismFramework.CubismMotionCurveTarget || (Live2DCubismFramework.CubismMotionCurveTarget = {}));\r\n    var CubismMotionSegmentType;\r\n    (function (CubismMotionSegmentType) {\r\n        CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_Linear\"] = 0] = \"CubismMotionSegmentType_Linear\";\r\n        CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_Bezier\"] = 1] = \"CubismMotionSegmentType_Bezier\";\r\n        CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_Stepped\"] = 2] = \"CubismMotionSegmentType_Stepped\";\r\n        CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_InverseStepped\"] = 3] = \"CubismMotionSegmentType_InverseStepped\";\r\n    })(CubismMotionSegmentType = Live2DCubismFramework.CubismMotionSegmentType || (Live2DCubismFramework.CubismMotionSegmentType = {}));\r\n    var CubismMotionPoint = (function () {\r\n        function CubismMotionPoint() {\r\n            this.time = 0.0;\r\n            this.value = 0.0;\r\n        }\r\n        return CubismMotionPoint;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionPoint = CubismMotionPoint;\r\n    var CubismMotionSegment = (function () {\r\n        function CubismMotionSegment() {\r\n            this.evaluate = null;\r\n            this.basePointIndex = 0;\r\n            this.segmentType = 0;\r\n        }\r\n        return CubismMotionSegment;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionSegment = CubismMotionSegment;\r\n    var CubismMotionCurve = (function () {\r\n        function CubismMotionCurve() {\r\n            this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n            this.segmentCount = 0;\r\n            this.baseSegmentIndex = 0;\r\n            this.fadeInTime = 0.0;\r\n            this.fadeOutTime = 0.0;\r\n        }\r\n        return CubismMotionCurve;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionCurve = CubismMotionCurve;\r\n    var CubismMotionEvent = (function () {\r\n        function CubismMotionEvent() {\r\n            this.fireTime = 0.0;\r\n        }\r\n        return CubismMotionEvent;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionEvent = CubismMotionEvent;\r\n    var CubismMotionData = (function () {\r\n        function CubismMotionData() {\r\n            this.duration = 0.0;\r\n            this.loop = false;\r\n            this.curveCount = 0;\r\n            this.eventCount = 0;\r\n            this.fps = 0.0;\r\n            this.curves = new csmVector();\r\n            this.segments = new csmVector();\r\n            this.points = new csmVector();\r\n            this.events = new csmVector();\r\n        }\r\n        return CubismMotionData;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionData = CubismMotionData;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9uaW50ZXJuYWwudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovVXNlcnMvbWlmYXMvRG9jdW1lbnRzL3JlZHNvZGEwMjEzLmdpdGh1Yi5pby9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25pbnRlcm5hbC50cz9jZmJlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3Ntc3RyaW5nIH0gZnJvbSAnLi4vdHlwZS9jc21zdHJpbmcnO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xyXG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcclxuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XHJcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIC8qKlxyXG4gICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7nqK7poZ5cclxuICAgKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBrueorumhnuOAglxyXG4gICAqL1xyXG4gIGV4cG9ydCBlbnVtIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0IHtcclxuICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsLCAvLyDjg6Ljg4fjg6vjgavlr77jgZfjgaZcclxuICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlciwgLy8g44OR44Op44Oh44O844K/44Gr5a++44GX44GmXHJcbiAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJ0T3BhY2l0eSAvLyDjg5Hjg7zjg4Tjga7kuI3pgI/mmI7luqbjgavlr77jgZfjgaZcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjga7nqK7poZ5cclxuICAgKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBrueorumhnuOAglxyXG4gICAqL1xyXG4gIGV4cG9ydCBlbnVtIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlIHtcclxuICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0xpbmVhciA9IDAsIC8vIOODquODi+OColxyXG4gICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyID0gMSwgLy8g44OZ44K444Kn5puy57eaXHJcbiAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9TdGVwcGVkID0gMiwgLy8g44K544OG44OD44OXXHJcbiAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZCA9IDMgLy8g44Kk44Oz44OQ44O844K544K544OG44OD44OXXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu5Yi25b6h54K5XHJcbiAgICpcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrnjgIJcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uUG9pbnQge1xyXG4gICAgdGltZSA9IDAuMDsgLy8g5pmC6ZaTW+enkl1cclxuICAgIHZhbHVlID0gMC4wOyAvLyDlgKRcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBruipleS+oemWouaVsFxyXG4gICAqXHJcbiAgICogQHBhcmFtICAgcG9pbnRzICAgICAg44Oi44O844K344On44Oz44Kr44O844OW44Gu5Yi25b6h54K544Oq44K544OIXHJcbiAgICogQHBhcmFtICAgdGltZSAgICAgICAg6KmV5L6h44GZ44KL5pmC6ZaTW+enkl1cclxuICAgKi9cclxuICBleHBvcnQgaW50ZXJmYWNlIGNzbU1vdGlvblNlZ21lbnRFdmFsdWF0aW9uRnVuY3Rpb24ge1xyXG4gICAgKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiFxyXG4gICAqXHJcbiAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvblNlZ21lbnQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAYnJpZWYg44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5ldmFsdWF0ZSA9IG51bGw7XHJcbiAgICAgIHRoaXMuYmFzZVBvaW50SW5kZXggPSAwO1xyXG4gICAgICB0aGlzLnNlZ21lbnRUeXBlID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBldmFsdWF0ZTogY3NtTW90aW9uU2VnbWVudEV2YWx1YXRpb25GdW5jdGlvbjsgLy8g5L2/55So44GZ44KL6KmV5L6h6Zai5pWwXHJcbiAgICBiYXNlUG9pbnRJbmRleDogbnVtYmVyOyAvLyDmnIDliJ3jga7jgrvjgrDjg6Hjg7Pjg4jjgbjjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIHNlZ21lbnRUeXBlOiBudW1iZXI7IC8vIOOCu+OCsOODoeODs+ODiOOBrueorumhnlxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODllxyXG4gICAqXHJcbiAgICog44Oi44O844K344On44Oz44Kr44O844OW44CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkN1cnZlIHtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy50eXBlID0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWw7XHJcbiAgICAgIHRoaXMuc2VnbWVudENvdW50ID0gMDtcclxuICAgICAgdGhpcy5iYXNlU2VnbWVudEluZGV4ID0gMDtcclxuICAgICAgdGhpcy5mYWRlSW5UaW1lID0gMC4wO1xyXG4gICAgICB0aGlzLmZhZGVPdXRUaW1lID0gMC4wO1xyXG4gICAgfVxyXG5cclxuICAgIHR5cGU6IEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0OyAvLyDjgqvjg7zjg5bjga7nqK7poZ5cclxuICAgIGlkOiBDdWJpc21JZEhhbmRsZTsgLy8g44Kr44O844OW44GuSURcclxuICAgIHNlZ21lbnRDb3VudDogbnVtYmVyOyAvLyDjgrvjgrDjg6Hjg7Pjg4jjga7lgIvmlbBcclxuICAgIGJhc2VTZWdtZW50SW5kZXg6IG51bWJlcjsgLy8g5pyA5Yid44Gu44K744Kw44Oh44Oz44OI44Gu44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICBmYWRlSW5UaW1lOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCpOODs+OBq+OBi+OBi+OCi+aZgumWk1vnp5JdXHJcbiAgICBmYWRlT3V0VGltZTogbnVtYmVyOyAvLyDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Kk44OZ44Oz44OI44CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkV2ZW50IHtcclxuICAgIGZpcmVUaW1lID0gMC4wO1xyXG4gICAgdmFsdWU6IGNzbVN0cmluZztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr9cclxuICAgKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv+OAglxyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25EYXRhIHtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5kdXJhdGlvbiA9IDAuMDtcclxuICAgICAgdGhpcy5sb29wID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuY3VydmVDb3VudCA9IDA7XHJcbiAgICAgIHRoaXMuZXZlbnRDb3VudCA9IDA7XHJcbiAgICAgIHRoaXMuZnBzID0gMC4wO1xyXG5cclxuICAgICAgdGhpcy5jdXJ2ZXMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPigpO1xyXG4gICAgICB0aGlzLnNlZ21lbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25TZWdtZW50PigpO1xyXG4gICAgICB0aGlzLnBvaW50cyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUG9pbnQ+KCk7XHJcbiAgICAgIHRoaXMuZXZlbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25FdmVudD4oKTtcclxuICAgIH1cclxuXHJcbiAgICBkdXJhdGlvbjogbnVtYmVyOyAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7plbfjgZVb56eSXVxyXG4gICAgbG9vcDogYm9vbGVhbjsgLy8g44Or44O844OX44GZ44KL44GL44Gp44GG44GLXHJcbiAgICBjdXJ2ZUNvdW50OiBudW1iZXI7IC8vIOOCq+ODvOODluOBruWAi+aVsFxyXG4gICAgZXZlbnRDb3VudDogbnVtYmVyOyAvLyBVc2VyRGF0YeOBruWAi+aVsFxyXG4gICAgZnBzOiBudW1iZXI7IC8vIOODleODrOODvOODoOODrOODvOODiFxyXG4gICAgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+OyAvLyDjgqvjg7zjg5bjga7jg6rjgrnjg4hcclxuICAgIHNlZ21lbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uU2VnbWVudD47IC8vIOOCu+OCsOODoeODs+ODiOOBruODquOCueODiFxyXG4gICAgcG9pbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uUG9pbnQ+OyAvLyDjg53jgqTjg7Pjg4jjga7jg6rjgrnjg4hcclxuICAgIGV2ZW50czogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkV2ZW50PjsgLy8g44Kk44OZ44Oz44OI44Gu44Oq44K544OIXHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFTQTtBQUNBO0FBSUE7QUFBQTtBQU1BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFIQTtBQW9CQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUFBO0FBZkE7QUFzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQUE7QUFmQTtBQW9CQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFIQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVdBO0FBQUE7QUF2QkE7QUF3QkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../Framework/src/motion/cubismmotioninternal.ts\n");

/***/ }),

/***/ "../../../Framework/src/motion/cubismmotionjson.ts":
/*!***********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/motion/cubismmotionjson.ts ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"../../../Framework/src/utils/cubismjson.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"../../../Framework/src/type/csmstring.ts\");\r\nvar csmString = csmstring_1.Live2DCubismFramework.csmString;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var Meta = 'Meta';\r\n    var Duration = 'Duration';\r\n    var Loop = 'Loop';\r\n    var CurveCount = 'CurveCount';\r\n    var Fps = 'Fps';\r\n    var TotalSegmentCount = 'TotalSegmentCount';\r\n    var TotalPointCount = 'TotalPointCount';\r\n    var Curves = 'Curves';\r\n    var Target = 'Target';\r\n    var Id = 'Id';\r\n    var FadeInTime = 'FadeInTime';\r\n    var FadeOutTime = 'FadeOutTime';\r\n    var Segments = 'Segments';\r\n    var UserData = 'UserData';\r\n    var UserDataCount = 'UserDataCount';\r\n    var TotalUserDataSize = 'TotalUserDataSize';\r\n    var Time = 'Time';\r\n    var Value = 'Value';\r\n    var CubismMotionJson = (function () {\r\n        function CubismMotionJson(buffer, size) {\r\n            this._json = CubismJson.create(buffer, size);\r\n        }\r\n        CubismMotionJson.prototype.release = function () {\r\n            CubismJson.delete(this._json);\r\n        };\r\n        CubismMotionJson.prototype.getMotionDuration = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(Duration)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.isMotionLoop = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(Loop)\r\n                .toBoolean();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(CurveCount)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.getMotionFps = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(Fps)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getMotionTotalSegmentCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalSegmentCount)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.getMotionTotalPointCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalPointCount)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.isExistMotionFadeInTime = function () {\r\n            return !this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(FadeInTime)\r\n                .isNull();\r\n        };\r\n        CubismMotionJson.prototype.isExistMotionFadeOutTime = function () {\r\n            return !this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(FadeOutTime)\r\n                .isNull();\r\n        };\r\n        CubismMotionJson.prototype.getMotionFadeInTime = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(FadeInTime)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getMotionFadeOutTime = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(FadeOutTime)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveTarget = function (curveIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(Target)\r\n                .getRawString();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveId = function (curveIndex) {\r\n            return CubismFramework.getIdManager().getId(this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(Id)\r\n                .getRawString());\r\n        };\r\n        CubismMotionJson.prototype.isExistMotionCurveFadeInTime = function (curveIndex) {\r\n            return !this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(FadeInTime)\r\n                .isNull();\r\n        };\r\n        CubismMotionJson.prototype.isExistMotionCurveFadeOutTime = function (curveIndex) {\r\n            return !this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(FadeOutTime)\r\n                .isNull();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveFadeInTime = function (curveIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(FadeInTime)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveFadeOutTime = function (curveIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(FadeOutTime)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveSegmentCount = function (curveIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(Segments)\r\n                .getVector()\r\n                .getSize();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveSegment = function (curveIndex, segmentIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(Segments)\r\n                .getValueByIndex(segmentIndex)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getEventCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(UserDataCount)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.getTotalEventValueSize = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalUserDataSize)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.getEventTime = function (userDataIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(UserData)\r\n                .getValueByIndex(userDataIndex)\r\n                .getValueByString(Time)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.getEventValue = function (userDataIndex) {\r\n            return new csmString(this._json\r\n                .getRoot()\r\n                .getValueByString(UserData)\r\n                .getValueByIndex(userDataIndex)\r\n                .getValueByString(Value)\r\n                .getRawString());\r\n        };\r\n        return CubismMotionJson;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionJson = CubismMotionJson;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/motion/cubismmotionjson.ts\n");

/***/ }),

/***/ "../../../Framework/src/motion/cubismmotionmanager.ts":
/*!**************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/motion/cubismmotionmanager.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmotionqueuemanager_1 = __webpack_require__(/*! ./cubismmotionqueuemanager */ \"../../../Framework/src/motion/cubismmotionqueuemanager.ts\");\r\nvar CubismMotionQueueManager = cubismmotionqueuemanager_1.Live2DCubismFramework.CubismMotionQueueManager;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMotionManager = (function (_super) {\r\n        __extends(CubismMotionManager, _super);\r\n        function CubismMotionManager() {\r\n            var _this = _super.call(this) || this;\r\n            _this._currentPriority = 0;\r\n            _this._reservePriority = 0;\r\n            return _this;\r\n        }\r\n        CubismMotionManager.prototype.getCurrentPriority = function () {\r\n            return this._currentPriority;\r\n        };\r\n        CubismMotionManager.prototype.getReservePriority = function () {\r\n            return this._reservePriority;\r\n        };\r\n        CubismMotionManager.prototype.setReservePriority = function (val) {\r\n            this._reservePriority = val;\r\n        };\r\n        CubismMotionManager.prototype.startMotionPriority = function (motion, autoDelete, priority) {\r\n            if (priority == this._reservePriority) {\r\n                this._reservePriority = 0;\r\n            }\r\n            this._currentPriority = priority;\r\n            return _super.prototype.startMotion.call(this, motion, autoDelete, this._userTimeSeconds);\r\n        };\r\n        CubismMotionManager.prototype.updateMotion = function (model, deltaTimeSeconds) {\r\n            this._userTimeSeconds += deltaTimeSeconds;\r\n            var updated = _super.prototype.doUpdateMotion.call(this, model, this._userTimeSeconds);\r\n            if (this.isFinished()) {\r\n                this._currentPriority = 0;\r\n            }\r\n            return updated;\r\n        };\r\n        CubismMotionManager.prototype.reserveMotion = function (priority) {\r\n            if (priority <= this._reservePriority ||\r\n                priority <= this._currentPriority) {\r\n                return false;\r\n            }\r\n            this._reservePriority = priority;\r\n            return true;\r\n        };\r\n        return CubismMotionManager;\r\n    }(CubismMotionQueueManager));\r\n    Live2DCubismFramework.CubismMotionManager = CubismMotionManager;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlci50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9DOi9Vc2Vycy9taWZhcy9Eb2N1bWVudHMvcmVkc29kYTAyMTMuZ2l0aHViLmlvL0ZyYW1ld29yay9zcmMvbW90aW9uL2N1YmlzbW1vdGlvbm1hbmFnZXIudHM/MjQ1YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlcic7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeUhhbmRsZSA9IGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlci5DdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlO1xyXG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcclxuaW1wb3J0IEFDdWJpc21Nb3Rpb24gPSBhY3ViaXNtbW90aW9uLkFDdWJpc21Nb3Rpb247XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIgPSBjdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXIuQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIC8qKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBrueuoeeQhlxyXG4gICAqXHJcbiAgICog44Oi44O844K344On44Oz44Gu566h55CG44KS6KGM44GG44Kv44Op44K5XHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbk1hbmFnZXIgZXh0ZW5kcyBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICBzdXBlcigpO1xyXG4gICAgICB0aGlzLl9jdXJyZW50UHJpb3JpdHkgPSAwO1xyXG4gICAgICB0aGlzLl9yZXNlcnZlUHJpb3JpdHkgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YaN55Sf5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44Gu5Y+W5b6XXHJcbiAgICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEN1cnJlbnRQcmlvcml0eSgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fY3VycmVudFByaW9yaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LqI57SE5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFJlc2VydmVQcmlvcml0eSgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LqI57SE5Lit44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44KS6Kit5a6a44GZ44KL44CCXHJcbiAgICAgKiBAcGFyYW0gICB2YWwgICAgIOWEquWFiOW6plxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0UmVzZXJ2ZVByaW9yaXR5KHZhbDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IHZhbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWEquWFiOW6puOCkuioreWumuOBl+OBpuODouODvOOCt+ODp+ODs+OCkumWi+Wni+OBmeOCi+OAglxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBtb3Rpb24gICAgICAgICAg44Oi44O844K344On44OzXHJcbiAgICAgKiBAcGFyYW0gYXV0b0RlbGV0ZSAgICAgIOWGjeeUn+OBjOeLqeeMn+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruOCpOODs+OCueOCv+ODs+OCueOCkuWJiumZpOOBmeOCi+OBquOCiXRydWVcclxuICAgICAqIEBwYXJhbSBwcmlvcml0eSAgICAgICAg5YSq5YWI5bqmXHJcbiAgICAgKiBAcmV0dXJuICAgICAgICAgICAgICAgIOmWi+Wni+OBl+OBn+ODouODvOOCt+ODp+ODs+OBruitmOWIpeeVquWPt+OCkui/lOOBmeOAguWAi+WIpeOBruODouODvOOCt+ODp+ODs+OBjOe1guS6huOBl+OBn+OBi+WQpuOBi+OCkuWIpOWumuOBmeOCi0lzRmluaXNoZWQoKeOBruW8leaVsOOBp+S9v+eUqOOBmeOCi+OAgumWi+Wni+OBp+OBjeOBquOBhOaZguOBr+OAjC0x44CNXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGFydE1vdGlvblByaW9yaXR5KFxyXG4gICAgICBtb3Rpb246IEFDdWJpc21Nb3Rpb24sXHJcbiAgICAgIGF1dG9EZWxldGU6IGJvb2xlYW4sXHJcbiAgICAgIHByaW9yaXR5OiBudW1iZXJcclxuICAgICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xyXG4gICAgICBpZiAocHJpb3JpdHkgPT0gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5KSB7XHJcbiAgICAgICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gMDsgLy8g5LqI57SE44KS6Kej6ZmkXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IHByaW9yaXR5OyAvLyDlho3nlJ/kuK3jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrppcclxuXHJcbiAgICAgIHJldHVybiBzdXBlci5zdGFydE1vdGlvbihtb3Rpb24sIGF1dG9EZWxldGUsIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrDjgZfjgabjgIHjg6Ljg4fjg6vjgavjg5Hjg6njg6Hjg7zjgr/lgKTjgpLlj43mmKDjgZnjgovjgIJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbW9kZWwgICDlr77osaHjga7jg6Ljg4fjg6tcclxuICAgICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzICAgIOODh+ODq+OCv+aZgumWk1vnp5JdXHJcbiAgICAgKiBAcmV0dXJuICB0cnVlICAgIOabtOaWsOOBleOCjOOBpuOBhOOCi1xyXG4gICAgICogQHJldHVybiAgZmFsc2UgICDmm7TmlrDjgZXjgozjgabjgYTjgarjgYRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZU1vdGlvbihtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcclxuXHJcbiAgICAgIGNvbnN0IHVwZGF0ZWQ6IGJvb2xlYW4gPSBzdXBlci5kb1VwZGF0ZU1vdGlvbihcclxuICAgICAgICBtb2RlbCxcclxuICAgICAgICB0aGlzLl91c2VyVGltZVNlY29uZHNcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmlzRmluaXNoZWQoKSkge1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IDA7IC8vIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuino+mZpFxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdXBkYXRlZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODouODvOOCt+ODp+ODs+OCkuS6iOe0hOOBmeOCi+OAglxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAgIHByaW9yaXR5ICAgIOWEquWFiOW6plxyXG4gICAgICogQHJldHVybiAgdHJ1ZSAgICDkuojntITjgafjgY3jgZ9cclxuICAgICAqIEByZXR1cm4gIGZhbHNlICAg5LqI57SE44Gn44GN44Gq44GL44Gj44GfXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZXNlcnZlTW90aW9uKHByaW9yaXR5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHByaW9yaXR5IDw9IHRoaXMuX3Jlc2VydmVQcmlvcml0eSB8fFxyXG4gICAgICAgIHByaW9yaXR5IDw9IHRoaXMuX2N1cnJlbnRQcmlvcml0eVxyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IHByaW9yaXR5O1xyXG5cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgX2N1cnJlbnRQcmlvcml0eTogbnVtYmVyOyAvLyDnj77lnKjlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcclxuICAgIF9yZXNlcnZlUHJpb3JpdHk6IG51bWJlcjsgLy8g5YaN55Sf5LqI5a6a44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44CC5YaN55Sf5Lit44GvMOOBq+OBquOCi+OAguODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OCkuWIpeOCueODrOODg+ODieOBp+iqreOBv+i+vOOCgOOBqOOBjeOBruapn+iDveOAglxyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQU9BO0FBTUE7QUFFQTtBQUFBO0FBTUE7QUFBQTtBQUlBO0FBQUE7QUFFQTtBQUNBOztBQUNBO0FBTUE7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBVUE7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFVQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBU0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUlBO0FBQUE7QUFyR0E7QUFzR0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../Framework/src/motion/cubismmotionmanager.ts\n");

/***/ }),

/***/ "../../../Framework/src/motion/cubismmotionqueueentry.ts":
/*!*****************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/motion/cubismmotionqueueentry.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ \"../../../Framework/src/motion/acubismmotion.ts\");\r\nvar ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMotionQueueEntry = (function () {\r\n        function CubismMotionQueueEntry() {\r\n            this._autoDelete = false;\r\n            this._motion = null;\r\n            this._available = true;\r\n            this._finished = false;\r\n            this._started = false;\r\n            this._startTimeSeconds = -1.0;\r\n            this._fadeInStartTimeSeconds = 0.0;\r\n            this._endTimeSeconds = -1.0;\r\n            this._stateTimeSeconds = 0.0;\r\n            this._stateWeight = 0.0;\r\n            this._lastEventCheckSeconds = 0.0;\r\n            this._motionQueueEntryHandle = this;\r\n        }\r\n        CubismMotionQueueEntry.prototype.release = function () {\r\n            if (this._autoDelete && this._motion) {\r\n                ACubismMotion.delete(this._motion);\r\n            }\r\n        };\r\n        CubismMotionQueueEntry.prototype.startFadeout = function (fadeoutSeconds, userTimeSeconds) {\r\n            var newEndTimeSeconds = userTimeSeconds + fadeoutSeconds;\r\n            if (this._endTimeSeconds < 0.0 ||\r\n                newEndTimeSeconds < this._endTimeSeconds) {\r\n                this._endTimeSeconds = newEndTimeSeconds;\r\n            }\r\n        };\r\n        CubismMotionQueueEntry.prototype.isFinished = function () {\r\n            return this._finished;\r\n        };\r\n        CubismMotionQueueEntry.prototype.isStarted = function () {\r\n            return this._started;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getStartTime = function () {\r\n            return this._startTimeSeconds;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getFadeInStartTime = function () {\r\n            return this._fadeInStartTimeSeconds;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getEndTime = function () {\r\n            return this._endTimeSeconds;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setStartTime = function (startTime) {\r\n            this._startTimeSeconds = startTime;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setFadeInStartTime = function (startTime) {\r\n            this._fadeInStartTimeSeconds = startTime;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setEndTime = function (endTime) {\r\n            this._endTimeSeconds = endTime;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setIsFinished = function (f) {\r\n            this._finished = f;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setIsStarted = function (f) {\r\n            this._started = f;\r\n        };\r\n        CubismMotionQueueEntry.prototype.isAvailable = function () {\r\n            return this._available;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setIsAvailable = function (v) {\r\n            this._available = v;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setState = function (timeSeconds, weight) {\r\n            this._stateTimeSeconds = timeSeconds;\r\n            this._stateWeight = weight;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getStateTime = function () {\r\n            return this._stateTimeSeconds;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getStateWeight = function () {\r\n            return this._stateWeight;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getLastCheckEventTime = function () {\r\n            return this._lastEventCheckSeconds;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setLastCheckEventTime = function (checkTime) {\r\n            this._lastEventCheckSeconds = checkTime;\r\n        };\r\n        return CubismMotionQueueEntry;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionQueueEntry = CubismMotionQueueEntry;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/motion/cubismmotionqueueentry.ts\n");

/***/ }),

/***/ "../../../Framework/src/motion/cubismmotionqueuemanager.ts":
/*!*******************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/motion/cubismmotionqueuemanager.ts ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmotionqueueentry_1 = __webpack_require__(/*! ./cubismmotionqueueentry */ \"../../../Framework/src/motion/cubismmotionqueueentry.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismMotionQueueEntry = cubismmotionqueueentry_1.Live2DCubismFramework.CubismMotionQueueEntry;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMotionQueueManager = (function () {\r\n        function CubismMotionQueueManager() {\r\n            this._userTimeSeconds = 0.0;\r\n            this._eventCallBack = null;\r\n            this._eventCustomData = null;\r\n            this._motions = new csmVector();\r\n        }\r\n        CubismMotionQueueManager.prototype.release = function () {\r\n            for (var i = 0; i < this._motions.getSize(); ++i) {\r\n                if (this._motions.at(i)) {\r\n                    this._motions.at(i).release();\r\n                    this._motions.set(i, void 0);\r\n                    this._motions.set(i, null);\r\n                }\r\n            }\r\n            this._motions = null;\r\n        };\r\n        CubismMotionQueueManager.prototype.startMotion = function (motion, autoDelete, userTimeSeconds) {\r\n            if (motion == null) {\r\n                return Live2DCubismFramework.InvalidMotionQueueEntryHandleValue;\r\n            }\r\n            var motionQueueEntry = null;\r\n            for (var i = 0; i < this._motions.getSize(); ++i) {\r\n                motionQueueEntry = this._motions.at(i);\r\n                if (motionQueueEntry == null) {\r\n                    continue;\r\n                }\r\n                motionQueueEntry.startFadeout(motionQueueEntry._motion.getFadeOutTime(), userTimeSeconds);\r\n            }\r\n            motionQueueEntry = new CubismMotionQueueEntry();\r\n            motionQueueEntry._autoDelete = autoDelete;\r\n            motionQueueEntry._motion = motion;\r\n            this._motions.pushBack(motionQueueEntry);\r\n            return motionQueueEntry._motionQueueEntryHandle;\r\n        };\r\n        CubismMotionQueueManager.prototype.isFinished = function () {\r\n            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\r\n                var motionQueueEntry = ite.ptr();\r\n                if (motionQueueEntry == null) {\r\n                    ite = this._motions.erase(ite);\r\n                    continue;\r\n                }\r\n                var motion = motionQueueEntry._motion;\r\n                if (motion == null) {\r\n                    motionQueueEntry.release();\r\n                    motionQueueEntry = void 0;\r\n                    motionQueueEntry = null;\r\n                    ite = this._motions.erase(ite);\r\n                    continue;\r\n                }\r\n                if (!motionQueueEntry.isFinished()) {\r\n                    return false;\r\n                }\r\n                else {\r\n                    ite.preIncrement();\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        CubismMotionQueueManager.prototype.isFinishedByHandle = function (motionQueueEntryNumber) {\r\n            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.increment()) {\r\n                var motionQueueEntry = ite.ptr();\r\n                if (motionQueueEntry == null) {\r\n                    continue;\r\n                }\r\n                if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&\r\n                    !motionQueueEntry.isFinished()) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        CubismMotionQueueManager.prototype.stopAllMotions = function () {\r\n            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\r\n                var motionQueueEntry = ite.ptr();\r\n                if (motionQueueEntry == null) {\r\n                    ite = this._motions.erase(ite);\r\n                    continue;\r\n                }\r\n                motionQueueEntry.release();\r\n                motionQueueEntry = void 0;\r\n                motionQueueEntry = null;\r\n                ite = this._motions.erase(ite);\r\n            }\r\n        };\r\n        CubismMotionQueueManager.prototype.getCubismMotionQueueEntry = function (motionQueueEntryNumber) {\r\n            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.preIncrement()) {\r\n                var motionQueueEntry = ite.ptr();\r\n                if (motionQueueEntry == null) {\r\n                    continue;\r\n                }\r\n                if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {\r\n                    return motionQueueEntry;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        CubismMotionQueueManager.prototype.setEventCallback = function (callback, customData) {\r\n            if (customData === void 0) { customData = null; }\r\n            this._eventCallBack = callback;\r\n            this._eventCustomData = customData;\r\n        };\r\n        CubismMotionQueueManager.prototype.doUpdateMotion = function (model, userTimeSeconds) {\r\n            var updated = false;\r\n            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\r\n                var motionQueueEntry = ite.ptr();\r\n                if (motionQueueEntry == null) {\r\n                    ite = this._motions.erase(ite);\r\n                    continue;\r\n                }\r\n                var motion = motionQueueEntry._motion;\r\n                if (motion == null) {\r\n                    motionQueueEntry.release();\r\n                    motionQueueEntry = void 0;\r\n                    motionQueueEntry = null;\r\n                    ite = this._motions.erase(ite);\r\n                    continue;\r\n                }\r\n                motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\r\n                updated = true;\r\n                var firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventTime() -\r\n                    motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());\r\n                for (var i = 0; i < firedList.getSize(); ++i) {\r\n                    this._eventCallBack(this, firedList.at(i), this._eventCustomData);\r\n                }\r\n                motionQueueEntry.setLastCheckEventTime(userTimeSeconds);\r\n                if (motionQueueEntry.isFinished()) {\r\n                    motionQueueEntry.release();\r\n                    motionQueueEntry = void 0;\r\n                    motionQueueEntry = null;\r\n                    ite = this._motions.erase(ite);\r\n                }\r\n                else {\r\n                    ite.preIncrement();\r\n                }\r\n            }\r\n            return updated;\r\n        };\r\n        return CubismMotionQueueManager;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionQueueManager = CubismMotionQueueManager;\r\n    Live2DCubismFramework.InvalidMotionQueueEntryHandleValue = -1;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/motion/cubismmotionqueuemanager.ts\n");

/***/ }),

/***/ "../../../Framework/src/physics/cubismphysics.ts":
/*!*********************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/physics/cubismphysics.ts ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismphysicsinternal_1 = __webpack_require__(/*! ./cubismphysicsinternal */ \"../../../Framework/src/physics/cubismphysicsinternal.ts\");\r\nvar cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ \"../../../Framework/src/math/cubismvector2.ts\");\r\nvar cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ \"../../../Framework/src/math/cubismmath.ts\");\r\nvar cubismphysicsjson_1 = __webpack_require__(/*! ./cubismphysicsjson */ \"../../../Framework/src/physics/cubismphysicsjson.ts\");\r\nvar CubismPhysicsJson = cubismphysicsjson_1.Live2DCubismFramework.CubismPhysicsJson;\r\nvar CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;\r\nvar CubismPhysicsRig = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsRig;\r\nvar CubismPhysicsSubRig = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsSubRig;\r\nvar CubismPhysicsInput = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsInput;\r\nvar CubismPhysicsOutput = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsOutput;\r\nvar CubismPhysicsParticle = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsParticle;\r\nvar CubismPhysicsSource = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsSource;\r\nvar CubismPhysicsTargetType = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsTargetType;\r\nvar CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var PhysicsTypeTagX = 'X';\r\n    var PhysicsTypeTagY = 'Y';\r\n    var PhysicsTypeTagAngle = 'Angle';\r\n    var AirResistance = 5.0;\r\n    var MaximumWeight = 100.0;\r\n    var MovementThreshold = 0.001;\r\n    var CubismPhysics = (function () {\r\n        function CubismPhysics() {\r\n            this._physicsRig = null;\r\n            this._options = new Options();\r\n            this._options.gravity.y = -1.0;\r\n            this._options.gravity.x = 0;\r\n            this._options.wind.x = 0;\r\n            this._options.wind.y = 0;\r\n        }\r\n        CubismPhysics.create = function (buffer, size) {\r\n            var ret = new CubismPhysics();\r\n            ret.parse(buffer, size);\r\n            ret._physicsRig.gravity.y = 0;\r\n            return ret;\r\n        };\r\n        CubismPhysics.delete = function (physics) {\r\n            if (physics != null) {\r\n                physics.release();\r\n                physics = null;\r\n            }\r\n        };\r\n        CubismPhysics.prototype.evaluate = function (model, deltaTimeSeconds) {\r\n            var totalAngle;\r\n            var weight;\r\n            var radAngle;\r\n            var outputValue;\r\n            var totalTranslation = new CubismVector2();\r\n            var currentSetting;\r\n            var currentInput;\r\n            var currentOutput;\r\n            var currentParticles;\r\n            var parameterValue;\r\n            var parameterMaximumValue;\r\n            var parameterMinimumValue;\r\n            var parameterDefaultValue;\r\n            parameterValue = model.getModel().parameters.values;\r\n            parameterMaximumValue = model.getModel().parameters.maximumValues;\r\n            parameterMinimumValue = model.getModel().parameters.minimumValues;\r\n            parameterDefaultValue = model.getModel().parameters.defaultValues;\r\n            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\r\n                totalAngle = { angle: 0.0 };\r\n                totalTranslation.x = 0.0;\r\n                totalTranslation.y = 0.0;\r\n                currentSetting = this._physicsRig.settings.at(settingIndex);\r\n                currentInput = this._physicsRig.inputs.get(currentSetting.baseInputIndex);\r\n                currentOutput = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);\r\n                currentParticles = this._physicsRig.particles.get(currentSetting.baseParticleIndex);\r\n                for (var i = 0; i < currentSetting.inputCount; ++i) {\r\n                    weight = currentInput[i].weight / MaximumWeight;\r\n                    if (currentInput[i].sourceParameterIndex == -1) {\r\n                        currentInput[i].sourceParameterIndex = model.getParameterIndex(currentInput[i].source.id);\r\n                    }\r\n                    currentInput[i].getNormalizedParameterValue(totalTranslation, totalAngle, parameterValue[currentInput[i].sourceParameterIndex], parameterMinimumValue[currentInput[i].sourceParameterIndex], parameterMaximumValue[currentInput[i].sourceParameterIndex], parameterDefaultValue[currentInput[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInput[0].reflect, weight);\r\n                }\r\n                radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\r\n                totalTranslation.x =\r\n                    totalTranslation.x * CubismMath.cos(radAngle) -\r\n                        totalTranslation.y * CubismMath.sin(radAngle);\r\n                totalTranslation.y =\r\n                    totalTranslation.x * CubismMath.sin(radAngle) +\r\n                        totalTranslation.y * CubismMath.cos(radAngle);\r\n                updateParticles(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum, deltaTimeSeconds, AirResistance);\r\n                for (var i = 0; i < currentSetting.outputCount; ++i) {\r\n                    var particleIndex = currentOutput[i].vertexIndex;\r\n                    if (particleIndex < 1 ||\r\n                        particleIndex >= currentSetting.particleCount) {\r\n                        break;\r\n                    }\r\n                    if (currentOutput[i].destinationParameterIndex == -1) {\r\n                        currentOutput[i].destinationParameterIndex = model.getParameterIndex(currentOutput[i].destination.id);\r\n                    }\r\n                    var translation = new CubismVector2();\r\n                    translation.x =\r\n                        currentParticles[particleIndex].position.x -\r\n                            currentParticles[particleIndex - 1].position.x;\r\n                    translation.y =\r\n                        currentParticles[particleIndex].position.y -\r\n                            currentParticles[particleIndex - 1].position.y;\r\n                    outputValue = currentOutput[i].getValue(translation, currentParticles, particleIndex, currentOutput[i].reflect, this._options.gravity);\r\n                    var destinationParameterIndex = currentOutput[i].destinationParameterIndex;\r\n                    var outParameterValue = !Float32Array.prototype.slice &&\r\n                        'subarray' in Float32Array.prototype\r\n                        ? JSON.parse(JSON.stringify(parameterValue.subarray(destinationParameterIndex)))\r\n                        : parameterValue.slice(destinationParameterIndex);\r\n                    updateOutputParameterValue(outParameterValue, parameterMinimumValue[destinationParameterIndex], parameterMaximumValue[destinationParameterIndex], outputValue, currentOutput[i]);\r\n                    for (var offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValue.length; offset++, outParamIndex++) {\r\n                        parameterValue[offset] = outParameterValue[outParamIndex];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        CubismPhysics.prototype.setOptions = function (options) {\r\n            this._options = options;\r\n        };\r\n        CubismPhysics.prototype.getOption = function () {\r\n            return this._options;\r\n        };\r\n        CubismPhysics.prototype.release = function () {\r\n            this._physicsRig = void 0;\r\n            this._physicsRig = null;\r\n        };\r\n        CubismPhysics.prototype.parse = function (physicsJson, size) {\r\n            this._physicsRig = new CubismPhysicsRig();\r\n            var json = new CubismPhysicsJson(physicsJson, size);\r\n            this._physicsRig.gravity = json.getGravity();\r\n            this._physicsRig.wind = json.getWind();\r\n            this._physicsRig.subRigCount = json.getSubRigCount();\r\n            this._physicsRig.settings.updateSize(this._physicsRig.subRigCount, CubismPhysicsSubRig, true);\r\n            this._physicsRig.inputs.updateSize(json.getTotalInputCount(), CubismPhysicsInput, true);\r\n            this._physicsRig.outputs.updateSize(json.getTotalOutputCount(), CubismPhysicsOutput, true);\r\n            this._physicsRig.particles.updateSize(json.getVertexCount(), CubismPhysicsParticle, true);\r\n            var inputIndex = 0, outputIndex = 0, particleIndex = 0;\r\n            for (var i = 0; i < this._physicsRig.settings.getSize(); ++i) {\r\n                this._physicsRig.settings.at(i).normalizationPosition.minimum = json.getNormalizationPositionMinimumValue(i);\r\n                this._physicsRig.settings.at(i).normalizationPosition.maximum = json.getNormalizationPositionMaximumValue(i);\r\n                this._physicsRig.settings.at(i).normalizationPosition.defalut = json.getNormalizationPositionDefaultValue(i);\r\n                this._physicsRig.settings.at(i).normalizationAngle.minimum = json.getNormalizationAngleMinimumValue(i);\r\n                this._physicsRig.settings.at(i).normalizationAngle.maximum = json.getNormalizationAngleMaximumValue(i);\r\n                this._physicsRig.settings.at(i).normalizationAngle.defalut = json.getNormalizationAngleDefaultValue(i);\r\n                this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);\r\n                this._physicsRig.settings.at(i).baseInputIndex = inputIndex;\r\n                for (var j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {\r\n                    this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;\r\n                    this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(i, j);\r\n                    this._physicsRig.inputs.at(inputIndex + j).reflect = json.getInputReflect(i, j);\r\n                    if (json.getInputType(i, j) == PhysicsTypeTagX) {\r\n                        this._physicsRig.inputs.at(inputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_X;\r\n                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationXFromNormalizedParameterValue;\r\n                    }\r\n                    else if (json.getInputType(i, j) == PhysicsTypeTagY) {\r\n                        this._physicsRig.inputs.at(inputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_Y;\r\n                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationYFromNormalizedParamterValue;\r\n                    }\r\n                    else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {\r\n                        this._physicsRig.inputs.at(inputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_Angle;\r\n                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputAngleFromNormalizedParameterValue;\r\n                    }\r\n                    this._physicsRig.inputs.at(inputIndex + j).source.targetType =\r\n                        CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\r\n                    this._physicsRig.inputs.at(inputIndex + j).source.id = json.getInputSourceId(i, j);\r\n                }\r\n                inputIndex += this._physicsRig.settings.at(i).inputCount;\r\n                this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);\r\n                this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;\r\n                for (var j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {\r\n                    this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex = -1;\r\n                    this._physicsRig.outputs.at(outputIndex + j).vertexIndex = json.getOutputVertexIndex(i, j);\r\n                    this._physicsRig.outputs.at(outputIndex + j).angleScale = json.getOutputAngleScale(i, j);\r\n                    this._physicsRig.outputs.at(outputIndex + j).weight = json.getOutputWeight(i, j);\r\n                    this._physicsRig.outputs.at(outputIndex + j).destination.targetType =\r\n                        CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\r\n                    this._physicsRig.outputs.at(outputIndex + j).destination.id = json.getOutputDestinationId(i, j);\r\n                    if (json.getOutputType(i, j) == PhysicsTypeTagX) {\r\n                        this._physicsRig.outputs.at(outputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_X;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationX;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationX;\r\n                    }\r\n                    else if (json.getOutputType(i, j) == PhysicsTypeTagY) {\r\n                        this._physicsRig.outputs.at(outputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_Y;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationY;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationY;\r\n                    }\r\n                    else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {\r\n                        this._physicsRig.outputs.at(outputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_Angle;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputAngle;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleAngle;\r\n                    }\r\n                    this._physicsRig.outputs.at(outputIndex + j).reflect = json.getOutputReflect(i, j);\r\n                }\r\n                outputIndex += this._physicsRig.settings.at(i).outputCount;\r\n                this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);\r\n                this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;\r\n                for (var j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {\r\n                    this._physicsRig.particles.at(particleIndex + j).mobility = json.getParticleMobility(i, j);\r\n                    this._physicsRig.particles.at(particleIndex + j).delay = json.getParticleDelay(i, j);\r\n                    this._physicsRig.particles.at(particleIndex + j).acceleration = json.getParticleAcceleration(i, j);\r\n                    this._physicsRig.particles.at(particleIndex + j).radius = json.getParticleRadius(i, j);\r\n                    this._physicsRig.particles.at(particleIndex + j).position = json.getParticlePosition(i, j);\r\n                }\r\n                particleIndex += this._physicsRig.settings.at(i).particleCount;\r\n            }\r\n            this.initialize();\r\n            json.release();\r\n            json = void 0;\r\n            json = null;\r\n        };\r\n        CubismPhysics.prototype.initialize = function () {\r\n            var strand;\r\n            var currentSetting;\r\n            var radius;\r\n            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\r\n                currentSetting = this._physicsRig.settings.at(settingIndex);\r\n                strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);\r\n                strand[0].initialPosition = new CubismVector2(0.0, 0.0);\r\n                strand[0].lastPosition = new CubismVector2(strand[0].initialPosition.x, strand[0].initialPosition.y);\r\n                strand[0].lastGravity = new CubismVector2(0.0, -1.0);\r\n                strand[0].lastGravity.y *= -1.0;\r\n                strand[0].velocity = new CubismVector2(0.0, 0.0);\r\n                strand[0].force = new CubismVector2(0.0, 0.0);\r\n                for (var i = 1; i < currentSetting.particleCount; ++i) {\r\n                    radius = new CubismVector2(0.0, 0.0);\r\n                    radius.y = strand[i].radius;\r\n                    strand[i].initialPosition = new CubismVector2(strand[i - 1].initialPosition.x + radius.x, strand[i - 1].initialPosition.y + radius.y);\r\n                    strand[i].position = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);\r\n                    strand[i].lastPosition = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);\r\n                    strand[i].lastGravity = new CubismVector2(0.0, -1.0);\r\n                    strand[i].lastGravity.y *= -1.0;\r\n                    strand[i].velocity = new CubismVector2(0.0, 0.0);\r\n                    strand[i].force = new CubismVector2(0.0, 0.0);\r\n                }\r\n            }\r\n        };\r\n        return CubismPhysics;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysics = CubismPhysics;\r\n    var Options = (function () {\r\n        function Options() {\r\n            this.gravity = new CubismVector2(0, 0);\r\n            this.wind = new CubismVector2(0, 0);\r\n        }\r\n        return Options;\r\n    }());\r\n    Live2DCubismFramework.Options = Options;\r\n    function sign(value) {\r\n        var ret = 0;\r\n        if (value > 0.0) {\r\n            ret = 1;\r\n        }\r\n        else if (value < 0.0) {\r\n            ret = -1;\r\n        }\r\n        return ret;\r\n    }\r\n    function getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\r\n        targetTranslation.x +=\r\n            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;\r\n    }\r\n    function getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\r\n        targetTranslation.y +=\r\n            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;\r\n    }\r\n    function getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {\r\n        targetAngle.angle +=\r\n            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationAngle.minimum, normalizationAngle.maximum, normalizationAngle.defalut, isInverted) * weight;\r\n    }\r\n    function getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {\r\n        var outputValue = translation.x;\r\n        if (isInverted) {\r\n            outputValue *= -1.0;\r\n        }\r\n        return outputValue;\r\n    }\r\n    function getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {\r\n        var outputValue = translation.y;\r\n        if (isInverted) {\r\n            outputValue *= -1.0;\r\n        }\r\n        return outputValue;\r\n    }\r\n    function getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {\r\n        var outputValue;\r\n        if (particleIndex >= 2) {\r\n            parentGravity = particles[particleIndex - 1].position.substract(particles[particleIndex - 2].position);\r\n        }\r\n        else {\r\n            parentGravity = parentGravity.multiplyByScaler(-1.0);\r\n        }\r\n        outputValue = CubismMath.directionToRadian(parentGravity, translation);\r\n        if (isInverted) {\r\n            outputValue *= -1.0;\r\n        }\r\n        return outputValue;\r\n    }\r\n    function getRangeValue(min, max) {\r\n        var maxValue = CubismMath.max(min, max);\r\n        var minValue = CubismMath.min(min, max);\r\n        return CubismMath.abs(maxValue - minValue);\r\n    }\r\n    function getDefaultValue(min, max) {\r\n        var minValue = CubismMath.min(min, max);\r\n        return minValue + getRangeValue(min, max) / 2.0;\r\n    }\r\n    function getOutputScaleTranslationX(translationScale, angleScale) {\r\n        return JSON.parse(JSON.stringify(translationScale.x));\r\n    }\r\n    function getOutputScaleTranslationY(translationScale, angleScale) {\r\n        return JSON.parse(JSON.stringify(translationScale.y));\r\n    }\r\n    function getOutputScaleAngle(translationScale, angleScale) {\r\n        return JSON.parse(JSON.stringify(angleScale));\r\n    }\r\n    function updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {\r\n        var totalRadian;\r\n        var delay;\r\n        var radian;\r\n        var currentGravity;\r\n        var direction = new CubismVector2(0.0, 0.0);\r\n        var velocity = new CubismVector2(0.0, 0.0);\r\n        var force = new CubismVector2(0.0, 0.0);\r\n        var newDirection = new CubismVector2(0.0, 0.0);\r\n        strand[0].position = new CubismVector2(totalTranslation.x, totalTranslation.y);\r\n        totalRadian = CubismMath.degreesToRadian(totalAngle);\r\n        currentGravity = CubismMath.radianToDirection(totalRadian);\r\n        currentGravity.normalize();\r\n        for (var i = 1; i < strandCount; ++i) {\r\n            strand[i].force = currentGravity\r\n                .multiplyByScaler(strand[i].acceleration)\r\n                .add(windDirection);\r\n            strand[i].lastPosition = new CubismVector2(strand[i].position.x, strand[i].position.y);\r\n            delay = strand[i].delay * deltaTimeSeconds * 30.0;\r\n            direction = strand[i].position.substract(strand[i - 1].position);\r\n            radian =\r\n                CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /\r\n                    airResistance;\r\n            direction.x =\r\n                CubismMath.cos(radian) * direction.x -\r\n                    direction.y * CubismMath.sin(radian);\r\n            direction.y =\r\n                CubismMath.sin(radian) * direction.x +\r\n                    direction.y * CubismMath.cos(radian);\r\n            strand[i].position = strand[i - 1].position.add(direction);\r\n            velocity = strand[i].velocity.multiplyByScaler(delay);\r\n            force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);\r\n            strand[i].position = strand[i].position.add(velocity).add(force);\r\n            newDirection = strand[i].position.substract(strand[i - 1].position);\r\n            newDirection.normalize();\r\n            strand[i].position = strand[i - 1].position.add(newDirection.multiplyByScaler(strand[i].radius));\r\n            if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\r\n                strand[i].position.x = 0.0;\r\n            }\r\n            if (delay != 0.0) {\r\n                strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);\r\n                strand[i].velocity = strand[i].velocity.divisionByScalar(delay);\r\n                strand[i].velocity = strand[i].velocity.multiplyByScaler(strand[i].mobility);\r\n            }\r\n            strand[i].force = new CubismVector2(0.0, 0.0);\r\n            strand[i].lastGravity = new CubismVector2(currentGravity.x, currentGravity.y);\r\n        }\r\n    }\r\n    function updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {\r\n        var outputScale;\r\n        var value;\r\n        var weight;\r\n        outputScale = output.getScale(output.translationScale, output.angleScale);\r\n        value = translation * outputScale;\r\n        if (value < parameterValueMinimum) {\r\n            if (value < output.valueBelowMinimum) {\r\n                output.valueBelowMinimum = value;\r\n            }\r\n            value = parameterValueMinimum;\r\n        }\r\n        else if (value > parameterValueMaximum) {\r\n            if (value > output.valueExceededMaximum) {\r\n                output.valueExceededMaximum = value;\r\n            }\r\n            value = parameterValueMaximum;\r\n        }\r\n        weight = output.weight / MaximumWeight;\r\n        if (weight >= 1.0) {\r\n            parameterValue[0] = value;\r\n        }\r\n        else {\r\n            value = parameterValue[0] * (1.0 - weight) + value * weight;\r\n            parameterValue[0] = value;\r\n        }\r\n    }\r\n    function normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {\r\n        var result = 0.0;\r\n        var maxValue = CubismMath.max(parameterMaximum, parameterMinimum);\r\n        if (maxValue < value) {\r\n            value = maxValue;\r\n        }\r\n        var minValue = CubismMath.min(parameterMaximum, parameterMinimum);\r\n        if (minValue > value) {\r\n            value = minValue;\r\n        }\r\n        var minNormValue = CubismMath.min(normalizedMinimum, normalizedMaximum);\r\n        var maxNormValue = CubismMath.max(normalizedMinimum, normalizedMaximum);\r\n        var middleNormValue = normalizedDefault;\r\n        var middleValue = getDefaultValue(minValue, maxValue);\r\n        var paramValue = value - middleValue;\r\n        switch (sign(paramValue)) {\r\n            case 1: {\r\n                var nLength = maxNormValue - middleNormValue;\r\n                var pLength = maxValue - middleValue;\r\n                if (pLength != 0.0) {\r\n                    result = paramValue * (nLength / pLength);\r\n                    result += middleNormValue;\r\n                }\r\n                break;\r\n            }\r\n            case -1: {\r\n                var nLength = minNormValue - middleNormValue;\r\n                var pLength = minValue - middleValue;\r\n                if (pLength != 0.0) {\r\n                    result = paramValue * (nLength / pLength);\r\n                    result += middleNormValue;\r\n                }\r\n                break;\r\n            }\r\n            case 0: {\r\n                result = middleNormValue;\r\n                break;\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n        return isInverted ? result : result * -1.0;\r\n    }\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/physics/cubismphysics.ts\n");

/***/ }),

/***/ "../../../Framework/src/physics/cubismphysicsinternal.ts":
/*!*****************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/physics/cubismphysicsinternal.ts ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ \"../../../Framework/src/math/cubismvector2.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismPhysicsTargetType;\r\n    (function (CubismPhysicsTargetType) {\r\n        CubismPhysicsTargetType[CubismPhysicsTargetType[\"CubismPhysicsTargetType_Parameter\"] = 0] = \"CubismPhysicsTargetType_Parameter\";\r\n    })(CubismPhysicsTargetType = Live2DCubismFramework.CubismPhysicsTargetType || (Live2DCubismFramework.CubismPhysicsTargetType = {}));\r\n    var CubismPhysicsSource;\r\n    (function (CubismPhysicsSource) {\r\n        CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_X\"] = 0] = \"CubismPhysicsSource_X\";\r\n        CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_Y\"] = 1] = \"CubismPhysicsSource_Y\";\r\n        CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_Angle\"] = 2] = \"CubismPhysicsSource_Angle\";\r\n    })(CubismPhysicsSource = Live2DCubismFramework.CubismPhysicsSource || (Live2DCubismFramework.CubismPhysicsSource = {}));\r\n    var PhysicsJsonEffectiveForces = (function () {\r\n        function PhysicsJsonEffectiveForces() {\r\n            this.gravity = new CubismVector2(0, 0);\r\n            this.wind = new CubismVector2(0, 0);\r\n        }\r\n        return PhysicsJsonEffectiveForces;\r\n    }());\r\n    Live2DCubismFramework.PhysicsJsonEffectiveForces = PhysicsJsonEffectiveForces;\r\n    var CubismPhysicsParameter = (function () {\r\n        function CubismPhysicsParameter() {\r\n        }\r\n        return CubismPhysicsParameter;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsParameter = CubismPhysicsParameter;\r\n    var CubismPhysicsNormalization = (function () {\r\n        function CubismPhysicsNormalization() {\r\n        }\r\n        return CubismPhysicsNormalization;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsNormalization = CubismPhysicsNormalization;\r\n    var CubismPhysicsParticle = (function () {\r\n        function CubismPhysicsParticle() {\r\n            this.initialPosition = new CubismVector2(0, 0);\r\n            this.position = new CubismVector2(0, 0);\r\n            this.lastPosition = new CubismVector2(0, 0);\r\n            this.lastGravity = new CubismVector2(0, 0);\r\n            this.force = new CubismVector2(0, 0);\r\n            this.velocity = new CubismVector2(0, 0);\r\n        }\r\n        return CubismPhysicsParticle;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsParticle = CubismPhysicsParticle;\r\n    var CubismPhysicsSubRig = (function () {\r\n        function CubismPhysicsSubRig() {\r\n            this.normalizationPosition = new CubismPhysicsNormalization();\r\n            this.normalizationAngle = new CubismPhysicsNormalization();\r\n        }\r\n        return CubismPhysicsSubRig;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsSubRig = CubismPhysicsSubRig;\r\n    var CubismPhysicsInput = (function () {\r\n        function CubismPhysicsInput() {\r\n            this.source = new CubismPhysicsParameter();\r\n        }\r\n        return CubismPhysicsInput;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsInput = CubismPhysicsInput;\r\n    var CubismPhysicsOutput = (function () {\r\n        function CubismPhysicsOutput() {\r\n            this.destination = new CubismPhysicsParameter();\r\n            this.translationScale = new CubismVector2(0, 0);\r\n        }\r\n        return CubismPhysicsOutput;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsOutput = CubismPhysicsOutput;\r\n    var CubismPhysicsRig = (function () {\r\n        function CubismPhysicsRig() {\r\n            this.settings = new csmVector();\r\n            this.inputs = new csmVector();\r\n            this.outputs = new csmVector();\r\n            this.particles = new csmVector();\r\n            this.gravity = new CubismVector2(0, 0);\r\n            this.wind = new CubismVector2(0, 0);\r\n        }\r\n        return CubismPhysicsRig;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsRig = CubismPhysicsRig;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/physics/cubismphysicsinternal.ts\n");

/***/ }),

/***/ "../../../Framework/src/physics/cubismphysicsjson.ts":
/*!*************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/physics/cubismphysicsjson.ts ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"../../../Framework/src/utils/cubismjson.ts\");\r\nvar cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ \"../../../Framework/src/math/cubismvector2.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var Position = 'Position';\r\n    var X = 'X';\r\n    var Y = 'Y';\r\n    var Angle = 'Angle';\r\n    var Type = 'Type';\r\n    var Id = 'Id';\r\n    var Meta = 'Meta';\r\n    var EffectiveForces = 'EffectiveForces';\r\n    var TotalInputCount = 'TotalInputCount';\r\n    var TotalOutputCount = 'TotalOutputCount';\r\n    var PhysicsSettingCount = 'PhysicsSettingCount';\r\n    var Gravity = 'Gravity';\r\n    var Wind = 'Wind';\r\n    var VertexCount = 'VertexCount';\r\n    var PhysicsSettings = 'PhysicsSettings';\r\n    var Normalization = 'Normalization';\r\n    var Minimum = 'Minimum';\r\n    var Maximum = 'Maximum';\r\n    var Default = 'Default';\r\n    var Reflect = 'Reflect';\r\n    var Weight = 'Weight';\r\n    var Input = 'Input';\r\n    var Source = 'Source';\r\n    var Output = 'Output';\r\n    var Scale = 'Scale';\r\n    var VertexIndex = 'VertexIndex';\r\n    var Destination = 'Destination';\r\n    var Vertices = 'Vertices';\r\n    var Mobility = 'Mobility';\r\n    var Delay = 'Delay';\r\n    var Radius = 'Radius';\r\n    var Acceleration = 'Acceleration';\r\n    var CubismPhysicsJson = (function () {\r\n        function CubismPhysicsJson(buffer, size) {\r\n            this._json = CubismJson.create(buffer, size);\r\n        }\r\n        CubismPhysicsJson.prototype.release = function () {\r\n            CubismJson.delete(this._json);\r\n        };\r\n        CubismPhysicsJson.prototype.getGravity = function () {\r\n            var ret = new CubismVector2(0, 0);\r\n            ret.x = this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(EffectiveForces)\r\n                .getValueByString(Gravity)\r\n                .getValueByString(X)\r\n                .toFloat();\r\n            ret.y = this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(EffectiveForces)\r\n                .getValueByString(Gravity)\r\n                .getValueByString(Y)\r\n                .toFloat();\r\n            return ret;\r\n        };\r\n        CubismPhysicsJson.prototype.getWind = function () {\r\n            var ret = new CubismVector2(0, 0);\r\n            ret.x = this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(EffectiveForces)\r\n                .getValueByString(Wind)\r\n                .getValueByString(X)\r\n                .toFloat();\r\n            ret.y = this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(EffectiveForces)\r\n                .getValueByString(Wind)\r\n                .getValueByString(Y)\r\n                .toFloat();\r\n            return ret;\r\n        };\r\n        CubismPhysicsJson.prototype.getSubRigCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(PhysicsSettingCount)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getTotalInputCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalInputCount)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getTotalOutputCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalOutputCount)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getVertexCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(VertexCount)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationPositionMinimumValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Position)\r\n                .getValueByString(Minimum)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationPositionMaximumValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Position)\r\n                .getValueByString(Maximum)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationPositionDefaultValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Position)\r\n                .getValueByString(Default)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationAngleMinimumValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Angle)\r\n                .getValueByString(Minimum)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationAngleMaximumValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Angle)\r\n                .getValueByString(Maximum)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationAngleDefaultValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Angle)\r\n                .getValueByString(Default)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getInputCount = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Input)\r\n                .getVector()\r\n                .getSize();\r\n        };\r\n        CubismPhysicsJson.prototype.getInputWeight = function (physicsSettingIndex, inputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Input)\r\n                .getValueByIndex(inputIndex)\r\n                .getValueByString(Weight)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getInputReflect = function (physicsSettingIndex, inputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Input)\r\n                .getValueByIndex(inputIndex)\r\n                .getValueByString(Reflect)\r\n                .toBoolean();\r\n        };\r\n        CubismPhysicsJson.prototype.getInputType = function (physicsSettingIndex, inputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Input)\r\n                .getValueByIndex(inputIndex)\r\n                .getValueByString(Type)\r\n                .getRawString();\r\n        };\r\n        CubismPhysicsJson.prototype.getInputSourceId = function (physicsSettingIndex, inputIndex) {\r\n            return CubismFramework.getIdManager().getId(this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Input)\r\n                .getValueByIndex(inputIndex)\r\n                .getValueByString(Source)\r\n                .getValueByString(Id)\r\n                .getRawString());\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputCount = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getVector()\r\n                .getSize();\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputVertexIndex = function (physicsSettingIndex, outputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(VertexIndex)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputAngleScale = function (physicsSettingIndex, outputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(Scale)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputWeight = function (physicsSettingIndex, outputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(Weight)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputDestinationId = function (physicsSettingIndex, outputIndex) {\r\n            return CubismFramework.getIdManager().getId(this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(Destination)\r\n                .getValueByString(Id)\r\n                .getRawString());\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputType = function (physicsSettingIndex, outputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(Type)\r\n                .getRawString();\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputReflect = function (physicsSettingIndex, outputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(Reflect)\r\n                .toBoolean();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticleCount = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getVector()\r\n                .getSize();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticleMobility = function (physicsSettingIndex, vertexIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Mobility)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticleDelay = function (physicsSettingIndex, vertexIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Delay)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticleAcceleration = function (physicsSettingIndex, vertexIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Acceleration)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticleRadius = function (physicsSettingIndex, vertexIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Radius)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticlePosition = function (physicsSettingIndex, vertexIndex) {\r\n            var ret = new CubismVector2(0, 0);\r\n            ret.x = this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Position)\r\n                .getValueByString(X)\r\n                .toFloat();\r\n            ret.y = this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Position)\r\n                .getValueByString(Y)\r\n                .toFloat();\r\n            return ret;\r\n        };\r\n        return CubismPhysicsJson;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsJson = CubismPhysicsJson;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/physics/cubismphysicsjson.ts\n");

/***/ }),

/***/ "../../../Framework/src/rendering/cubismrenderer.ts":
/*!************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/rendering/cubismrenderer.ts ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ \"../../../Framework/src/math/cubismmatrix44.ts\");\r\nvar CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismRenderer = (function () {\r\n        function CubismRenderer() {\r\n            this._isCulling = false;\r\n            this._isPremultipliedAlpha = false;\r\n            this._anisortopy = 0.0;\r\n            this._model = null;\r\n            this._modelColor = new CubismTextureColor();\r\n            this._mvpMatrix4x4 = new CubismMatrix44();\r\n            this._mvpMatrix4x4.loadIdentity();\r\n        }\r\n        CubismRenderer.create = function () {\r\n            return null;\r\n        };\r\n        CubismRenderer.delete = function (renderer) {\r\n            renderer = null;\r\n        };\r\n        CubismRenderer.prototype.initialize = function (model) {\r\n            this._model = model;\r\n        };\r\n        CubismRenderer.prototype.drawModel = function () {\r\n            if (this.getModel() == null)\r\n                return;\r\n            this.doDrawModel();\r\n        };\r\n        CubismRenderer.prototype.setMvpMatrix = function (matrix44) {\r\n            this._mvpMatrix4x4.setMatrix(matrix44.getArray());\r\n        };\r\n        CubismRenderer.prototype.getMvpMatrix = function () {\r\n            return this._mvpMatrix4x4;\r\n        };\r\n        CubismRenderer.prototype.setModelColor = function (red, green, blue, alpha) {\r\n            if (red < 0.0) {\r\n                red = 0.0;\r\n            }\r\n            else if (red > 1.0) {\r\n                red = 1.0;\r\n            }\r\n            if (green < 0.0) {\r\n                green = 0.0;\r\n            }\r\n            else if (green > 1.0) {\r\n                green = 1.0;\r\n            }\r\n            if (blue < 0.0) {\r\n                blue = 0.0;\r\n            }\r\n            else if (blue > 1.0) {\r\n                blue = 1.0;\r\n            }\r\n            if (alpha < 0.0) {\r\n                alpha = 0.0;\r\n            }\r\n            else if (alpha > 1.0) {\r\n                alpha = 1.0;\r\n            }\r\n            this._modelColor.R = red;\r\n            this._modelColor.G = green;\r\n            this._modelColor.B = blue;\r\n            this._modelColor.A = alpha;\r\n        };\r\n        CubismRenderer.prototype.getModelColor = function () {\r\n            return JSON.parse(JSON.stringify(this._modelColor));\r\n        };\r\n        CubismRenderer.prototype.setIsPremultipliedAlpha = function (enable) {\r\n            this._isPremultipliedAlpha = enable;\r\n        };\r\n        CubismRenderer.prototype.isPremultipliedAlpha = function () {\r\n            return this._isPremultipliedAlpha;\r\n        };\r\n        CubismRenderer.prototype.setIsCulling = function (culling) {\r\n            this._isCulling = culling;\r\n        };\r\n        CubismRenderer.prototype.isCulling = function () {\r\n            return this._isCulling;\r\n        };\r\n        CubismRenderer.prototype.setAnisotropy = function (n) {\r\n            this._anisortopy = n;\r\n        };\r\n        CubismRenderer.prototype.getAnisotropy = function () {\r\n            return this._anisortopy;\r\n        };\r\n        CubismRenderer.prototype.getModel = function () {\r\n            return this._model;\r\n        };\r\n        return CubismRenderer;\r\n    }());\r\n    Live2DCubismFramework.CubismRenderer = CubismRenderer;\r\n    var CubismBlendMode;\r\n    (function (CubismBlendMode) {\r\n        CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Normal\"] = 0] = \"CubismBlendMode_Normal\";\r\n        CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Additive\"] = 1] = \"CubismBlendMode_Additive\";\r\n        CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Multiplicative\"] = 2] = \"CubismBlendMode_Multiplicative\";\r\n    })(CubismBlendMode = Live2DCubismFramework.CubismBlendMode || (Live2DCubismFramework.CubismBlendMode = {}));\r\n    var CubismTextureColor = (function () {\r\n        function CubismTextureColor() {\r\n            this.R = 1.0;\r\n            this.G = 1.0;\r\n            this.B = 1.0;\r\n            this.A = 1.0;\r\n        }\r\n        return CubismTextureColor;\r\n    }());\r\n    Live2DCubismFramework.CubismTextureColor = CubismTextureColor;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy9yZW5kZXJpbmcvY3ViaXNtcmVuZGVyZXIudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vQzovVXNlcnMvbWlmYXMvRG9jdW1lbnRzL3JlZHNvZGEwMjEzLmdpdGh1Yi5pby9GcmFtZXdvcmsvc3JjL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlci50cz83YmNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1hdHJpeDQ0IH0gZnJvbSAnLi4vbWF0aC9jdWJpc21tYXRyaXg0NCc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcclxuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XHJcbmltcG9ydCBDdWJpc21NYXRyaXg0NCA9IGN1YmlzbW1hdHJpeDQ0LkN1YmlzbU1hdHJpeDQ0O1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIC8qKlxyXG4gICAqIOODouODh+ODq+aPj+eUu+OCkuWHpueQhuOBmeOCi+ODrOODs+ODgOODqVxyXG4gICAqXHJcbiAgICog44K144OW44Kv44Op44K544Gr55Kw5aKD5L6d5a2Y44Gu5o+P55S75ZG95Luk44KS6KiY6L+w44GZ44KL44CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEN1YmlzbVJlbmRlcmVyIHtcclxuICAgIC8qKlxyXG4gICAgICog44Os44Oz44OA44Op44Gu44Kk44Oz44K544K/44Oz44K544KS55Sf5oiQ44GX44Gm5Y+W5b6X44GZ44KLXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiDjg6zjg7Pjg4Djg6njga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTogQ3ViaXNtUmVuZGVyZXIge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODrOODs+ODgOODqeOBruOCpOODs+OCueOCv+ODs+OCueOCkuino+aUvuOBmeOCi1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZShyZW5kZXJlcjogQ3ViaXNtUmVuZGVyZXIpOiB2b2lkIHtcclxuICAgICAgcmVuZGVyZXIgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Os44Oz44OA44Op44Gu5Yid5pyf5YyW5Yem55CG44KS5a6f6KGM44GZ44KLXHJcbiAgICAgKiDlvJXmlbDjgavmuKHjgZfjgZ/jg6Ljg4fjg6vjgYvjgonjg6zjg7Pjg4Djg6njga7liJ3mnJ/ljJblh6bnkIbjgavlv4XopoHjgarmg4XloLHjgpLlj5bjgorlh7rjgZnjgZPjgajjgYzjgafjgY3jgotcclxuICAgICAqIEBwYXJhbSBtb2RlbCDjg6Ljg4fjg6vjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaXRpYWxpemUobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg4fjg6vjgpLmj4/nlLvjgZnjgotcclxuICAgICAqL1xyXG4gICAgcHVibGljIGRyYXdNb2RlbCgpOiB2b2lkIHtcclxuICAgICAgaWYgKHRoaXMuZ2V0TW9kZWwoKSA9PSBudWxsKSByZXR1cm47XHJcblxyXG4gICAgICB0aGlzLmRvRHJhd01vZGVsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiX44KS44K744OD44OI44GZ44KLXHJcbiAgICAgKiDphY3liJfjga/opIfoo73jgZXjgozjgovjga7jgafjgIHlhYPjga7phY3liJfjga/lpJbjgafnoLTmo4TjgZfjgaboia/jgYRcclxuICAgICAqIEBwYXJhbSBtYXRyaXg0NCBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiXXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRNdnBNYXRyaXgobWF0cml4NDQ6IEN1YmlzbU1hdHJpeDQ0KTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX212cE1hdHJpeDR4NC5zZXRNYXRyaXgobWF0cml4NDQuZ2V0QXJyYXkoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiX44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgKiBAcmV0dXJuIE1vZGVsLVZpZXctUHJvamVjdGlvbiDooYzliJdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldE12cE1hdHJpeCgpOiBDdWJpc21NYXRyaXg0NCB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9tdnBNYXRyaXg0eDQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg4fjg6vjga7oibLjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgICAqIOWQhOiJsjAuMH4xLjDjga7plpPjgafmjIflrprjgZnjgovvvIgxLjDjgYzmqJnmupbjga7nirbmhYvvvIlcclxuICAgICAqIEBwYXJhbSByZWQg6LWk44OB44Oj44Oz44ON44Or44Gu5YCkXHJcbiAgICAgKiBAcGFyYW0gZ3JlZW4g57eR44OB44Oj44Oz44ON44Or44Gu5YCkXHJcbiAgICAgKiBAcGFyYW0gYmx1ZSDpnZLjg4Hjg6Pjg7Pjg43jg6vjga7lgKRcclxuICAgICAqIEBwYXJhbSBhbHBoYSDOseODgeODo+ODs+ODjeODq+OBruWApFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0TW9kZWxDb2xvcihcclxuICAgICAgcmVkOiBudW1iZXIsXHJcbiAgICAgIGdyZWVuOiBudW1iZXIsXHJcbiAgICAgIGJsdWU6IG51bWJlcixcclxuICAgICAgYWxwaGE6IG51bWJlclxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgIGlmIChyZWQgPCAwLjApIHtcclxuICAgICAgICByZWQgPSAwLjA7XHJcbiAgICAgIH0gZWxzZSBpZiAocmVkID4gMS4wKSB7XHJcbiAgICAgICAgcmVkID0gMS4wO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZ3JlZW4gPCAwLjApIHtcclxuICAgICAgICBncmVlbiA9IDAuMDtcclxuICAgICAgfSBlbHNlIGlmIChncmVlbiA+IDEuMCkge1xyXG4gICAgICAgIGdyZWVuID0gMS4wO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoYmx1ZSA8IDAuMCkge1xyXG4gICAgICAgIGJsdWUgPSAwLjA7XHJcbiAgICAgIH0gZWxzZSBpZiAoYmx1ZSA+IDEuMCkge1xyXG4gICAgICAgIGJsdWUgPSAxLjA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChhbHBoYSA8IDAuMCkge1xyXG4gICAgICAgIGFscGhhID0gMC4wO1xyXG4gICAgICB9IGVsc2UgaWYgKGFscGhhID4gMS4wKSB7XHJcbiAgICAgICAgYWxwaGEgPSAxLjA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX21vZGVsQ29sb3IuUiA9IHJlZDtcclxuICAgICAgdGhpcy5fbW9kZWxDb2xvci5HID0gZ3JlZW47XHJcbiAgICAgIHRoaXMuX21vZGVsQ29sb3IuQiA9IGJsdWU7XHJcbiAgICAgIHRoaXMuX21vZGVsQ29sb3IuQSA9IGFscGhhO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Oi44OH44Or44Gu6Imy44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgKiDlkIToibIwLjB+MS4w44Gu6ZaT44Gn5oyH5a6a44GZ44KLKDEuMOOBjOaomea6luOBrueKtuaFiylcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIFJHQkHjga7jgqvjg6njg7zmg4XloLFcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldE1vZGVsQ29sb3IoKTogQ3ViaXNtVGV4dHVyZUNvbG9yIHtcclxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fbW9kZWxDb2xvcikpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LmX566X5riI44G/zrHjga7mnInlirnjg7vnhKHlirnjgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgICAqIOacieWKueOBq+OBmeOCi+OBquOCiXRydWXjgIHnhKHlirnjgavjgZnjgovjgarjgolmYWxzZeOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0SXNQcmVtdWx0aXBsaWVkQWxwaGEoZW5hYmxlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX2lzUHJlbXVsdGlwbGllZEFscGhhID0gZW5hYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LmX566X5riI44G/zrHjga7mnInlirnjg7vnhKHlirnjgpLlj5blvpfjgZnjgotcclxuICAgICAqIEByZXR1cm4gdHJ1ZSDkuZfnrpfmuIjjgb/jga7OseacieWKuVxyXG4gICAgICogQHJldHVybiBmYWxzZSDkuZfnrpfmuIjjgb/jga7OseeEoeWKuVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNQcmVtdWx0aXBsaWVkQWxwaGEoKTogYm9vbGVhbiB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9pc1ByZW11bHRpcGxpZWRBbHBoYTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOOCq+ODquODs+OCsO+8iOeJh+mdouaPj+eUu++8ieOBruacieWKueODu+eEoeWKueOCkuOCu+ODg+ODiOOBmeOCi+OAglxyXG4gICAgICog5pyJ5Yq544Gr44GZ44KL44Gq44KJdHJ1ZeOAgeeEoeWKueOBq+OBmeOCi+OBquOCiWZhbHNl44KS44K744OD44OI44GZ44KLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRJc0N1bGxpbmcoY3VsbGluZzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICB0aGlzLl9pc0N1bGxpbmcgPSBjdWxsaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Kr44Oq44Oz44Kw77yI54mH6Z2i5o+P55S777yJ44Gu5pyJ5Yq544O754Sh5Yq544KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICAgKiBAcmV0dXJuIHRydWUg44Kr44Oq44Oz44Kw5pyJ5Yq5XHJcbiAgICAgKiBAcmV0dXJuIGZhbHNlIOOCq+ODquODs+OCsOeEoeWKuVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNDdWxsaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5faXNDdWxsaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OG44Kv44K544OB44Oj44Gu55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/44KS44K744OD44OI44GZ44KLXHJcbiAgICAgKiDjg5Hjg6njg6Hjg7zjgr/lgKTjga7lvbHpn7/luqbjga/jg6zjg7Pjg4Djg6njga7lrp/oo4Xjgavkvp3lrZjjgZnjgotcclxuICAgICAqIEBwYXJhbSBuIOODkeODqeODoeODvOOCv+OBruWApFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0QW5pc290cm9weShuOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgdGhpcy5fYW5pc29ydG9weSA9IG47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg4bjgq/jgrnjg4Hjg6Pjga7nlbDmlrnmgKfjg5XjgqPjg6vjgr/jg6rjg7PjgrDjga7jg5Hjg6njg6Hjg7zjgr/jgpLjgrvjg4Pjg4jjgZnjgotcclxuICAgICAqIEByZXR1cm4g55Ww5pa55oCn44OV44Kj44Or44K/44Oq44Oz44Kw44Gu44OR44Op44Oh44O844K/XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRBbmlzb3Ryb3B5KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9hbmlzb3J0b3B5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Os44Oz44OA44Oq44Oz44Kw44GZ44KL44Oi44OH44Or44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgKiBAcmV0dXJuIOODrOODs+ODgOODquODs+OCsOOBmeOCi+ODouODh+ODq1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TW9kZWwoKTogQ3ViaXNtTW9kZWwge1xyXG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICB0aGlzLl9pc0N1bGxpbmcgPSBmYWxzZTtcclxuICAgICAgdGhpcy5faXNQcmVtdWx0aXBsaWVkQWxwaGEgPSBmYWxzZTtcclxuICAgICAgdGhpcy5fYW5pc29ydG9weSA9IDAuMDtcclxuICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xyXG4gICAgICB0aGlzLl9tb2RlbENvbG9yID0gbmV3IEN1YmlzbVRleHR1cmVDb2xvcigpO1xyXG5cclxuICAgICAgLy8g5Y2Y5L2N6KGM5YiX44Gr5Yid5pyf5YyWXHJcbiAgICAgIHRoaXMuX212cE1hdHJpeDR4NCA9IG5ldyBDdWJpc21NYXRyaXg0NCgpO1xyXG4gICAgICB0aGlzLl9tdnBNYXRyaXg0eDQubG9hZElkZW50aXR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg4fjg6vmj4/nlLvjga7lrp/oo4VcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IGRvRHJhd01vZGVsKCk6IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmj4/nlLvjgqrjg5bjgrjjgqfjgq/jg4jvvIjjgqLjg7zjg4jjg6Hjg4Pjgrfjg6XvvInjgpLmj4/nlLvjgZnjgotcclxuICAgICAqIOODneODquOCtOODs+ODoeODg+OCt+ODpeOBqOODhuOCr+OCueODgeODo+eVquWPt+OCkuOCu+ODg+ODiOOBp+a4oeOBmeOAglxyXG4gICAgICogQHBhcmFtIHRleHR1cmVObyDmj4/nlLvjgZnjgovjg4bjgq/jgrnjg4Hjg6Pnlarlj7dcclxuICAgICAqIEBwYXJhbSBpbmRleENvdW50IOaPj+eUu+OCquODluOCuOOCp+OCr+ODiOOBruOCpOODs+ODh+ODg+OCr+OCueWApFxyXG4gICAgICogQHBhcmFtIHZlcnRleENvdW50IOODneODquOCtOODs+ODoeODg+OCt+ODpeOBrumggueCueaVsFxyXG4gICAgICogQHBhcmFtIGluZGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol6aCC54K544Gu44Kk44Oz44OH44OD44Kv44K56YWN5YiXXHJcbiAgICAgKiBAcGFyYW0gdmVydGV4QXJyYXkg44Od44Oq44K044Oz44Oh44OD44K344Ol44Gu6aCC54K56YWN5YiXXHJcbiAgICAgKiBAcGFyYW0gdXZBcnJheSB1dumFjeWIl1xyXG4gICAgICogQHBhcmFtIG9wYWNpdHkg5LiN6YCP5piO5bqmXHJcbiAgICAgKiBAcGFyYW0gY29sb3JCbGVuZE1vZGUg44Kr44Op44O844OW44Os44Oz44OH44Kj44Oz44Kw44Gu44K/44Kk44OXXHJcbiAgICAgKiBAcGFyYW0gaW52ZXJ0ZWRNYXNrIOODnuOCueOCr+S9v+eUqOaZguOBruODnuOCueOCr+OBruWPjei7ouS9v+eUqFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgZHJhd01lc2goXHJcbiAgICAgIHRleHR1cmVObzogbnVtYmVyLFxyXG4gICAgICBpbmRleENvdW50OiBudW1iZXIsXHJcbiAgICAgIHZlcnRleENvdW50OiBudW1iZXIsXHJcbiAgICAgIGluZGV4QXJyYXk6IFVpbnQxNkFycmF5LFxyXG4gICAgICB2ZXJ0ZXhBcnJheTogRmxvYXQzMkFycmF5LFxyXG4gICAgICB1dkFycmF5OiBGbG9hdDMyQXJyYXksXHJcbiAgICAgIG9wYWNpdHk6IG51bWJlcixcclxuICAgICAgY29sb3JCbGVuZE1vZGU6IEN1YmlzbUJsZW5kTW9kZSxcclxuICAgICAgaW52ZXJ0ZWRNYXNrOiBib29sZWFuXHJcbiAgICApOiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Os44Oz44OA44Op44GM5L+d5oyB44GZ44KL6Z2Z55qE44Gq44Oq44K944O844K544KS6ZaL5pS+44GZ44KLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgc3RhdGljUmVsZWFzZTogRnVuY3Rpb247XHJcblxyXG4gICAgcHJvdGVjdGVkIF9tdnBNYXRyaXg0eDQ6IEN1YmlzbU1hdHJpeDQ0OyAvLyBNb2RlbC1WaWV3LVByb2plY3Rpb24g6KGM5YiXXHJcbiAgICBwcm90ZWN0ZWQgX21vZGVsQ29sb3I6IEN1YmlzbVRleHR1cmVDb2xvcjsgLy8g44Oi44OH44Or6Ieq5L2T44Gu44Kr44Op44O877yIUkdCQe+8iVxyXG4gICAgcHJvdGVjdGVkIF9pc0N1bGxpbmc6IGJvb2xlYW47IC8vIOOCq+ODquODs+OCsOOBjOacieWKueOBquOCiXRydWVcclxuICAgIHByb3RlY3RlZCBfaXNQcmVtdWx0aXBsaWVkQWxwaGE6IGJvb2xlYW47IC8vIOS5l+eul+a4iOOBv86x44Gq44KJdHJ1ZVxyXG4gICAgcHJvdGVjdGVkIF9hbmlzb3J0b3B5OiBhbnk7IC8vIOODhuOCr+OCueODgeODo+OBrueVsOaWueaAp+ODleOCo+ODq+OCv+ODquODs+OCsOOBruODkeODqeODoeODvOOCv1xyXG4gICAgcHJvdGVjdGVkIF9tb2RlbDogQ3ViaXNtTW9kZWw7IC8vIOODrOODs+ODgOODquODs+OCsOWvvuixoeOBruODouODh+ODq1xyXG4gIH1cclxuXHJcbiAgZXhwb3J0IGVudW0gQ3ViaXNtQmxlbmRNb2RlIHtcclxuICAgIEN1YmlzbUJsZW5kTW9kZV9Ob3JtYWwgPSAwLCAvLyDpgJrluLhcclxuICAgIEN1YmlzbUJsZW5kTW9kZV9BZGRpdGl2ZSA9IDEsIC8vIOWKoOeul1xyXG4gICAgQ3ViaXNtQmxlbmRNb2RlX011bHRpcGxpY2F0aXZlID0gMiAvLyDkuZfnrpdcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODhuOCr+OCueODgeODo+OBruiJsuOCklJHQkHjgafmibHjgYbjgZ/jgoHjga7jgq/jg6njgrlcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtVGV4dHVyZUNvbG9yIHtcclxuICAgIC8qKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICB0aGlzLlIgPSAxLjA7XHJcbiAgICAgIHRoaXMuRyA9IDEuMDtcclxuICAgICAgdGhpcy5CID0gMS4wO1xyXG4gICAgICB0aGlzLkEgPSAxLjA7XHJcbiAgICB9XHJcblxyXG4gICAgUjogbnVtYmVyOyAvLyDotaTjg4Hjg6Pjg7Pjg43jg6tcclxuICAgIEc6IG51bWJlcjsgLy8g57eR44OB44Oj44Oz44ON44OrXHJcbiAgICBCOiBudW1iZXI7IC8vIOmdkuODgeODo+ODs+ODjeODq1xyXG4gICAgQTogbnVtYmVyOyAvLyDOseODgeODo+ODs+ODjeODq1xyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7O0FBT0E7QUFHQTtBQUVBO0FBQUE7QUFNQTtBQXdLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUE1S0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQVVBO0FBTUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQTBEQTtBQUFBO0FBN05BO0FBK05BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFBQTtBQWZBO0FBZ0JBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../Framework/src/rendering/cubismrenderer.ts\n");

/***/ }),

/***/ "../../../Framework/src/rendering/cubismrenderer_webgl.ts":
/*!******************************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/rendering/cubismrenderer_webgl.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar csmrectf_1 = __webpack_require__(/*! ../type/csmrectf */ \"../../../Framework/src/type/csmrectf.ts\");\r\nvar cubismrenderer_1 = __webpack_require__(/*! ./cubismrenderer */ \"../../../Framework/src/rendering/cubismrenderer.ts\");\r\nvar cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ \"../../../Framework/src/math/cubismmatrix44.ts\");\r\nvar csmmap_1 = __webpack_require__(/*! ../type/csmmap */ \"../../../Framework/src/type/csmmap.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"../../../Framework/src/utils/cubismdebug.ts\");\r\nvar Constant = live2dcubismframework_1.Live2DCubismFramework.Constant;\r\nvar CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar csmRect = csmrectf_1.Live2DCubismFramework.csmRect;\r\nvar csmMap = csmmap_1.Live2DCubismFramework.csmMap;\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismRenderer = cubismrenderer_1.Live2DCubismFramework.CubismRenderer;\r\nvar CubismBlendMode = cubismrenderer_1.Live2DCubismFramework.CubismBlendMode;\r\nvar CubismTextureColor = cubismrenderer_1.Live2DCubismFramework.CubismTextureColor;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var ColorChannelCount = 4;\r\n    var shaderCount = 10;\r\n    var s_instance;\r\n    var s_viewport;\r\n    var s_fbo;\r\n    var CubismClippingManager_WebGL = (function () {\r\n        function CubismClippingManager_WebGL() {\r\n            this._maskRenderTexture = null;\r\n            this._colorBuffer = null;\r\n            this._currentFrameNo = 0;\r\n            this._clippingMaskBufferSize = 256;\r\n            this._clippingContextListForMask = new csmVector();\r\n            this._clippingContextListForDraw = new csmVector();\r\n            this._channelColors = new csmVector();\r\n            this._tmpBoundsOnModel = new csmRect();\r\n            this._tmpMatrix = new CubismMatrix44();\r\n            this._tmpMatrixForMask = new CubismMatrix44();\r\n            this._tmpMatrixForDraw = new CubismMatrix44();\r\n            this._maskTexture = null;\r\n            var tmp = new CubismTextureColor();\r\n            tmp.R = 1.0;\r\n            tmp.G = 0.0;\r\n            tmp.B = 0.0;\r\n            tmp.A = 0.0;\r\n            this._channelColors.pushBack(tmp);\r\n            tmp = new CubismTextureColor();\r\n            tmp.R = 0.0;\r\n            tmp.G = 1.0;\r\n            tmp.B = 0.0;\r\n            tmp.A = 0.0;\r\n            this._channelColors.pushBack(tmp);\r\n            tmp = new CubismTextureColor();\r\n            tmp.R = 0.0;\r\n            tmp.G = 0.0;\r\n            tmp.B = 1.0;\r\n            tmp.A = 0.0;\r\n            this._channelColors.pushBack(tmp);\r\n            tmp = new CubismTextureColor();\r\n            tmp.R = 0.0;\r\n            tmp.G = 0.0;\r\n            tmp.B = 0.0;\r\n            tmp.A = 1.0;\r\n            this._channelColors.pushBack(tmp);\r\n        }\r\n        CubismClippingManager_WebGL.prototype.getChannelFlagAsColor = function (channelNo) {\r\n            return this._channelColors.at(channelNo);\r\n        };\r\n        CubismClippingManager_WebGL.prototype.getMaskRenderTexture = function () {\r\n            var ret = 0;\r\n            if (this._maskTexture && this._maskTexture.texture != 0) {\r\n                this._maskTexture.frameNo = this._currentFrameNo;\r\n                ret = this._maskTexture.texture;\r\n            }\r\n            if (ret == 0) {\r\n                var size = this._clippingMaskBufferSize;\r\n                this._colorBuffer = this.gl.createTexture();\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);\r\n                this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, null);\r\n                ret = this.gl.createFramebuffer();\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);\r\n                this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._colorBuffer, 0);\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\r\n                this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, ret);\r\n            }\r\n            return ret;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.setGL = function (gl) {\r\n            this.gl = gl;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.calcClippedDrawTotalBounds = function (model, clippingContext) {\r\n            var clippedDrawTotalMinX = Number.MAX_VALUE;\r\n            var clippedDrawTotalMinY = Number.MAX_VALUE;\r\n            var clippedDrawTotalMaxX = Number.MIN_VALUE;\r\n            var clippedDrawTotalMaxY = Number.MIN_VALUE;\r\n            var clippedDrawCount = clippingContext._clippedDrawableIndexList.length;\r\n            for (var clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {\r\n                var drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\r\n                var drawableVertexCount = model.getDrawableVertexCount(drawableIndex);\r\n                var drawableVertexes = model.getDrawableVertices(drawableIndex);\r\n                var minX = Number.MAX_VALUE;\r\n                var minY = Number.MAX_VALUE;\r\n                var maxX = Number.MIN_VALUE;\r\n                var maxY = Number.MIN_VALUE;\r\n                var loop = drawableVertexCount * Constant.vertexStep;\r\n                for (var pi = Constant.vertexOffset; pi < loop; pi += Constant.vertexStep) {\r\n                    var x = drawableVertexes[pi];\r\n                    var y = drawableVertexes[pi + 1];\r\n                    if (x < minX) {\r\n                        minX = x;\r\n                    }\r\n                    if (x > maxX) {\r\n                        maxX = x;\r\n                    }\r\n                    if (y < minY) {\r\n                        minY = y;\r\n                    }\r\n                    if (y > maxY) {\r\n                        maxY = y;\r\n                    }\r\n                }\r\n                if (minX == Number.MAX_VALUE) {\r\n                    continue;\r\n                }\r\n                if (minX < clippedDrawTotalMinX) {\r\n                    clippedDrawTotalMinX = minX;\r\n                }\r\n                if (minY < clippedDrawTotalMinY) {\r\n                    clippedDrawTotalMinY = minY;\r\n                }\r\n                if (maxX > clippedDrawTotalMaxX) {\r\n                    clippedDrawTotalMaxX = maxX;\r\n                }\r\n                if (maxY > clippedDrawTotalMaxY) {\r\n                    clippedDrawTotalMaxY = maxY;\r\n                }\r\n                if (clippedDrawTotalMinX == Number.MAX_VALUE) {\r\n                    clippingContext._allClippedDrawRect.x = 0.0;\r\n                    clippingContext._allClippedDrawRect.y = 0.0;\r\n                    clippingContext._allClippedDrawRect.width = 0.0;\r\n                    clippingContext._allClippedDrawRect.height = 0.0;\r\n                    clippingContext._isUsing = false;\r\n                }\r\n                else {\r\n                    clippingContext._isUsing = true;\r\n                    var w = clippedDrawTotalMaxX - clippedDrawTotalMinX;\r\n                    var h = clippedDrawTotalMaxY - clippedDrawTotalMinY;\r\n                    clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\r\n                    clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\r\n                    clippingContext._allClippedDrawRect.width = w;\r\n                    clippingContext._allClippedDrawRect.height = h;\r\n                }\r\n            }\r\n        };\r\n        CubismClippingManager_WebGL.prototype.release = function () {\r\n            for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {\r\n                if (this._clippingContextListForMask.at(i)) {\r\n                    this._clippingContextListForMask.at(i).release();\r\n                    this._clippingContextListForMask.set(i, void 0);\r\n                }\r\n                this._clippingContextListForMask.set(i, null);\r\n            }\r\n            this._clippingContextListForMask = null;\r\n            for (var i = 0; i < this._clippingContextListForDraw.getSize(); i++) {\r\n                this._clippingContextListForDraw.set(i, null);\r\n            }\r\n            this._clippingContextListForDraw = null;\r\n            if (this._maskTexture) {\r\n                this.gl.deleteFramebuffer(this._maskTexture.texture);\r\n                this._maskTexture = null;\r\n            }\r\n            for (var i = 0; i < this._channelColors.getSize(); i++) {\r\n                this._channelColors.set(i, null);\r\n            }\r\n            this._channelColors = null;\r\n            this.gl.deleteTexture(this._colorBuffer);\r\n            this._colorBuffer = null;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.initialize = function (model, drawableCount, drawableMasks, drawableMaskCounts) {\r\n            for (var i = 0; i < drawableCount; i++) {\r\n                if (drawableMaskCounts[i] <= 0) {\r\n                    this._clippingContextListForDraw.pushBack(null);\r\n                    continue;\r\n                }\r\n                var clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);\r\n                if (clippingContext == null) {\r\n                    clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);\r\n                    this._clippingContextListForMask.pushBack(clippingContext);\r\n                }\r\n                clippingContext.addClippedDrawable(i);\r\n                this._clippingContextListForDraw.pushBack(clippingContext);\r\n            }\r\n        };\r\n        CubismClippingManager_WebGL.prototype.setupClippingContext = function (model, renderer) {\r\n            this._currentFrameNo++;\r\n            var usingClipCount = 0;\r\n            for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {\r\n                var cc = this._clippingContextListForMask.at(clipIndex);\r\n                this.calcClippedDrawTotalBounds(model, cc);\r\n                if (cc._isUsing) {\r\n                    usingClipCount++;\r\n                }\r\n            }\r\n            if (usingClipCount > 0) {\r\n                this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);\r\n                this._maskRenderTexture = this.getMaskRenderTexture();\r\n                var modelToWorldF = renderer.getMvpMatrix();\r\n                renderer.preDraw();\r\n                this.setupLayoutBounds(usingClipCount);\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);\r\n                this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n                this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n                for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {\r\n                    var clipContext = this._clippingContextListForMask.at(clipIndex);\r\n                    var allClipedDrawRect = clipContext._allClippedDrawRect;\r\n                    var layoutBoundsOnTex01 = clipContext._layoutBounds;\r\n                    var MARGIN = 0.05;\r\n                    this._tmpBoundsOnModel.setRect(allClipedDrawRect);\r\n                    this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);\r\n                    var scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\r\n                    var scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\r\n                    {\r\n                        this._tmpMatrix.loadIdentity();\r\n                        {\r\n                            this._tmpMatrix.translateRelative(-1.0, -1.0);\r\n                            this._tmpMatrix.scaleRelative(2.0, 2.0);\r\n                        }\r\n                        {\r\n                            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\r\n                            this._tmpMatrix.scaleRelative(scaleX, scaleY);\r\n                            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\r\n                        }\r\n                        this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\r\n                    }\r\n                    {\r\n                        this._tmpMatrix.loadIdentity();\r\n                        {\r\n                            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\r\n                            this._tmpMatrix.scaleRelative(scaleX, scaleY);\r\n                            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\r\n                        }\r\n                        this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\r\n                    }\r\n                    clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\r\n                    clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\r\n                    var clipDrawCount = clipContext._clippingIdCount;\r\n                    for (var i = 0; i < clipDrawCount; i++) {\r\n                        var clipDrawIndex = clipContext._clippingIdList[i];\r\n                        if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {\r\n                            continue;\r\n                        }\r\n                        renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);\r\n                        renderer.setClippingContextBufferForMask(clipContext);\r\n                        renderer.drawMesh(model.getDrawableTextureIndices(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), CubismBlendMode.CubismBlendMode_Normal, false);\r\n                    }\r\n                }\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\r\n                renderer.setClippingContextBufferForMask(null);\r\n                this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);\r\n            }\r\n        };\r\n        CubismClippingManager_WebGL.prototype.findSameClip = function (drawableMasks, drawableMaskCounts) {\r\n            for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {\r\n                var clippingContext = this._clippingContextListForMask.at(i);\r\n                var count = clippingContext._clippingIdCount;\r\n                if (count != drawableMaskCounts) {\r\n                    continue;\r\n                }\r\n                var sameCount = 0;\r\n                for (var j = 0; j < count; j++) {\r\n                    var clipId = clippingContext._clippingIdList[j];\r\n                    for (var k = 0; k < count; k++) {\r\n                        if (drawableMasks[k] == clipId) {\r\n                            sameCount++;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (sameCount == count) {\r\n                    return clippingContext;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.setupLayoutBounds = function (usingClipCount) {\r\n            var div = usingClipCount / ColorChannelCount;\r\n            var mod = usingClipCount % ColorChannelCount;\r\n            div = ~~div;\r\n            mod = ~~mod;\r\n            var curClipIndex = 0;\r\n            for (var channelNo = 0; channelNo < ColorChannelCount; channelNo++) {\r\n                var layoutCount = div + (channelNo < mod ? 1 : 0);\r\n                if (layoutCount == 0) {\r\n                }\r\n                else if (layoutCount == 1) {\r\n                    var clipContext = this._clippingContextListForMask.at(curClipIndex++);\r\n                    clipContext._layoutChannelNo = channelNo;\r\n                    clipContext._layoutBounds.x = 0.0;\r\n                    clipContext._layoutBounds.y = 0.0;\r\n                    clipContext._layoutBounds.width = 1.0;\r\n                    clipContext._layoutBounds.height = 1.0;\r\n                }\r\n                else if (layoutCount == 2) {\r\n                    for (var i = 0; i < layoutCount; i++) {\r\n                        var xpos = i % 2;\r\n                        xpos = ~~xpos;\r\n                        var cc = this._clippingContextListForMask.at(curClipIndex++);\r\n                        cc._layoutChannelNo = channelNo;\r\n                        cc._layoutBounds.x = xpos * 0.5;\r\n                        cc._layoutBounds.y = 0.0;\r\n                        cc._layoutBounds.width = 0.5;\r\n                        cc._layoutBounds.height = 1.0;\r\n                    }\r\n                }\r\n                else if (layoutCount <= 4) {\r\n                    for (var i = 0; i < layoutCount; i++) {\r\n                        var xpos = i % 2;\r\n                        var ypos = i / 2;\r\n                        xpos = ~~xpos;\r\n                        ypos = ~~ypos;\r\n                        var cc = this._clippingContextListForMask.at(curClipIndex++);\r\n                        cc._layoutChannelNo = channelNo;\r\n                        cc._layoutBounds.x = xpos * 0.5;\r\n                        cc._layoutBounds.y = ypos * 0.5;\r\n                        cc._layoutBounds.width = 0.5;\r\n                        cc._layoutBounds.height = 0.5;\r\n                    }\r\n                }\r\n                else if (layoutCount <= 9) {\r\n                    for (var i = 0; i < layoutCount; i++) {\r\n                        var xpos = i % 3;\r\n                        var ypos = i / 3;\r\n                        xpos = ~~xpos;\r\n                        ypos = ~~ypos;\r\n                        var cc = this._clippingContextListForMask.at(curClipIndex++);\r\n                        cc._layoutChannelNo = channelNo;\r\n                        cc._layoutBounds.x = xpos / 3.0;\r\n                        cc._layoutBounds.y = ypos / 3.0;\r\n                        cc._layoutBounds.width = 1.0 / 3.0;\r\n                        cc._layoutBounds.height = 1.0 / 3.0;\r\n                    }\r\n                }\r\n                else {\r\n                    cubismdebug_1.CubismLogError('not supported mask count : {0}', layoutCount);\r\n                }\r\n            }\r\n        };\r\n        CubismClippingManager_WebGL.prototype.getColorBuffer = function () {\r\n            return this._colorBuffer;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.getClippingContextListForDraw = function () {\r\n            return this._clippingContextListForDraw;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.setClippingMaskBufferSize = function (size) {\r\n            this._clippingMaskBufferSize = size;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.getClippingMaskBufferSize = function () {\r\n            return this._clippingMaskBufferSize;\r\n        };\r\n        return CubismClippingManager_WebGL;\r\n    }());\r\n    Live2DCubismFramework.CubismClippingManager_WebGL = CubismClippingManager_WebGL;\r\n    var CubismRenderTextureResource = (function () {\r\n        function CubismRenderTextureResource(frameNo, texture) {\r\n            this.frameNo = frameNo;\r\n            this.texture = texture;\r\n        }\r\n        return CubismRenderTextureResource;\r\n    }());\r\n    Live2DCubismFramework.CubismRenderTextureResource = CubismRenderTextureResource;\r\n    var CubismClippingContext = (function () {\r\n        function CubismClippingContext(manager, clippingDrawableIndices, clipCount) {\r\n            this._owner = manager;\r\n            this._clippingIdList = clippingDrawableIndices;\r\n            this._clippingIdCount = clipCount;\r\n            this._allClippedDrawRect = new csmRect();\r\n            this._layoutBounds = new csmRect();\r\n            this._clippedDrawableIndexList = [];\r\n            this._matrixForMask = new CubismMatrix44();\r\n            this._matrixForDraw = new CubismMatrix44();\r\n        }\r\n        CubismClippingContext.prototype.release = function () {\r\n            if (this._layoutBounds != null) {\r\n                this._layoutBounds = null;\r\n            }\r\n            if (this._allClippedDrawRect != null) {\r\n                this._allClippedDrawRect = null;\r\n            }\r\n            if (this._clippedDrawableIndexList != null) {\r\n                this._clippedDrawableIndexList = null;\r\n            }\r\n        };\r\n        CubismClippingContext.prototype.addClippedDrawable = function (drawableIndex) {\r\n            this._clippedDrawableIndexList.push(drawableIndex);\r\n        };\r\n        CubismClippingContext.prototype.getClippingManager = function () {\r\n            return this._owner;\r\n        };\r\n        CubismClippingContext.prototype.setGl = function (gl) {\r\n            this._owner.setGL(gl);\r\n        };\r\n        return CubismClippingContext;\r\n    }());\r\n    Live2DCubismFramework.CubismClippingContext = CubismClippingContext;\r\n    var CubismShader_WebGL = (function () {\r\n        function CubismShader_WebGL() {\r\n            this._shaderSets = new csmVector();\r\n        }\r\n        CubismShader_WebGL.getInstance = function () {\r\n            if (s_instance == null) {\r\n                s_instance = new CubismShader_WebGL();\r\n                return s_instance;\r\n            }\r\n            return s_instance;\r\n        };\r\n        CubismShader_WebGL.deleteInstance = function () {\r\n            if (s_instance) {\r\n                s_instance.release();\r\n                s_instance = null;\r\n            }\r\n        };\r\n        CubismShader_WebGL.prototype.release = function () {\r\n            this.releaseShaderProgram();\r\n        };\r\n        CubismShader_WebGL.prototype.setupShaderProgram = function (renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, isPremultipliedAlpha, matrix4x4, invertedMask) {\r\n            if (!isPremultipliedAlpha) {\r\n                cubismdebug_1.CubismLogError('NoPremultipliedAlpha is not allowed');\r\n            }\r\n            if (this._shaderSets.getSize() == 0) {\r\n                this.generateShaders();\r\n            }\r\n            var SRC_COLOR;\r\n            var DST_COLOR;\r\n            var SRC_ALPHA;\r\n            var DST_ALPHA;\r\n            if (renderer.getClippingContextBufferForMask() != null) {\r\n                var shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_SetupMask);\r\n                this.gl.useProgram(shaderSet.shaderProgram);\r\n                this.gl.activeTexture(this.gl.TEXTURE0);\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n                this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n                if (bufferData.vertex == null) {\r\n                    bufferData.vertex = this.gl.createBuffer();\r\n                }\r\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\r\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\r\n                this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n                this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n                if (bufferData.uv == null) {\r\n                    bufferData.uv = this.gl.createBuffer();\r\n                }\r\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\r\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n                this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n                this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n                var channelNo = renderer.getClippingContextBufferForMask()\r\n                    ._layoutChannelNo;\r\n                var colorChannel = renderer\r\n                    .getClippingContextBufferForMask()\r\n                    .getClippingManager()\r\n                    .getChannelFlagAsColor(channelNo);\r\n                this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\r\n                this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForMask()._matrixForMask.getArray());\r\n                var rect = renderer.getClippingContextBufferForMask()\r\n                    ._layoutBounds;\r\n                this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2.0 - 1.0, rect.y * 2.0 - 1.0, rect.getRight() * 2.0 - 1.0, rect.getBottom() * 2.0 - 1.0);\r\n                SRC_COLOR = this.gl.ZERO;\r\n                DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;\r\n                SRC_ALPHA = this.gl.ZERO;\r\n                DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\r\n            }\r\n            else {\r\n                var masked = renderer.getClippingContextBufferForDraw() != null;\r\n                var offset = masked ? (invertedMask ? 2 : 1) : 0;\r\n                var shaderSet = new CubismShaderSet();\r\n                switch (colorBlendMode) {\r\n                    case CubismBlendMode.CubismBlendMode_Normal:\r\n                    default:\r\n                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset);\r\n                        SRC_COLOR = this.gl.ONE;\r\n                        DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\r\n                        SRC_ALPHA = this.gl.ONE;\r\n                        DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\r\n                        break;\r\n                    case CubismBlendMode.CubismBlendMode_Additive:\r\n                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_AddPremultipliedAlpha + offset);\r\n                        SRC_COLOR = this.gl.ONE;\r\n                        DST_COLOR = this.gl.ONE;\r\n                        SRC_ALPHA = this.gl.ZERO;\r\n                        DST_ALPHA = this.gl.ONE;\r\n                        break;\r\n                    case CubismBlendMode.CubismBlendMode_Multiplicative:\r\n                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_MultPremultipliedAlpha + offset);\r\n                        SRC_COLOR = this.gl.DST_COLOR;\r\n                        DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\r\n                        SRC_ALPHA = this.gl.ZERO;\r\n                        DST_ALPHA = this.gl.ONE;\r\n                        break;\r\n                }\r\n                this.gl.useProgram(shaderSet.shaderProgram);\r\n                if (bufferData.vertex == null) {\r\n                    bufferData.vertex = this.gl.createBuffer();\r\n                }\r\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\r\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\r\n                this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n                this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n                if (bufferData.uv == null) {\r\n                    bufferData.uv = this.gl.createBuffer();\r\n                }\r\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\r\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n                this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n                this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n                if (masked) {\r\n                    this.gl.activeTexture(this.gl.TEXTURE1);\r\n                    var tex = renderer\r\n                        .getClippingContextBufferForDraw()\r\n                        .getClippingManager()\r\n                        .getColorBuffer();\r\n                    this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\r\n                    this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\r\n                    this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray());\r\n                    var channelNo = renderer.getClippingContextBufferForDraw()\r\n                        ._layoutChannelNo;\r\n                    var colorChannel = renderer\r\n                        .getClippingContextBufferForDraw()\r\n                        .getClippingManager()\r\n                        .getChannelFlagAsColor(channelNo);\r\n                    this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\r\n                }\r\n                this.gl.activeTexture(this.gl.TEXTURE0);\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n                this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n                this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());\r\n                this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);\r\n            }\r\n            if (bufferData.index == null) {\r\n                bufferData.index = this.gl.createBuffer();\r\n            }\r\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);\r\n            this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);\r\n            this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);\r\n        };\r\n        CubismShader_WebGL.prototype.releaseShaderProgram = function () {\r\n            for (var i = 0; i < this._shaderSets.getSize(); i++) {\r\n                this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);\r\n                this._shaderSets.at(i).shaderProgram = 0;\r\n                this._shaderSets.set(i, void 0);\r\n                this._shaderSets.set(i, null);\r\n            }\r\n        };\r\n        CubismShader_WebGL.prototype.generateShaders = function () {\r\n            for (var i = 0; i < shaderCount; i++) {\r\n                this._shaderSets.pushBack(new CubismShaderSet());\r\n            }\r\n            this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcSetupMask, Live2DCubismFramework.fragmentShaderSrcsetupMask);\r\n            this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrc, Live2DCubismFramework.fragmentShaderSrcPremultipliedAlpha);\r\n            this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcMasked, Live2DCubismFramework.fragmentShaderSrcMaskPremultipliedAlpha);\r\n            this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcMasked, Live2DCubismFramework.fragmentShaderSrcMaskInvertedPremultipliedAlpha);\r\n            this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;\r\n            this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;\r\n            this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;\r\n            this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;\r\n            this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;\r\n            this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;\r\n            this._shaderSets.at(0).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_position');\r\n            this._shaderSets.at(0).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(0).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(0).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(0).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(1).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_position');\r\n            this._shaderSets.at(1).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(1).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(2).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_position');\r\n            this._shaderSets.at(2).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(2).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(2).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(2).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(3).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_position');\r\n            this._shaderSets.at(3).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(3).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(3).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(3).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(4).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_position');\r\n            this._shaderSets.at(4).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(4).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(5).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_position');\r\n            this._shaderSets.at(5).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(5).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(5).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(5).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(6).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_position');\r\n            this._shaderSets.at(6).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(6).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(6).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(6).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(7).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_position');\r\n            this._shaderSets.at(7).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(7).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(8).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_position');\r\n            this._shaderSets.at(8).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(8).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(8).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(8).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(9).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_position');\r\n            this._shaderSets.at(9).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(9).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(9).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(9).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_baseColor');\r\n        };\r\n        CubismShader_WebGL.prototype.loadShaderProgram = function (vertexShaderSource, fragmentShaderSource) {\r\n            var shaderProgram = this.gl.createProgram();\r\n            var vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);\r\n            if (!vertShader) {\r\n                cubismdebug_1.CubismLogError('Vertex shader compile error!');\r\n                return 0;\r\n            }\r\n            var fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n            if (!fragShader) {\r\n                cubismdebug_1.CubismLogError('Vertex shader compile error!');\r\n                return 0;\r\n            }\r\n            this.gl.attachShader(shaderProgram, vertShader);\r\n            this.gl.attachShader(shaderProgram, fragShader);\r\n            this.gl.linkProgram(shaderProgram);\r\n            var linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);\r\n            if (!linkStatus) {\r\n                cubismdebug_1.CubismLogError('Failed to link program: {0}', shaderProgram);\r\n                this.gl.deleteShader(vertShader);\r\n                vertShader = 0;\r\n                this.gl.deleteShader(fragShader);\r\n                fragShader = 0;\r\n                if (shaderProgram) {\r\n                    this.gl.deleteProgram(shaderProgram);\r\n                    shaderProgram = 0;\r\n                }\r\n                return 0;\r\n            }\r\n            this.gl.deleteShader(vertShader);\r\n            this.gl.deleteShader(fragShader);\r\n            return shaderProgram;\r\n        };\r\n        CubismShader_WebGL.prototype.compileShaderSource = function (shaderType, shaderSource) {\r\n            var source = shaderSource;\r\n            var shader = this.gl.createShader(shaderType);\r\n            this.gl.shaderSource(shader, source);\r\n            this.gl.compileShader(shader);\r\n            if (!shader) {\r\n                var log = this.gl.getShaderInfoLog(shader);\r\n                cubismdebug_1.CubismLogError('Shader compile log: {0} ', log);\r\n            }\r\n            var status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\r\n            if (!status) {\r\n                this.gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n            return shader;\r\n        };\r\n        CubismShader_WebGL.prototype.setGl = function (gl) {\r\n            this.gl = gl;\r\n        };\r\n        return CubismShader_WebGL;\r\n    }());\r\n    Live2DCubismFramework.CubismShader_WebGL = CubismShader_WebGL;\r\n    var CubismShaderSet = (function () {\r\n        function CubismShaderSet() {\r\n        }\r\n        return CubismShaderSet;\r\n    }());\r\n    Live2DCubismFramework.CubismShaderSet = CubismShaderSet;\r\n    var ShaderNames;\r\n    (function (ShaderNames) {\r\n        ShaderNames[ShaderNames[\"ShaderNames_SetupMask\"] = 0] = \"ShaderNames_SetupMask\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_NormalPremultipliedAlpha\"] = 1] = \"ShaderNames_NormalPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_NormalMaskedPremultipliedAlpha\"] = 2] = \"ShaderNames_NormalMaskedPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\"] = 3] = \"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_AddPremultipliedAlpha\"] = 4] = \"ShaderNames_AddPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_AddMaskedPremultipliedAlpha\"] = 5] = \"ShaderNames_AddMaskedPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_AddMaskedPremultipliedAlphaInverted\"] = 6] = \"ShaderNames_AddMaskedPremultipliedAlphaInverted\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_MultPremultipliedAlpha\"] = 7] = \"ShaderNames_MultPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_MultMaskedPremultipliedAlpha\"] = 8] = \"ShaderNames_MultMaskedPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_MultMaskedPremultipliedAlphaInverted\"] = 9] = \"ShaderNames_MultMaskedPremultipliedAlphaInverted\";\r\n    })(ShaderNames = Live2DCubismFramework.ShaderNames || (Live2DCubismFramework.ShaderNames = {}));\r\n    Live2DCubismFramework.vertexShaderSrcSetupMask = 'attribute vec4     a_position;' +\r\n        'attribute vec2     a_texCoord;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'varying vec4       v_myPos;' +\r\n        'uniform mat4       u_clipMatrix;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   gl_Position = u_clipMatrix * a_position;' +\r\n        '   v_myPos = u_clipMatrix * a_position;' +\r\n        '   v_texCoord = a_texCoord;' +\r\n        '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n        '}';\r\n    Live2DCubismFramework.fragmentShaderSrcsetupMask = 'precision mediump float;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'varying vec4       v_myPos;' +\r\n        'uniform vec4       u_baseColor;' +\r\n        'uniform vec4       u_channelFlag;' +\r\n        'uniform sampler2D  s_texture0;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   float isInside = ' +\r\n        '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +\r\n        '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +\r\n        '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +\r\n        '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +\r\n        '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +\r\n        '}';\r\n    Live2DCubismFramework.vertexShaderSrc = 'attribute vec4     a_position;' +\r\n        'attribute vec2     a_texCoord;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'uniform mat4       u_matrix;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   gl_Position = u_matrix * a_position;' +\r\n        '   v_texCoord = a_texCoord;' +\r\n        '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n        '}';\r\n    Live2DCubismFramework.vertexShaderSrcMasked = 'attribute vec4     a_position;' +\r\n        'attribute vec2     a_texCoord;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'varying vec4       v_clipPos;' +\r\n        'uniform mat4       u_matrix;' +\r\n        'uniform mat4       u_clipMatrix;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   gl_Position = u_matrix * a_position;' +\r\n        '   v_clipPos = u_clipMatrix * a_position;' +\r\n        '   v_texCoord = a_texCoord;' +\r\n        '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n        '}';\r\n    Live2DCubismFramework.fragmentShaderSrcPremultipliedAlpha = 'precision mediump float;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'uniform vec4       u_baseColor;' +\r\n        'uniform sampler2D  s_texture0;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +\r\n        '}';\r\n    Live2DCubismFramework.fragmentShaderSrcMaskPremultipliedAlpha = 'precision mediump float;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'varying vec4       v_clipPos;' +\r\n        'uniform vec4       u_baseColor;' +\r\n        'uniform vec4       u_channelFlag;' +\r\n        'uniform sampler2D  s_texture0;' +\r\n        'uniform sampler2D  s_texture1;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +\r\n        '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\r\n        '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\r\n        '   col_formask = col_formask * maskVal;' +\r\n        '   gl_FragColor = col_formask;' +\r\n        '}';\r\n    Live2DCubismFramework.fragmentShaderSrcMaskInvertedPremultipliedAlpha = 'precision mediump float;' +\r\n        'varying vec2 v_texCoord;' +\r\n        'varying vec4 v_clipPos;' +\r\n        'uniform sampler2D s_texture0;' +\r\n        'uniform sampler2D s_texture1;' +\r\n        'uniform vec4 u_channelFlag;' +\r\n        'uniform vec4 u_baseColor;' +\r\n        'void main()' +\r\n        '{' +\r\n        'vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;' +\r\n        'vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\r\n        'float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\r\n        'col_formask = col_formask * (1.0 - maskVal);' +\r\n        'gl_FragColor = col_formask;' +\r\n        '}';\r\n    var CubismRenderer_WebGL = (function (_super) {\r\n        __extends(CubismRenderer_WebGL, _super);\r\n        function CubismRenderer_WebGL() {\r\n            var _this = _super.call(this) || this;\r\n            _this._clippingContextBufferForMask = null;\r\n            _this._clippingContextBufferForDraw = null;\r\n            _this._clippingManager = new CubismClippingManager_WebGL();\r\n            _this.firstDraw = true;\r\n            _this._textures = new csmMap();\r\n            _this._sortedDrawableIndexList = new csmVector();\r\n            _this._bufferData = {\r\n                vertex: WebGLBuffer = null,\r\n                uv: WebGLBuffer = null,\r\n                index: WebGLBuffer = null\r\n            };\r\n            _this._textures.prepareCapacity(32, true);\r\n            return _this;\r\n        }\r\n        CubismRenderer_WebGL.prototype.initialize = function (model) {\r\n            if (model.isUsingMasking()) {\r\n                this._clippingManager = new CubismClippingManager_WebGL();\r\n                this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts());\r\n            }\r\n            this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);\r\n            _super.prototype.initialize.call(this, model);\r\n        };\r\n        CubismRenderer_WebGL.prototype.bindTexture = function (modelTextureNo, glTexture) {\r\n            this._textures.setValue(modelTextureNo, glTexture);\r\n        };\r\n        CubismRenderer_WebGL.prototype.getBindedTextures = function () {\r\n            return this._textures;\r\n        };\r\n        CubismRenderer_WebGL.prototype.setClippingMaskBufferSize = function (size) {\r\n            this._clippingManager.release();\r\n            this._clippingManager = void 0;\r\n            this._clippingManager = null;\r\n            this._clippingManager = new CubismClippingManager_WebGL();\r\n            this._clippingManager.setClippingMaskBufferSize(size);\r\n            this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts());\r\n        };\r\n        CubismRenderer_WebGL.prototype.getClippingMaskBufferSize = function () {\r\n            return this._clippingManager.getClippingMaskBufferSize();\r\n        };\r\n        CubismRenderer_WebGL.prototype.release = function () {\r\n            this._clippingManager.release();\r\n            this._clippingManager = void 0;\r\n            this._clippingManager = null;\r\n            this.gl.deleteBuffer(this._bufferData.vertex);\r\n            this._bufferData.vertex = null;\r\n            this.gl.deleteBuffer(this._bufferData.uv);\r\n            this._bufferData.uv = null;\r\n            this.gl.deleteBuffer(this._bufferData.index);\r\n            this._bufferData.index = null;\r\n            this._bufferData = null;\r\n            this._textures = null;\r\n        };\r\n        CubismRenderer_WebGL.prototype.doDrawModel = function () {\r\n            if (this._clippingManager != null) {\r\n                this.preDraw();\r\n                this._clippingManager.setupClippingContext(this.getModel(), this);\r\n            }\r\n            this.preDraw();\r\n            var drawableCount = this.getModel().getDrawableCount();\r\n            var renderOrder = this.getModel().getDrawableRenderOrders();\r\n            for (var i = 0; i < drawableCount; ++i) {\r\n                var order = renderOrder[i];\r\n                this._sortedDrawableIndexList.set(order, i);\r\n            }\r\n            for (var i = 0; i < drawableCount; ++i) {\r\n                var drawableIndex = this._sortedDrawableIndexList.at(i);\r\n                if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\r\n                    continue;\r\n                }\r\n                this.setClippingContextBufferForDraw(this._clippingManager != null\r\n                    ? this._clippingManager\r\n                        .getClippingContextListForDraw()\r\n                        .at(drawableIndex)\r\n                    : null);\r\n                this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\r\n                this.drawMesh(this.getModel().getDrawableTextureIndices(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex), this.getModel().getDrawableInvertedMaskBit(drawableIndex));\r\n            }\r\n        };\r\n        CubismRenderer_WebGL.prototype.drawMesh = function (textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, opacity, colorBlendMode, invertedMask) {\r\n            if (this.isCulling()) {\r\n                this.gl.enable(this.gl.CULL_FACE);\r\n            }\r\n            else {\r\n                this.gl.disable(this.gl.CULL_FACE);\r\n            }\r\n            this.gl.frontFace(this.gl.CCW);\r\n            var modelColorRGBA = this.getModelColor();\r\n            if (this.getClippingContextBufferForMask() == null) {\r\n                modelColorRGBA.A *= opacity;\r\n                if (this.isPremultipliedAlpha()) {\r\n                    modelColorRGBA.R *= modelColorRGBA.A;\r\n                    modelColorRGBA.G *= modelColorRGBA.A;\r\n                    modelColorRGBA.B *= modelColorRGBA.A;\r\n                }\r\n            }\r\n            var drawtexture;\r\n            if (this._textures.getValue(textureNo) != null) {\r\n                drawtexture = this._textures.getValue(textureNo);\r\n            }\r\n            else {\r\n                drawtexture = null;\r\n            }\r\n            CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, this.isPremultipliedAlpha(), this.getMvpMatrix(), invertedMask);\r\n            this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n            this.gl.useProgram(null);\r\n            this.setClippingContextBufferForDraw(null);\r\n            this.setClippingContextBufferForMask(null);\r\n        };\r\n        CubismRenderer_WebGL.doStaticRelease = function () {\r\n            CubismShader_WebGL.deleteInstance();\r\n        };\r\n        CubismRenderer_WebGL.prototype.setRenderState = function (fbo, viewport) {\r\n            s_fbo = fbo;\r\n            s_viewport = viewport;\r\n        };\r\n        CubismRenderer_WebGL.prototype.preDraw = function () {\r\n            if (this.firstDraw) {\r\n                this.firstDraw = false;\r\n                this._anisortopy =\r\n                    this.gl.getExtension('EXT_texture_filter_anisotropic') ||\r\n                        this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||\r\n                        this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');\r\n            }\r\n            this.gl.disable(this.gl.SCISSOR_TEST);\r\n            this.gl.disable(this.gl.STENCIL_TEST);\r\n            this.gl.disable(this.gl.DEPTH_TEST);\r\n            this.gl.frontFace(this.gl.CW);\r\n            this.gl.enable(this.gl.BLEND);\r\n            this.gl.colorMask(true, true, true, true);\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n        };\r\n        CubismRenderer_WebGL.prototype.setClippingContextBufferForMask = function (clip) {\r\n            this._clippingContextBufferForMask = clip;\r\n        };\r\n        CubismRenderer_WebGL.prototype.getClippingContextBufferForMask = function () {\r\n            return this._clippingContextBufferForMask;\r\n        };\r\n        CubismRenderer_WebGL.prototype.setClippingContextBufferForDraw = function (clip) {\r\n            this._clippingContextBufferForDraw = clip;\r\n        };\r\n        CubismRenderer_WebGL.prototype.getClippingContextBufferForDraw = function () {\r\n            return this._clippingContextBufferForDraw;\r\n        };\r\n        CubismRenderer_WebGL.prototype.startUp = function (gl) {\r\n            this.gl = gl;\r\n            this._clippingManager.setGL(gl);\r\n            CubismShader_WebGL.getInstance().setGl(gl);\r\n        };\r\n        return CubismRenderer_WebGL;\r\n    }(CubismRenderer));\r\n    Live2DCubismFramework.CubismRenderer_WebGL = CubismRenderer_WebGL;\r\n    CubismRenderer.staticRelease = function () {\r\n        CubismRenderer_WebGL.doStaticRelease();\r\n    };\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/rendering/cubismrenderer_webgl.ts\n");

/***/ }),

/***/ "../../../Framework/src/type/csmmap.ts":
/*!***********************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/type/csmmap.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"../../../Framework/src/utils/cubismdebug.ts\");\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var csmPair = (function () {\r\n        function csmPair(key, value) {\r\n            this.first = key == undefined ? null : key;\r\n            this.second = value == undefined ? null : value;\r\n        }\r\n        return csmPair;\r\n    }());\r\n    Live2DCubismFramework.csmPair = csmPair;\r\n    var csmMap = (function () {\r\n        function csmMap(size) {\r\n            if (size != undefined) {\r\n                if (size < 1) {\r\n                    this._keyValues = [];\r\n                    this._dummyValue = null;\r\n                    this._size = 0;\r\n                }\r\n                else {\r\n                    this._keyValues = new Array(size);\r\n                    this._size = size;\r\n                }\r\n            }\r\n            else {\r\n                this._keyValues = [];\r\n                this._dummyValue = null;\r\n                this._size = 0;\r\n            }\r\n        }\r\n        csmMap.prototype.release = function () {\r\n            this.clear();\r\n        };\r\n        csmMap.prototype.appendKey = function (key) {\r\n            this.prepareCapacity(this._size + 1, false);\r\n            this._keyValues[this._size] = new csmPair(key);\r\n            this._size += 1;\r\n        };\r\n        csmMap.prototype.getValue = function (key) {\r\n            var found = -1;\r\n            for (var i = 0; i < this._size; i++) {\r\n                if (this._keyValues[i].first == key) {\r\n                    found = i;\r\n                    break;\r\n                }\r\n            }\r\n            if (found >= 0) {\r\n                return this._keyValues[found].second;\r\n            }\r\n            else {\r\n                this.appendKey(key);\r\n                return this._keyValues[this._size - 1].second;\r\n            }\r\n        };\r\n        csmMap.prototype.setValue = function (key, value) {\r\n            var found = -1;\r\n            for (var i = 0; i < this._size; i++) {\r\n                if (this._keyValues[i].first == key) {\r\n                    found = i;\r\n                    break;\r\n                }\r\n            }\r\n            if (found >= 0) {\r\n                this._keyValues[found].second = value;\r\n            }\r\n            else {\r\n                this.appendKey(key);\r\n                this._keyValues[this._size - 1].second = value;\r\n            }\r\n        };\r\n        csmMap.prototype.isExist = function (key) {\r\n            for (var i = 0; i < this._size; i++) {\r\n                if (this._keyValues[i].first == key) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        csmMap.prototype.clear = function () {\r\n            this._keyValues = void 0;\r\n            this._keyValues = null;\r\n            this._keyValues = [];\r\n            this._size = 0;\r\n        };\r\n        csmMap.prototype.getSize = function () {\r\n            return this._size;\r\n        };\r\n        csmMap.prototype.prepareCapacity = function (newSize, fitToSize) {\r\n            if (newSize > this._keyValues.length) {\r\n                if (this._keyValues.length == 0) {\r\n                    if (!fitToSize && newSize < csmMap.DefaultSize)\r\n                        newSize = csmMap.DefaultSize;\r\n                    this._keyValues.length = newSize;\r\n                }\r\n                else {\r\n                    if (!fitToSize && newSize < this._keyValues.length * 2)\r\n                        newSize = this._keyValues.length * 2;\r\n                    this._keyValues.length = newSize;\r\n                }\r\n            }\r\n        };\r\n        csmMap.prototype.begin = function () {\r\n            var ite = new iterator(this, 0);\r\n            return ite;\r\n        };\r\n        csmMap.prototype.end = function () {\r\n            var ite = new iterator(this, this._size);\r\n            return ite;\r\n        };\r\n        csmMap.prototype.erase = function (ite) {\r\n            var index = ite._index;\r\n            if (index < 0 || this._size <= index) {\r\n                return ite;\r\n            }\r\n            this._keyValues.splice(index, 1);\r\n            --this._size;\r\n            var ite2 = new iterator(this, index);\r\n            return ite2;\r\n        };\r\n        csmMap.prototype.dumpAsInt = function () {\r\n            for (var i = 0; i < this._size; i++) {\r\n                cubismdebug_1.CubismLogDebug('{0} ,', this._keyValues[i]);\r\n                cubismdebug_1.CubismLogDebug('\\n');\r\n            }\r\n        };\r\n        csmMap.DefaultSize = 10;\r\n        return csmMap;\r\n    }());\r\n    Live2DCubismFramework.csmMap = csmMap;\r\n    var iterator = (function () {\r\n        function iterator(v, idx) {\r\n            this._map = v != undefined ? v : new csmMap();\r\n            this._index = idx != undefined ? idx : 0;\r\n        }\r\n        iterator.prototype.set = function (ite) {\r\n            this._index = ite._index;\r\n            this._map = ite._map;\r\n            return this;\r\n        };\r\n        iterator.prototype.preIncrement = function () {\r\n            ++this._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.preDecrement = function () {\r\n            --this._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.increment = function () {\r\n            var iteold = new iterator(this._map, this._index++);\r\n            this._map = iteold._map;\r\n            this._index = iteold._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.decrement = function () {\r\n            var iteold = new iterator(this._map, this._index);\r\n            this._map = iteold._map;\r\n            this._index = iteold._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.ptr = function () {\r\n            return this._map._keyValues[this._index];\r\n        };\r\n        iterator.prototype.notEqual = function (ite) {\r\n            return this._index != ite._index || this._map != ite._map;\r\n        };\r\n        return iterator;\r\n    }());\r\n    Live2DCubismFramework.iterator = iterator;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/type/csmmap.ts\n");

/***/ }),

/***/ "../../../Framework/src/type/csmrectf.ts":
/*!*************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/type/csmrectf.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var csmRect = (function () {\r\n        function csmRect(x, y, w, h) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.width = w;\r\n            this.height = h;\r\n        }\r\n        csmRect.prototype.getCenterX = function () {\r\n            return this.x + 0.5 * this.width;\r\n        };\r\n        csmRect.prototype.getCenterY = function () {\r\n            return this.y + 0.5 * this.height;\r\n        };\r\n        csmRect.prototype.getRight = function () {\r\n            return this.x + this.width;\r\n        };\r\n        csmRect.prototype.getBottom = function () {\r\n            return this.y + this.height;\r\n        };\r\n        csmRect.prototype.setRect = function (r) {\r\n            this.x = r.x;\r\n            this.y = r.y;\r\n            this.width = r.width;\r\n            this.height = r.height;\r\n        };\r\n        csmRect.prototype.expand = function (w, h) {\r\n            this.x -= w;\r\n            this.y -= h;\r\n            this.width += w * 2.0;\r\n            this.height += h * 2.0;\r\n        };\r\n        return csmRect;\r\n    }());\r\n    Live2DCubismFramework.csmRect = csmRect;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbXJlY3RmLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL0M6L1VzZXJzL21pZmFzL0RvY3VtZW50cy9yZWRzb2RhMDIxMy5naXRodWIuaW8vRnJhbWV3b3JrL3NyYy90eXBlL2NzbXJlY3RmLnRzP2M4NmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgLyoqXHJcbiAgICog55+p5b2i5b2i54q277yI5bqn5qiZ44O76ZW344GV44GvZmxvYXTlgKTvvInjgpLlrprnvqnjgZnjgovjgq/jg6njgrlcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgY3NtUmVjdCB7XHJcbiAgICAvKipcclxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICogQHBhcmFtIHgg5bem56uvWOW6p+aomVxyXG4gICAgICogQHBhcmFtIHkg5LiK56uvWeW6p+aomVxyXG4gICAgICogQHBhcmFtIHcg5bmFXHJcbiAgICAgKiBAcGFyYW0gaCDpq5jjgZVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHg/OiBudW1iZXIsIHk/OiBudW1iZXIsIHc/OiBudW1iZXIsIGg/OiBudW1iZXIpIHtcclxuICAgICAgdGhpcy54ID0geDtcclxuICAgICAgdGhpcy55ID0geTtcclxuICAgICAgdGhpcy53aWR0aCA9IHc7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gaDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOefqeW9ouS4reWkruOBrljluqfmqJnjgpLlj5blvpfjgZnjgotcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENlbnRlclgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMueCArIDAuNSAqIHRoaXMud2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnn6nlvaLkuK3lpK7jga5Z5bqn5qiZ44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRDZW50ZXJZKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLnkgKyAwLjUgKiB0aGlzLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWPs+WBtOOBrljluqfmqJnjgpLlj5blvpfjgZnjgotcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFJpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLnggKyB0aGlzLndpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiL56uv44GuWeW6p+aomeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Qm90dG9tKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLnkgKyB0aGlzLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOefqeW9ouOBq+WApOOCkuOCu+ODg+ODiOOBmeOCi1xyXG4gICAgICogQHBhcmFtIHIg55+p5b2i44Gu44Kk44Oz44K544K/44Oz44K5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRSZWN0KHI6IGNzbVJlY3QpOiB2b2lkIHtcclxuICAgICAgdGhpcy54ID0gci54O1xyXG4gICAgICB0aGlzLnkgPSByLnk7XHJcbiAgICAgIHRoaXMud2lkdGggPSByLndpZHRoO1xyXG4gICAgICB0aGlzLmhlaWdodCA9IHIuaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog55+p5b2i5Lit5aSu44KS6Lu444Gr44GX44Gm57im5qiq44KS5ouh57iu44GZ44KLXHJcbiAgICAgKiBAcGFyYW0gdyDluYXmlrnlkJHjgavmi6HnuK7jgZnjgovph49cclxuICAgICAqIEBwYXJhbSBoIOmrmOOBleaWueWQkeOBq+aLoee4ruOBmeOCi+mHj1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXhwYW5kKHc6IG51bWJlciwgaDogbnVtYmVyKSB7XHJcbiAgICAgIHRoaXMueCAtPSB3O1xyXG4gICAgICB0aGlzLnkgLT0gaDtcclxuICAgICAgdGhpcy53aWR0aCArPSB3ICogMi4wO1xyXG4gICAgICB0aGlzLmhlaWdodCArPSBoICogMi4wO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB4OiBudW1iZXI7IC8vIOW3puerr1jluqfmqJlcclxuICAgIHB1YmxpYyB5OiBudW1iZXI7IC8vIOS4iuerr1nluqfmqJlcclxuICAgIHB1YmxpYyB3aWR0aDogbnVtYmVyOyAvLyDluYVcclxuICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjsgLy8g6auY44GVXHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFPQTtBQUFBO0FBSUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUFBO0FBdEVBO0FBdUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../../Framework/src/type/csmrectf.ts\n");

/***/ }),

/***/ "../../../Framework/src/type/csmstring.ts":
/*!**************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/type/csmstring.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var csmString = (function () {\r\n        function csmString(s) {\r\n            this.s = s;\r\n        }\r\n        csmString.prototype.append = function (c, length) {\r\n            this.s += length !== undefined ? c.substr(0, length) : c;\r\n            return this;\r\n        };\r\n        csmString.prototype.expansion = function (length, v) {\r\n            for (var i = 0; i < length; i++) {\r\n                this.append(v);\r\n            }\r\n            return this;\r\n        };\r\n        csmString.prototype.getBytes = function () {\r\n            return encodeURIComponent(this.s).replace(/%../g, 'x').length;\r\n        };\r\n        csmString.prototype.getLength = function () {\r\n            return this.s.length;\r\n        };\r\n        csmString.prototype.isLess = function (s) {\r\n            return this.s < s.s;\r\n        };\r\n        csmString.prototype.isGreat = function (s) {\r\n            return this.s > s.s;\r\n        };\r\n        csmString.prototype.isEqual = function (s) {\r\n            return this.s == s;\r\n        };\r\n        csmString.prototype.isEmpty = function () {\r\n            return this.s.length == 0;\r\n        };\r\n        return csmString;\r\n    }());\r\n    Live2DCubismFramework.csmString = csmString;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbXN0cmluZy50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9DOi9Vc2Vycy9taWZhcy9Eb2N1bWVudHMvcmVkc29kYTAyMTMuZ2l0aHViLmlvL0ZyYW1ld29yay9zcmMvdHlwZS9jc21zdHJpbmcudHM/YjYzYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICAvKipcclxuICAgKiDmloflrZfliJfjgq/jg6njgrnjgIJcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgY3NtU3RyaW5nIHtcclxuICAgIC8qKlxyXG4gICAgICog5paH5a2X5YiX44KS5b6M5pa544Gr6L+95Yqg44GZ44KLXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGMg6L+95Yqg44GZ44KL5paH5a2X5YiXXHJcbiAgICAgKiBAcmV0dXJuIOabtOaWsOOBleOCjOOBn+aWh+Wtl+WIl1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXBwZW5kKGM6IHN0cmluZywgbGVuZ3RoPzogbnVtYmVyKTogY3NtU3RyaW5nIHtcclxuICAgICAgdGhpcy5zICs9IGxlbmd0aCAhPT0gdW5kZWZpbmVkID8gYy5zdWJzdHIoMCwgbGVuZ3RoKSA6IGM7XHJcblxyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaWh+Wtl+OCteOCpOOCuuOCkuaLoeW8teOBl+OBpuaWh+Wtl+OCkuWfi+OCgeOCi1xyXG4gICAgICogQHBhcmFtIGxlbmd0aCAgICDmi6HlvLXjgZnjgovmloflrZfmlbBcclxuICAgICAqIEBwYXJhbSB2ICAgICAgICAg5Z+L44KB44KL5paH5a2XXHJcbiAgICAgKiBAcmV0dXJuIOabtOaWsOOBleOCjOOBn+aWh+Wtl+WIl1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXhwYW5zaW9uKGxlbmd0aDogbnVtYmVyLCB2OiBzdHJpbmcpOiBjc21TdHJpbmcge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5hcHBlbmQodik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5paH5a2X5YiX44Gu6ZW344GV44KS44OQ44Kk44OI5pWw44Gn5Y+W5b6X44GZ44KLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRCeXRlcygpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMucykucmVwbGFjZSgvJS4uL2csICd4JykubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5paH5a2X5YiX44Gu6ZW344GV44KS6L+U44GZXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRMZW5ndGgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMucy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmloflrZfliJfmr5TovIMgPFxyXG4gICAgICogQHBhcmFtIHMg5q+U6LyD44GZ44KL5paH5a2X5YiXXHJcbiAgICAgKiBAcmV0dXJuIHRydWU6ICAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWwj+OBleOBhFxyXG4gICAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlpKfjgY3jgYRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzTGVzcyhzOiBjc21TdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuIHRoaXMucyA8IHMucztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaWh+Wtl+WIl+avlOi8gyA+XHJcbiAgICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcclxuICAgICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5aSn44GN44GEXHJcbiAgICAgKiBAcmV0dXJuIGZhbHNlOiAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWwj+OBleOBhFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNHcmVhdChzOiBjc21TdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuIHRoaXMucyA+IHMucztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaWh+Wtl+WIl+avlOi8gyA9PVxyXG4gICAgICogQHBhcmFtIHMg5q+U6LyD44GZ44KL5paH5a2X5YiXXHJcbiAgICAgKiBAcmV0dXJuIHRydWU6ICAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OBqOetieOBl+OBhFxyXG4gICAgICogQHJldHVybiBmYWxzZTogICDmr5TovIPjgZnjgovmloflrZfliJfjgajnlbDjgarjgotcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzRXF1YWwoczogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgIHJldHVybiB0aGlzLnMgPT0gcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaWh+Wtl+WIl+OBjOepuuOBi+OBqeOBhuOBi1xyXG4gICAgICogQHJldHVybiB0cnVlOiDnqbrjga7mloflrZfliJdcclxuICAgICAqIEByZXR1cm4gZmFsc2U6IOWApOOBjOioreWumuOBleOCjOOBpuOBhOOCi1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuIHRoaXMucy5sZW5ndGggPT0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW8leaVsOS7mOOBjeOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioczogc3RyaW5nKSB7XHJcbiAgICAgIHRoaXMucyA9IHM7XHJcbiAgICB9XHJcblxyXG4gICAgczogc3RyaW5nO1xyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7O0FBT0E7QUFBQTtBQUlBO0FBbUZBO0FBQ0E7QUFDQTtBQTlFQTtBQUNBO0FBRUE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQVVBO0FBQUE7QUF4RkE7QUF5RkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../Framework/src/type/csmstring.ts\n");

/***/ }),

/***/ "../../../Framework/src/type/csmvector.ts":
/*!**************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/type/csmvector.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var csmVector = (function () {\r\n        function csmVector(initialCapacity) {\r\n            if (initialCapacity === void 0) { initialCapacity = 0; }\r\n            if (initialCapacity < 1) {\r\n                this._ptr = [];\r\n                this._capacity = 0;\r\n                this._size = 0;\r\n            }\r\n            else {\r\n                this._ptr = new Array(initialCapacity);\r\n                this._capacity = initialCapacity;\r\n                this._size = 0;\r\n            }\r\n        }\r\n        csmVector.prototype.at = function (index) {\r\n            return this._ptr[index];\r\n        };\r\n        csmVector.prototype.set = function (index, value) {\r\n            this._ptr[index] = value;\r\n        };\r\n        csmVector.prototype.get = function (offset) {\r\n            if (offset === void 0) { offset = 0; }\r\n            var ret = new Array();\r\n            for (var i = offset; i < this._size; i++) {\r\n                ret.push(this._ptr[i]);\r\n            }\r\n            return ret;\r\n        };\r\n        csmVector.prototype.pushBack = function (value) {\r\n            if (this._size >= this._capacity) {\r\n                this.prepareCapacity(this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2);\r\n            }\r\n            this._ptr[this._size++] = value;\r\n        };\r\n        csmVector.prototype.clear = function () {\r\n            this._ptr.length = 0;\r\n            this._size = 0;\r\n        };\r\n        csmVector.prototype.getSize = function () {\r\n            return this._size;\r\n        };\r\n        csmVector.prototype.assign = function (newSize, value) {\r\n            var curSize = this._size;\r\n            if (curSize < newSize) {\r\n                this.prepareCapacity(newSize);\r\n            }\r\n            for (var i = 0; i < newSize; i++) {\r\n                this._ptr[i] = value;\r\n            }\r\n            this._size = newSize;\r\n        };\r\n        csmVector.prototype.resize = function (newSize, value) {\r\n            if (value === void 0) { value = null; }\r\n            this.updateSize(newSize, value, true);\r\n        };\r\n        csmVector.prototype.updateSize = function (newSize, value, callPlacementNew) {\r\n            if (value === void 0) { value = null; }\r\n            if (callPlacementNew === void 0) { callPlacementNew = true; }\r\n            var curSize = this._size;\r\n            if (curSize < newSize) {\r\n                this.prepareCapacity(newSize);\r\n                if (callPlacementNew) {\r\n                    for (var i = this._size; i < newSize; i++) {\r\n                        if (typeof value == 'function') {\r\n                            this._ptr[i] = JSON.parse(JSON.stringify(new value()));\r\n                        }\r\n                        else {\r\n                            this._ptr[i] = value;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (var i = this._size; i < newSize; i++) {\r\n                        this._ptr[i] = value;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                var sub = this._size - newSize;\r\n                this._ptr.splice(this._size - sub, sub);\r\n            }\r\n            this._size = newSize;\r\n        };\r\n        csmVector.prototype.insert = function (position, begin, end) {\r\n            var dstSi = position._index;\r\n            var srcSi = begin._index;\r\n            var srcEi = end._index;\r\n            var addCount = srcEi - srcSi;\r\n            this.prepareCapacity(this._size + addCount);\r\n            var addSize = this._size - dstSi;\r\n            if (addSize > 0) {\r\n                for (var i = 0; i < addSize; i++) {\r\n                    this._ptr.splice(dstSi + i, 0, null);\r\n                }\r\n            }\r\n            for (var i = srcSi; i < srcEi; i++, dstSi++) {\r\n                this._ptr[dstSi] = begin._vector._ptr[i];\r\n            }\r\n            this._size = this._size + addCount;\r\n        };\r\n        csmVector.prototype.remove = function (index) {\r\n            if (index < 0 || this._size <= index) {\r\n                return false;\r\n            }\r\n            this._ptr.splice(index, 1);\r\n            --this._size;\r\n            return true;\r\n        };\r\n        csmVector.prototype.erase = function (ite) {\r\n            var index = ite._index;\r\n            if (index < 0 || this._size <= index) {\r\n                return ite;\r\n            }\r\n            this._ptr.splice(index, 1);\r\n            --this._size;\r\n            var ite2 = new iterator(this, index);\r\n            return ite2;\r\n        };\r\n        csmVector.prototype.prepareCapacity = function (newSize) {\r\n            if (newSize > this._capacity) {\r\n                if (this._capacity == 0) {\r\n                    this._ptr = new Array(newSize);\r\n                    this._capacity = newSize;\r\n                }\r\n                else {\r\n                    this._ptr.length = newSize;\r\n                    this._capacity = newSize;\r\n                }\r\n            }\r\n        };\r\n        csmVector.prototype.begin = function () {\r\n            var ite = this._size == 0 ? this.end() : new iterator(this, 0);\r\n            return ite;\r\n        };\r\n        csmVector.prototype.end = function () {\r\n            var ite = new iterator(this, this._size);\r\n            return ite;\r\n        };\r\n        csmVector.prototype.getOffset = function (offset) {\r\n            var newVector = new csmVector();\r\n            newVector._ptr = this.get(offset);\r\n            newVector._size = this.get(offset).length;\r\n            newVector._capacity = this.get(offset).length;\r\n            return newVector;\r\n        };\r\n        csmVector.s_defaultSize = 10;\r\n        return csmVector;\r\n    }());\r\n    Live2DCubismFramework.csmVector = csmVector;\r\n    var iterator = (function () {\r\n        function iterator(v, index) {\r\n            this._vector = v != undefined ? v : null;\r\n            this._index = index != undefined ? index : 0;\r\n        }\r\n        iterator.prototype.set = function (ite) {\r\n            this._index = ite._index;\r\n            this._vector = ite._vector;\r\n            return this;\r\n        };\r\n        iterator.prototype.preIncrement = function () {\r\n            ++this._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.preDecrement = function () {\r\n            --this._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.increment = function () {\r\n            var iteold = new iterator(this._vector, this._index++);\r\n            this._vector = iteold._vector;\r\n            this._index = iteold._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.decrement = function () {\r\n            var iteold = new iterator(this._vector, this._index--);\r\n            this._vector = iteold._vector;\r\n            this._index = iteold._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.ptr = function () {\r\n            return this._vector._ptr[this._index];\r\n        };\r\n        iterator.prototype.substitution = function (ite) {\r\n            this._index = ite._index;\r\n            this._vector = ite._vector;\r\n            return this;\r\n        };\r\n        iterator.prototype.notEqual = function (ite) {\r\n            return this._index != ite._index || this._vector != ite._vector;\r\n        };\r\n        return iterator;\r\n    }());\r\n    Live2DCubismFramework.iterator = iterator;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/type/csmvector.ts\n");

/***/ }),

/***/ "../../../Framework/src/utils/cubismdebug.ts":
/*!*****************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/utils/cubismdebug.ts ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar cubismframeworkconfig_1 = __webpack_require__(/*! ../cubismframeworkconfig */ \"../../../Framework/src/cubismframeworkconfig.ts\");\r\nexports.CubismLogPrint = function (level, fmt, args) {\r\n    Live2DCubismFramework.CubismDebug.print(level, '[CSM]' + fmt, args);\r\n};\r\nexports.CubismLogPrintIn = function (level, fmt, args) {\r\n    exports.CubismLogPrint(level, fmt + '\\n', args);\r\n};\r\nexports.CSM_ASSERT = function (expr) {\r\n    console.assert(expr);\r\n};\r\nif (cubismframeworkconfig_1.CSM_LOG_LEVEL <= cubismframeworkconfig_1.CSM_LOG_LEVEL_VERBOSE) {\r\n    exports.CubismLogVerbose = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Verbose, '[V]' + fmt, args);\r\n    };\r\n    exports.CubismLogDebug = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);\r\n    };\r\n    exports.CubismLogInfo = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n    };\r\n    exports.CubismLogWarning = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n    };\r\n    exports.CubismLogError = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n    };\r\n}\r\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_DEBUG) {\r\n    exports.CubismLogDebug = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);\r\n    };\r\n    exports.CubismLogInfo = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n    };\r\n    exports.CubismLogWarning = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n    };\r\n    exports.CubismLogError = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n    };\r\n}\r\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_INFO) {\r\n    exports.CubismLogInfo = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n    };\r\n    exports.CubismLogWarning = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n    };\r\n    exports.CubismLogError = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n    };\r\n}\r\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_WARNING) {\r\n    exports.CubismLogWarning = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n    };\r\n    exports.CubismLogError = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n    };\r\n}\r\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_ERROR) {\r\n    exports.CubismLogError = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n    };\r\n}\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismDebug = (function () {\r\n        function CubismDebug() {\r\n        }\r\n        CubismDebug.print = function (logLevel, format, args) {\r\n            if (logLevel < live2dcubismframework_1.Live2DCubismFramework.CubismFramework.getLoggingLevel()) {\r\n                return;\r\n            }\r\n            var logPrint = live2dcubismframework_1.Live2DCubismFramework.CubismFramework.coreLogFunction;\r\n            if (!logPrint)\r\n                return;\r\n            var buffer = format.replace(/\\{(\\d+)\\}/g, function (m, k) {\r\n                return args[k];\r\n            });\r\n            logPrint(buffer);\r\n        };\r\n        CubismDebug.dumpBytes = function (logLevel, data, length) {\r\n            for (var i = 0; i < length; i++) {\r\n                if (i % 16 == 0 && i > 0)\r\n                    this.print(logLevel, '\\n');\r\n                else if (i % 8 == 0 && i > 0)\r\n                    this.print(logLevel, '  ');\r\n                this.print(logLevel, '{0} ', [data[i] & 0xff]);\r\n            }\r\n            this.print(logLevel, '\\n');\r\n        };\r\n        return CubismDebug;\r\n    }());\r\n    Live2DCubismFramework.CubismDebug = CubismDebug;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/utils/cubismdebug.ts\n");

/***/ }),

/***/ "../../../Framework/src/utils/cubismjson.ts":
/*!****************************************************************************************!*\
  !*** C:/Users/mifas/Documents/redsoda0213.github.io/Framework/src/utils/cubismjson.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"../../../Framework/src/type/csmstring.ts\");\r\nvar csmmap_1 = __webpack_require__(/*! ../type/csmmap */ \"../../../Framework/src/type/csmmap.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ./cubismdebug */ \"../../../Framework/src/utils/cubismdebug.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar csmMap = csmmap_1.Live2DCubismFramework.csmMap;\r\nvar csmString = csmstring_1.Live2DCubismFramework.csmString;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';\r\n    var CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';\r\n    var Value = (function () {\r\n        function Value() {\r\n        }\r\n        Value.prototype.getRawString = function (defaultValue, indent) {\r\n            return this.getString(defaultValue, indent);\r\n        };\r\n        Value.prototype.toInt = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = 0; }\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.toFloat = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = 0; }\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.toBoolean = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = false; }\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.getSize = function () {\r\n            return 0;\r\n        };\r\n        Value.prototype.getArray = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.getVector = function (defaultValue) {\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.getMap = function (defaultValue) {\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.getValueByIndex = function (index) {\r\n            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\r\n        };\r\n        Value.prototype.getValueByString = function (s) {\r\n            return Value.nullValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\r\n        };\r\n        Value.prototype.getKeys = function () {\r\n            return Value.s_dummyKeys;\r\n        };\r\n        Value.prototype.isError = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isNull = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isBool = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isFloat = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isString = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isArray = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isMap = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.equals = function (value) {\r\n            return false;\r\n        };\r\n        Value.prototype.isStatic = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.setErrorNotForClientCall = function (errorStr) {\r\n            return JsonError.errorValue;\r\n        };\r\n        Value.staticInitializeNotForClientCall = function () {\r\n            JsonBoolean.trueValue = new JsonBoolean(true);\r\n            JsonBoolean.falseValue = new JsonBoolean(false);\r\n            JsonError.errorValue = new JsonError('ERROR', true);\r\n            this.nullValue = new JsonNullvalue();\r\n            Value.s_dummyKeys = new csmVector();\r\n        };\r\n        Value.staticReleaseNotForClientCall = function () {\r\n            JsonBoolean.trueValue = null;\r\n            JsonBoolean.falseValue = null;\r\n            JsonError.errorValue = null;\r\n            Value.nullValue = null;\r\n            Value.s_dummyKeys = null;\r\n            JsonBoolean.trueValue = null;\r\n            JsonBoolean.falseValue = null;\r\n            JsonError.errorValue = null;\r\n            Value.nullValue = null;\r\n            Value.s_dummyKeys = null;\r\n        };\r\n        return Value;\r\n    }());\r\n    Live2DCubismFramework.Value = Value;\r\n    var CubismJson = (function () {\r\n        function CubismJson(buffer, length) {\r\n            this._error = null;\r\n            this._lineCount = 0;\r\n            this._root = null;\r\n            if (buffer != undefined) {\r\n                this.parseBytes(buffer, length);\r\n            }\r\n        }\r\n        CubismJson.create = function (buffer, size) {\r\n            var json = new CubismJson();\r\n            var succeeded = json.parseBytes(buffer, size);\r\n            if (!succeeded) {\r\n                CubismJson.delete(json);\r\n                return null;\r\n            }\r\n            else {\r\n                return json;\r\n            }\r\n        };\r\n        CubismJson.delete = function (instance) {\r\n            instance = null;\r\n        };\r\n        CubismJson.prototype.getRoot = function () {\r\n            return this._root;\r\n        };\r\n        CubismJson.prototype.arrayBufferToString = function (buffer) {\r\n            var uint8Array = new Uint8Array(buffer);\r\n            var str = '';\r\n            for (var i = 0, len = uint8Array.length; i < len; ++i) {\r\n                str += '%' + this.pad(uint8Array[i].toString(16));\r\n            }\r\n            str = decodeURIComponent(str);\r\n            return str;\r\n        };\r\n        CubismJson.prototype.pad = function (n) {\r\n            return n.length < 2 ? '0' + n : n;\r\n        };\r\n        CubismJson.prototype.parseBytes = function (buffer, size) {\r\n            var endPos = new Array(1);\r\n            var decodeBuffer = this.arrayBufferToString(buffer);\r\n            this._root = this.parseValue(decodeBuffer, size, 0, endPos);\r\n            if (this._error) {\r\n                var strbuf = '\\0';\r\n                strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\\n';\r\n                this._root = new JsonString(strbuf);\r\n                cubismdebug_1.CubismLogInfo('{0}', this._root.getRawString());\r\n                return false;\r\n            }\r\n            else if (this._root == null) {\r\n                this._root = new JsonError(new csmString(this._error), false);\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        CubismJson.prototype.getParseError = function () {\r\n            return this._error;\r\n        };\r\n        CubismJson.prototype.checkEndOfFile = function () {\r\n            return this._root.getArray()[1].equals('EOF');\r\n        };\r\n        CubismJson.prototype.parseValue = function (buffer, length, begin, outEndPos) {\r\n            if (this._error)\r\n                return null;\r\n            var o = null;\r\n            var i = begin;\r\n            var f;\r\n            for (; i < length; i++) {\r\n                var c = buffer[i];\r\n                switch (c) {\r\n                    case '-':\r\n                    case '.':\r\n                    case '0':\r\n                    case '1':\r\n                    case '2':\r\n                    case '3':\r\n                    case '4':\r\n                    case '5':\r\n                    case '6':\r\n                    case '7':\r\n                    case '8':\r\n                    case '9': {\r\n                        var afterString = new Array(1);\r\n                        f = live2dcubismframework_1.strtod(buffer.slice(i), afterString);\r\n                        outEndPos[0] = buffer.indexOf(afterString[0]);\r\n                        return new JsonFloat(f);\r\n                    }\r\n                    case '\"':\r\n                        return new JsonString(this.parseString(buffer, length, i + 1, outEndPos));\r\n                    case '[':\r\n                        o = this.parseArray(buffer, length, i + 1, outEndPos);\r\n                        return o;\r\n                    case '{':\r\n                        o = this.parseObject(buffer, length, i + 1, outEndPos);\r\n                        return o;\r\n                    case 'n':\r\n                        if (i + 3 < length) {\r\n                            o = new JsonNullvalue();\r\n                            outEndPos[0] = i + 4;\r\n                        }\r\n                        else {\r\n                            this._error = 'parse null';\r\n                        }\r\n                        return o;\r\n                    case 't':\r\n                        if (i + 3 < length) {\r\n                            o = JsonBoolean.trueValue;\r\n                            outEndPos[0] = i + 4;\r\n                        }\r\n                        else {\r\n                            this._error = 'parse true';\r\n                        }\r\n                        return o;\r\n                    case 'f':\r\n                        if (i + 4 < length) {\r\n                            o = JsonBoolean.falseValue;\r\n                            outEndPos[0] = i + 5;\r\n                        }\r\n                        else {\r\n                            this._error = \"illegal ',' position\";\r\n                        }\r\n                        return o;\r\n                    case ',':\r\n                        this._error = \"illegal ',' position\";\r\n                        return null;\r\n                    case ']':\r\n                        outEndPos[0] = i;\r\n                        return null;\r\n                    case '\\n':\r\n                        this._lineCount++;\r\n                    case ' ':\r\n                    case '\\t':\r\n                    case '\\r':\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            this._error = 'illegal end of value';\r\n            return null;\r\n        };\r\n        CubismJson.prototype.parseString = function (string, length, begin, outEndPos) {\r\n            if (this._error)\r\n                return null;\r\n            var i = begin;\r\n            var c, c2;\r\n            var ret = new csmString('');\r\n            var bufStart = begin;\r\n            for (; i < length; i++) {\r\n                c = string[i];\r\n                switch (c) {\r\n                    case '\"': {\r\n                        outEndPos[0] = i + 1;\r\n                        ret.append(string.slice(bufStart), i - bufStart);\r\n                        return ret.s;\r\n                    }\r\n                    case '//': {\r\n                        i++;\r\n                        if (i - 1 > bufStart) {\r\n                            ret.append(string.slice(bufStart), i - bufStart);\r\n                        }\r\n                        bufStart = i + 1;\r\n                        if (i < length) {\r\n                            c2 = string[i];\r\n                            switch (c2) {\r\n                                case '\\\\':\r\n                                    ret.expansion(1, '\\\\');\r\n                                    break;\r\n                                case '\"':\r\n                                    ret.expansion(1, '\"');\r\n                                    break;\r\n                                case '/':\r\n                                    ret.expansion(1, '/');\r\n                                    break;\r\n                                case 'b':\r\n                                    ret.expansion(1, '\\b');\r\n                                    break;\r\n                                case 'f':\r\n                                    ret.expansion(1, '\\f');\r\n                                    break;\r\n                                case 'n':\r\n                                    ret.expansion(1, '\\n');\r\n                                    break;\r\n                                case 'r':\r\n                                    ret.expansion(1, '\\r');\r\n                                    break;\r\n                                case 't':\r\n                                    ret.expansion(1, '\\t');\r\n                                    break;\r\n                                case 'u':\r\n                                    this._error = 'parse string/unicord escape not supported';\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else {\r\n                            this._error = 'parse string/escape error';\r\n                        }\r\n                    }\r\n                    default: {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this._error = 'parse string/illegal end';\r\n            return null;\r\n        };\r\n        CubismJson.prototype.parseObject = function (buffer, length, begin, outEndPos) {\r\n            if (this._error)\r\n                return null;\r\n            var ret = new JsonMap();\r\n            var key = '';\r\n            var i = begin;\r\n            var c = '';\r\n            var localRetEndPos2 = Array(1);\r\n            var ok = false;\r\n            for (; i < length; i++) {\r\n                FOR_LOOP: for (; i < length; i++) {\r\n                    c = buffer[i];\r\n                    switch (c) {\r\n                        case '\"':\r\n                            key = this.parseString(buffer, length, i + 1, localRetEndPos2);\r\n                            if (this._error) {\r\n                                return null;\r\n                            }\r\n                            i = localRetEndPos2[0];\r\n                            ok = true;\r\n                            break FOR_LOOP;\r\n                        case '}':\r\n                            outEndPos[0] = i + 1;\r\n                            return ret;\r\n                        case ':':\r\n                            this._error = \"illegal ':' position\";\r\n                            break;\r\n                        case '\\n':\r\n                            this._lineCount++;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                if (!ok) {\r\n                    this._error = 'key not found';\r\n                    return null;\r\n                }\r\n                ok = false;\r\n                FOR_LOOP2: for (; i < length; i++) {\r\n                    c = buffer[i];\r\n                    switch (c) {\r\n                        case ':':\r\n                            ok = true;\r\n                            i++;\r\n                            break FOR_LOOP2;\r\n                        case '}':\r\n                            this._error = \"illegal '}' position\";\r\n                            break;\r\n                        case '\\n':\r\n                            this._lineCount++;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                if (!ok) {\r\n                    this._error = \"':' not found\";\r\n                    return null;\r\n                }\r\n                var value = this.parseValue(buffer, length, i, localRetEndPos2);\r\n                if (this._error) {\r\n                    return null;\r\n                }\r\n                i = localRetEndPos2[0];\r\n                ret.put(key, value);\r\n                FOR_LOOP3: for (; i < length; i++) {\r\n                    c = buffer[i];\r\n                    switch (c) {\r\n                        case ',':\r\n                            break FOR_LOOP3;\r\n                        case '}':\r\n                            outEndPos[0] = i + 1;\r\n                            return ret;\r\n                        case '\\n':\r\n                            this._lineCount++;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            this._error = 'illegal end of perseObject';\r\n            return null;\r\n        };\r\n        CubismJson.prototype.parseArray = function (buffer, length, begin, outEndPos) {\r\n            if (this._error)\r\n                return null;\r\n            var ret = new JsonArray();\r\n            var i = begin;\r\n            var c;\r\n            var localRetEndpos2 = new Array(1);\r\n            for (; i < length; i++) {\r\n                var value = this.parseValue(buffer, length, i, localRetEndpos2);\r\n                if (this._error) {\r\n                    return null;\r\n                }\r\n                i = localRetEndpos2[0];\r\n                if (value) {\r\n                    ret.add(value);\r\n                }\r\n                FOR_LOOP: for (; i < length; i++) {\r\n                    c = buffer[i];\r\n                    switch (c) {\r\n                        case ',':\r\n                            break FOR_LOOP;\r\n                        case ']':\r\n                            outEndPos[0] = i + 1;\r\n                            return ret;\r\n                        case '\\n':\r\n                            ++this._lineCount;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            ret = void 0;\r\n            this._error = 'illegal end of parseObject';\r\n            return null;\r\n        };\r\n        return CubismJson;\r\n    }());\r\n    Live2DCubismFramework.CubismJson = CubismJson;\r\n    var JsonFloat = (function (_super) {\r\n        __extends(JsonFloat, _super);\r\n        function JsonFloat(v) {\r\n            var _this = _super.call(this) || this;\r\n            _this._value = v;\r\n            return _this;\r\n        }\r\n        JsonFloat.prototype.isFloat = function () {\r\n            return true;\r\n        };\r\n        JsonFloat.prototype.getString = function (defaultValue, indent) {\r\n            var strbuf = '\\0';\r\n            this._value = parseFloat(strbuf);\r\n            this._stringBuffer = strbuf;\r\n            return this._stringBuffer;\r\n        };\r\n        JsonFloat.prototype.toInt = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = 0; }\r\n            return parseInt(this._value.toString());\r\n        };\r\n        JsonFloat.prototype.toFloat = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = 0.0; }\r\n            return this._value;\r\n        };\r\n        JsonFloat.prototype.equals = function (value) {\r\n            if ('number' === typeof value) {\r\n                if (Math.round(value)) {\r\n                    return false;\r\n                }\r\n                else {\r\n                    return value == this._value;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        return JsonFloat;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonFloat = JsonFloat;\r\n    var JsonBoolean = (function (_super) {\r\n        __extends(JsonBoolean, _super);\r\n        function JsonBoolean(v) {\r\n            var _this = _super.call(this) || this;\r\n            _this._boolValue = v;\r\n            return _this;\r\n        }\r\n        JsonBoolean.prototype.isBool = function () {\r\n            return true;\r\n        };\r\n        JsonBoolean.prototype.toBoolean = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = false; }\r\n            return this._boolValue;\r\n        };\r\n        JsonBoolean.prototype.getString = function (defaultValue, indent) {\r\n            this._stringBuffer = this._boolValue ? 'true' : 'false';\r\n            return this._stringBuffer;\r\n        };\r\n        JsonBoolean.prototype.equals = function (value) {\r\n            if ('boolean' === typeof value) {\r\n                return value == this._boolValue;\r\n            }\r\n            return false;\r\n        };\r\n        JsonBoolean.prototype.isStatic = function () {\r\n            return true;\r\n        };\r\n        return JsonBoolean;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonBoolean = JsonBoolean;\r\n    var JsonString = (function (_super) {\r\n        __extends(JsonString, _super);\r\n        function JsonString(s) {\r\n            var _this = _super.call(this) || this;\r\n            if ('string' === typeof s) {\r\n                _this._stringBuffer = s;\r\n            }\r\n            if (s instanceof csmString) {\r\n                _this._stringBuffer = s.s;\r\n            }\r\n            return _this;\r\n        }\r\n        JsonString.prototype.isString = function () {\r\n            return true;\r\n        };\r\n        JsonString.prototype.getString = function (defaultValue, indent) {\r\n            return this._stringBuffer;\r\n        };\r\n        JsonString.prototype.equals = function (value) {\r\n            if ('string' === typeof value) {\r\n                return this._stringBuffer == value;\r\n            }\r\n            if (value instanceof csmString) {\r\n                return this._stringBuffer == value.s;\r\n            }\r\n            return false;\r\n        };\r\n        return JsonString;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonString = JsonString;\r\n    var JsonError = (function (_super) {\r\n        __extends(JsonError, _super);\r\n        function JsonError(s, isStatic) {\r\n            var _this = this;\r\n            if ('string' === typeof s) {\r\n                _this = _super.call(this, s) || this;\r\n            }\r\n            else {\r\n                _this = _super.call(this, s) || this;\r\n            }\r\n            _this._isStatic = isStatic;\r\n            return _this;\r\n        }\r\n        JsonError.prototype.isStatic = function () {\r\n            return this._isStatic;\r\n        };\r\n        JsonError.prototype.setErrorNotForClientCall = function (s) {\r\n            this._stringBuffer = s;\r\n            return this;\r\n        };\r\n        JsonError.prototype.isError = function () {\r\n            return true;\r\n        };\r\n        return JsonError;\r\n    }(JsonString));\r\n    Live2DCubismFramework.JsonError = JsonError;\r\n    var JsonNullvalue = (function (_super) {\r\n        __extends(JsonNullvalue, _super);\r\n        function JsonNullvalue() {\r\n            var _this = _super.call(this) || this;\r\n            _this._stringBuffer = 'NullValue';\r\n            return _this;\r\n        }\r\n        JsonNullvalue.prototype.isNull = function () {\r\n            return true;\r\n        };\r\n        JsonNullvalue.prototype.getString = function (defaultValue, indent) {\r\n            return this._stringBuffer;\r\n        };\r\n        JsonNullvalue.prototype.isStatic = function () {\r\n            return true;\r\n        };\r\n        return JsonNullvalue;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonNullvalue = JsonNullvalue;\r\n    var JsonArray = (function (_super) {\r\n        __extends(JsonArray, _super);\r\n        function JsonArray() {\r\n            var _this = _super.call(this) || this;\r\n            _this._array = new csmVector();\r\n            return _this;\r\n        }\r\n        JsonArray.prototype.release = function () {\r\n            for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.preIncrement()) {\r\n                var v = ite.ptr();\r\n                if (v && !v.isStatic()) {\r\n                    v = void 0;\r\n                    v = null;\r\n                }\r\n            }\r\n        };\r\n        JsonArray.prototype.isArray = function () {\r\n            return true;\r\n        };\r\n        JsonArray.prototype.getValueByIndex = function (index) {\r\n            if (index < 0 || this._array.getSize() <= index) {\r\n                return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_INDEX_OF_BOUNDS);\r\n            }\r\n            var v = this._array.at(index);\r\n            if (v == null) {\r\n                return Value.nullValue;\r\n            }\r\n            return v;\r\n        };\r\n        JsonArray.prototype.getValueByString = function (s) {\r\n            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\r\n        };\r\n        JsonArray.prototype.getString = function (defaultValue, indent) {\r\n            var stringBuffer = indent + '[\\n';\r\n            for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.increment()) {\r\n                var v = ite.ptr();\r\n                this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\\n';\r\n            }\r\n            this._stringBuffer = stringBuffer + indent + ']\\n';\r\n            return this._stringBuffer;\r\n        };\r\n        JsonArray.prototype.add = function (v) {\r\n            this._array.pushBack(v);\r\n        };\r\n        JsonArray.prototype.getVector = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            return this._array;\r\n        };\r\n        JsonArray.prototype.getSize = function () {\r\n            return this._array.getSize();\r\n        };\r\n        return JsonArray;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonArray = JsonArray;\r\n    var JsonMap = (function (_super) {\r\n        __extends(JsonMap, _super);\r\n        function JsonMap() {\r\n            var _this = _super.call(this) || this;\r\n            _this._map = new csmMap();\r\n            return _this;\r\n        }\r\n        JsonMap.prototype.release = function () {\r\n            var ite = this._map.begin();\r\n            while (ite.notEqual(this._map.end())) {\r\n                var v = ite.ptr().second;\r\n                if (v && !v.isStatic()) {\r\n                    v = void 0;\r\n                    v = null;\r\n                }\r\n                ite.preIncrement();\r\n            }\r\n        };\r\n        JsonMap.prototype.isMap = function () {\r\n            return true;\r\n        };\r\n        JsonMap.prototype.getValueByString = function (s) {\r\n            if (s instanceof csmString) {\r\n                var ret = this._map.getValue(s.s);\r\n                if (ret == null) {\r\n                    return Value.nullValue;\r\n                }\r\n                return ret;\r\n            }\r\n            for (var iter = this._map.begin(); iter.notEqual(this._map.end()); iter.preIncrement()) {\r\n                if (iter.ptr().first == s) {\r\n                    if (iter.ptr().second == null) {\r\n                        return Value.nullValue;\r\n                    }\r\n                    return iter.ptr().second;\r\n                }\r\n            }\r\n            return Value.nullValue;\r\n        };\r\n        JsonMap.prototype.getValueByIndex = function (index) {\r\n            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\r\n        };\r\n        JsonMap.prototype.getString = function (defaultValue, indent) {\r\n            this._stringBuffer = indent + '{\\n';\r\n            var ite = this._map.begin();\r\n            while (ite.notEqual(this._map.end())) {\r\n                var key = ite.ptr().first;\r\n                var v = ite.ptr().second;\r\n                this._stringBuffer +=\r\n                    indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \\n';\r\n                ite.preIncrement();\r\n            }\r\n            this._stringBuffer += indent + '}\\n';\r\n            return this._stringBuffer;\r\n        };\r\n        JsonMap.prototype.getMap = function (defaultValue) {\r\n            return this._map;\r\n        };\r\n        JsonMap.prototype.put = function (key, v) {\r\n            this._map.setValue(key, v);\r\n        };\r\n        JsonMap.prototype.getKeys = function () {\r\n            if (!this._keys) {\r\n                this._keys = new csmVector();\r\n                var ite = this._map.begin();\r\n                while (ite.notEqual(this._map.end())) {\r\n                    var key = ite.ptr().first;\r\n                    this._keys.pushBack(key);\r\n                    ite.preIncrement();\r\n                }\r\n            }\r\n            return this._keys;\r\n        };\r\n        JsonMap.prototype.getSize = function () {\r\n            return this._keys.getSize();\r\n        };\r\n        return JsonMap;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonMap = JsonMap;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../Framework/src/utils/cubismjson.ts\n");

/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! exports provided: Headers, Request, Response, DOMException, fetch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Headers\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Request\", function() { return Request; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Response\", function() { return Response; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMException\", function() { return DOMException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetch\", function() { return fetch; });\nvar support = {\r\n  searchParams: 'URLSearchParams' in self,\r\n  iterable: 'Symbol' in self && 'iterator' in Symbol,\r\n  blob:\r\n    'FileReader' in self &&\r\n    'Blob' in self &&\r\n    (function() {\r\n      try {\r\n        new Blob()\r\n        return true\r\n      } catch (e) {\r\n        return false\r\n      }\r\n    })(),\r\n  formData: 'FormData' in self,\r\n  arrayBuffer: 'ArrayBuffer' in self\r\n}\r\n\r\nfunction isDataView(obj) {\r\n  return obj && DataView.prototype.isPrototypeOf(obj)\r\n}\r\n\r\nif (support.arrayBuffer) {\r\n  var viewClasses = [\r\n    '[object Int8Array]',\r\n    '[object Uint8Array]',\r\n    '[object Uint8ClampedArray]',\r\n    '[object Int16Array]',\r\n    '[object Uint16Array]',\r\n    '[object Int32Array]',\r\n    '[object Uint32Array]',\r\n    '[object Float32Array]',\r\n    '[object Float64Array]'\r\n  ]\r\n\r\n  var isArrayBufferView =\r\n    ArrayBuffer.isView ||\r\n    function(obj) {\r\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\r\n    }\r\n}\r\n\r\nfunction normalizeName(name) {\r\n  if (typeof name !== 'string') {\r\n    name = String(name)\r\n  }\r\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\r\n    throw new TypeError('Invalid character in header field name')\r\n  }\r\n  return name.toLowerCase()\r\n}\r\n\r\nfunction normalizeValue(value) {\r\n  if (typeof value !== 'string') {\r\n    value = String(value)\r\n  }\r\n  return value\r\n}\r\n\r\n// Build a destructive iterator for the value list\r\nfunction iteratorFor(items) {\r\n  var iterator = {\r\n    next: function() {\r\n      var value = items.shift()\r\n      return {done: value === undefined, value: value}\r\n    }\r\n  }\r\n\r\n  if (support.iterable) {\r\n    iterator[Symbol.iterator] = function() {\r\n      return iterator\r\n    }\r\n  }\r\n\r\n  return iterator\r\n}\r\n\r\nfunction Headers(headers) {\r\n  this.map = {}\r\n\r\n  if (headers instanceof Headers) {\r\n    headers.forEach(function(value, name) {\r\n      this.append(name, value)\r\n    }, this)\r\n  } else if (Array.isArray(headers)) {\r\n    headers.forEach(function(header) {\r\n      this.append(header[0], header[1])\r\n    }, this)\r\n  } else if (headers) {\r\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\r\n      this.append(name, headers[name])\r\n    }, this)\r\n  }\r\n}\r\n\r\nHeaders.prototype.append = function(name, value) {\r\n  name = normalizeName(name)\r\n  value = normalizeValue(value)\r\n  var oldValue = this.map[name]\r\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\r\n}\r\n\r\nHeaders.prototype['delete'] = function(name) {\r\n  delete this.map[normalizeName(name)]\r\n}\r\n\r\nHeaders.prototype.get = function(name) {\r\n  name = normalizeName(name)\r\n  return this.has(name) ? this.map[name] : null\r\n}\r\n\r\nHeaders.prototype.has = function(name) {\r\n  return this.map.hasOwnProperty(normalizeName(name))\r\n}\r\n\r\nHeaders.prototype.set = function(name, value) {\r\n  this.map[normalizeName(name)] = normalizeValue(value)\r\n}\r\n\r\nHeaders.prototype.forEach = function(callback, thisArg) {\r\n  for (var name in this.map) {\r\n    if (this.map.hasOwnProperty(name)) {\r\n      callback.call(thisArg, this.map[name], name, this)\r\n    }\r\n  }\r\n}\r\n\r\nHeaders.prototype.keys = function() {\r\n  var items = []\r\n  this.forEach(function(value, name) {\r\n    items.push(name)\r\n  })\r\n  return iteratorFor(items)\r\n}\r\n\r\nHeaders.prototype.values = function() {\r\n  var items = []\r\n  this.forEach(function(value) {\r\n    items.push(value)\r\n  })\r\n  return iteratorFor(items)\r\n}\r\n\r\nHeaders.prototype.entries = function() {\r\n  var items = []\r\n  this.forEach(function(value, name) {\r\n    items.push([name, value])\r\n  })\r\n  return iteratorFor(items)\r\n}\r\n\r\nif (support.iterable) {\r\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\r\n}\r\n\r\nfunction consumed(body) {\r\n  if (body.bodyUsed) {\r\n    return Promise.reject(new TypeError('Already read'))\r\n  }\r\n  body.bodyUsed = true\r\n}\r\n\r\nfunction fileReaderReady(reader) {\r\n  return new Promise(function(resolve, reject) {\r\n    reader.onload = function() {\r\n      resolve(reader.result)\r\n    }\r\n    reader.onerror = function() {\r\n      reject(reader.error)\r\n    }\r\n  })\r\n}\r\n\r\nfunction readBlobAsArrayBuffer(blob) {\r\n  var reader = new FileReader()\r\n  var promise = fileReaderReady(reader)\r\n  reader.readAsArrayBuffer(blob)\r\n  return promise\r\n}\r\n\r\nfunction readBlobAsText(blob) {\r\n  var reader = new FileReader()\r\n  var promise = fileReaderReady(reader)\r\n  reader.readAsText(blob)\r\n  return promise\r\n}\r\n\r\nfunction readArrayBufferAsText(buf) {\r\n  var view = new Uint8Array(buf)\r\n  var chars = new Array(view.length)\r\n\r\n  for (var i = 0; i < view.length; i++) {\r\n    chars[i] = String.fromCharCode(view[i])\r\n  }\r\n  return chars.join('')\r\n}\r\n\r\nfunction bufferClone(buf) {\r\n  if (buf.slice) {\r\n    return buf.slice(0)\r\n  } else {\r\n    var view = new Uint8Array(buf.byteLength)\r\n    view.set(new Uint8Array(buf))\r\n    return view.buffer\r\n  }\r\n}\r\n\r\nfunction Body() {\r\n  this.bodyUsed = false\r\n\r\n  this._initBody = function(body) {\r\n    this._bodyInit = body\r\n    if (!body) {\r\n      this._bodyText = ''\r\n    } else if (typeof body === 'string') {\r\n      this._bodyText = body\r\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\r\n      this._bodyBlob = body\r\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\r\n      this._bodyFormData = body\r\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\r\n      this._bodyText = body.toString()\r\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\r\n      this._bodyArrayBuffer = bufferClone(body.buffer)\r\n      // IE 10-11 can't handle a DataView body.\r\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\r\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\r\n      this._bodyArrayBuffer = bufferClone(body)\r\n    } else {\r\n      this._bodyText = body = Object.prototype.toString.call(body)\r\n    }\r\n\r\n    if (!this.headers.get('content-type')) {\r\n      if (typeof body === 'string') {\r\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\r\n      } else if (this._bodyBlob && this._bodyBlob.type) {\r\n        this.headers.set('content-type', this._bodyBlob.type)\r\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\r\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\r\n      }\r\n    }\r\n  }\r\n\r\n  if (support.blob) {\r\n    this.blob = function() {\r\n      var rejected = consumed(this)\r\n      if (rejected) {\r\n        return rejected\r\n      }\r\n\r\n      if (this._bodyBlob) {\r\n        return Promise.resolve(this._bodyBlob)\r\n      } else if (this._bodyArrayBuffer) {\r\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\r\n      } else if (this._bodyFormData) {\r\n        throw new Error('could not read FormData body as blob')\r\n      } else {\r\n        return Promise.resolve(new Blob([this._bodyText]))\r\n      }\r\n    }\r\n\r\n    this.arrayBuffer = function() {\r\n      if (this._bodyArrayBuffer) {\r\n        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\r\n      } else {\r\n        return this.blob().then(readBlobAsArrayBuffer)\r\n      }\r\n    }\r\n  }\r\n\r\n  this.text = function() {\r\n    var rejected = consumed(this)\r\n    if (rejected) {\r\n      return rejected\r\n    }\r\n\r\n    if (this._bodyBlob) {\r\n      return readBlobAsText(this._bodyBlob)\r\n    } else if (this._bodyArrayBuffer) {\r\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\r\n    } else if (this._bodyFormData) {\r\n      throw new Error('could not read FormData body as text')\r\n    } else {\r\n      return Promise.resolve(this._bodyText)\r\n    }\r\n  }\r\n\r\n  if (support.formData) {\r\n    this.formData = function() {\r\n      return this.text().then(decode)\r\n    }\r\n  }\r\n\r\n  this.json = function() {\r\n    return this.text().then(JSON.parse)\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n// HTTP methods whose capitalization should be normalized\r\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\r\n\r\nfunction normalizeMethod(method) {\r\n  var upcased = method.toUpperCase()\r\n  return methods.indexOf(upcased) > -1 ? upcased : method\r\n}\r\n\r\nfunction Request(input, options) {\r\n  options = options || {}\r\n  var body = options.body\r\n\r\n  if (input instanceof Request) {\r\n    if (input.bodyUsed) {\r\n      throw new TypeError('Already read')\r\n    }\r\n    this.url = input.url\r\n    this.credentials = input.credentials\r\n    if (!options.headers) {\r\n      this.headers = new Headers(input.headers)\r\n    }\r\n    this.method = input.method\r\n    this.mode = input.mode\r\n    this.signal = input.signal\r\n    if (!body && input._bodyInit != null) {\r\n      body = input._bodyInit\r\n      input.bodyUsed = true\r\n    }\r\n  } else {\r\n    this.url = String(input)\r\n  }\r\n\r\n  this.credentials = options.credentials || this.credentials || 'same-origin'\r\n  if (options.headers || !this.headers) {\r\n    this.headers = new Headers(options.headers)\r\n  }\r\n  this.method = normalizeMethod(options.method || this.method || 'GET')\r\n  this.mode = options.mode || this.mode || null\r\n  this.signal = options.signal || this.signal\r\n  this.referrer = null\r\n\r\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\r\n    throw new TypeError('Body not allowed for GET or HEAD requests')\r\n  }\r\n  this._initBody(body)\r\n}\r\n\r\nRequest.prototype.clone = function() {\r\n  return new Request(this, {body: this._bodyInit})\r\n}\r\n\r\nfunction decode(body) {\r\n  var form = new FormData()\r\n  body\r\n    .trim()\r\n    .split('&')\r\n    .forEach(function(bytes) {\r\n      if (bytes) {\r\n        var split = bytes.split('=')\r\n        var name = split.shift().replace(/\\+/g, ' ')\r\n        var value = split.join('=').replace(/\\+/g, ' ')\r\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\r\n      }\r\n    })\r\n  return form\r\n}\r\n\r\nfunction parseHeaders(rawHeaders) {\r\n  var headers = new Headers()\r\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\r\n  // https://tools.ietf.org/html/rfc7230#section-3.2\r\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\r\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\r\n    var parts = line.split(':')\r\n    var key = parts.shift().trim()\r\n    if (key) {\r\n      var value = parts.join(':').trim()\r\n      headers.append(key, value)\r\n    }\r\n  })\r\n  return headers\r\n}\r\n\r\nBody.call(Request.prototype)\r\n\r\nfunction Response(bodyInit, options) {\r\n  if (!options) {\r\n    options = {}\r\n  }\r\n\r\n  this.type = 'default'\r\n  this.status = options.status === undefined ? 200 : options.status\r\n  this.ok = this.status >= 200 && this.status < 300\r\n  this.statusText = 'statusText' in options ? options.statusText : 'OK'\r\n  this.headers = new Headers(options.headers)\r\n  this.url = options.url || ''\r\n  this._initBody(bodyInit)\r\n}\r\n\r\nBody.call(Response.prototype)\r\n\r\nResponse.prototype.clone = function() {\r\n  return new Response(this._bodyInit, {\r\n    status: this.status,\r\n    statusText: this.statusText,\r\n    headers: new Headers(this.headers),\r\n    url: this.url\r\n  })\r\n}\r\n\r\nResponse.error = function() {\r\n  var response = new Response(null, {status: 0, statusText: ''})\r\n  response.type = 'error'\r\n  return response\r\n}\r\n\r\nvar redirectStatuses = [301, 302, 303, 307, 308]\r\n\r\nResponse.redirect = function(url, status) {\r\n  if (redirectStatuses.indexOf(status) === -1) {\r\n    throw new RangeError('Invalid status code')\r\n  }\r\n\r\n  return new Response(null, {status: status, headers: {location: url}})\r\n}\r\n\r\nvar DOMException = self.DOMException\r\ntry {\r\n  new DOMException()\r\n} catch (err) {\r\n  DOMException = function(message, name) {\r\n    this.message = message\r\n    this.name = name\r\n    var error = Error(message)\r\n    this.stack = error.stack\r\n  }\r\n  DOMException.prototype = Object.create(Error.prototype)\r\n  DOMException.prototype.constructor = DOMException\r\n}\r\n\r\nfunction fetch(input, init) {\r\n  return new Promise(function(resolve, reject) {\r\n    var request = new Request(input, init)\r\n\r\n    if (request.signal && request.signal.aborted) {\r\n      return reject(new DOMException('Aborted', 'AbortError'))\r\n    }\r\n\r\n    var xhr = new XMLHttpRequest()\r\n\r\n    function abortXhr() {\r\n      xhr.abort()\r\n    }\r\n\r\n    xhr.onload = function() {\r\n      var options = {\r\n        status: xhr.status,\r\n        statusText: xhr.statusText,\r\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\r\n      }\r\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\r\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\r\n      resolve(new Response(body, options))\r\n    }\r\n\r\n    xhr.onerror = function() {\r\n      reject(new TypeError('Network request failed'))\r\n    }\r\n\r\n    xhr.ontimeout = function() {\r\n      reject(new TypeError('Network request failed'))\r\n    }\r\n\r\n    xhr.onabort = function() {\r\n      reject(new DOMException('Aborted', 'AbortError'))\r\n    }\r\n\r\n    xhr.open(request.method, request.url, true)\r\n\r\n    if (request.credentials === 'include') {\r\n      xhr.withCredentials = true\r\n    } else if (request.credentials === 'omit') {\r\n      xhr.withCredentials = false\r\n    }\r\n\r\n    if ('responseType' in xhr && support.blob) {\r\n      xhr.responseType = 'blob'\r\n    }\r\n\r\n    request.headers.forEach(function(value, name) {\r\n      xhr.setRequestHeader(name, value)\r\n    })\r\n\r\n    if (request.signal) {\r\n      request.signal.addEventListener('abort', abortXhr)\r\n\r\n      xhr.onreadystatechange = function() {\r\n        // DONE (success or failure)\r\n        if (xhr.readyState === 4) {\r\n          request.signal.removeEventListener('abort', abortXhr)\r\n        }\r\n      }\r\n    }\r\n\r\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\r\n  })\r\n}\r\n\r\nfetch.polyfill = true\r\n\r\nif (!self.fetch) {\r\n  self.fetch = fetch\r\n  self.Headers = Headers\r\n  self.Request = Request\r\n  self.Response = Response\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/whatwg-fetch/fetch.js\n");

/***/ }),

/***/ "./src/lappdefine.ts":
/*!***************************!*\
  !*** ./src/lappdefine.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nexports.ViewMaxScale = 2.0;\r\nexports.ViewMinScale = 0.8;\r\nexports.ViewLogicalLeft = -1.0;\r\nexports.ViewLogicalRight = 1.0;\r\nexports.ViewLogicalMaxLeft = -2.0;\r\nexports.ViewLogicalMaxRight = 2.0;\r\nexports.ViewLogicalMaxBottom = -2.0;\r\nexports.ViewLogicalMaxTop = 2.0;\r\nexports.ResourcesPath = '../../Resources/';\r\nexports.BackImageName = 'transparent2.png';\r\nexports.GearImageName = 'icon_gear.png';\r\nexports.PowerImageName = 'CloseNormal.png';\r\nexports.ModelDir = ['船長第三周示範用_身體的部分'];\r\nexports.ModelDirSize = exports.ModelDir.length;\r\nexports.MotionGroupIdle = 'Idle';\r\nexports.MotionGroupTapBody = 'TapBody';\r\nexports.MotionGroupTapBody2 = 'TapBody2';\r\nexports.HitAreaNameHead = 'Head';\r\nexports.HitAreaNameBody = 'Body';\r\nexports.HitAreaNameBody2 = 'Body2';\r\nexports.PriorityNone = 0;\r\nexports.PriorityIdle = 1;\r\nexports.PriorityNormal = 2;\r\nexports.PriorityForce = 3;\r\nexports.DebugLogEnable = true;\r\nexports.DebugTouchLogEnable = false;\r\nexports.CubismLoggingLevel = live2dcubismframework_1.LogLevel.LogLevel_Verbose;\r\nexports.RenderTargetWidth = document.documentElement.clientWidth;\r\nexports.RenderTargetHeight = document.documentElement.clientHeight;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFwcGRlZmluZS50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9sYXBwZGVmaW5lLnRzPzFjM2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJ0BmcmFtZXdvcmsvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcclxuXHJcbi8qKlxyXG4gKiBTYW1wbGUgQXBw44Gn5L2/55So44GZ44KL5a6a5pWwXHJcbiAqL1xyXG4vLyDnlLvpnaJcclxuZXhwb3J0IGNvbnN0IFZpZXdNYXhTY2FsZSA9IDIuMDtcclxuZXhwb3J0IGNvbnN0IFZpZXdNaW5TY2FsZSA9IDAuODtcclxuLy9leHBvcnQgY29uc3QgVmlld01heFNjYWxlID0gMTAwLjA7XHJcbi8vZXhwb3J0IGNvbnN0IFZpZXdNaW5TY2FsZSA9IDAuODtcclxuXHJcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbExlZnQgPSAtMS4wO1xyXG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxSaWdodCA9IDEuMDtcclxuXHJcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heExlZnQgPSAtMi4wO1xyXG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhSaWdodCA9IDIuMDtcclxuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4Qm90dG9tID0gLTIuMDtcclxuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4VG9wID0gMi4wO1xyXG5cclxuLy8g55u45a++44OR44K5XHJcbmV4cG9ydCBjb25zdCBSZXNvdXJjZXNQYXRoID0gJy4uLy4uL1Jlc291cmNlcy8nO1xyXG5cclxuLy8g44Oi44OH44Or44Gu5b6M44KN44Gr44GC44KL6IOM5pmv44Gu55S75YOP44OV44Kh44Kk44OrXHJcbmV4cG9ydCBjb25zdCBCYWNrSW1hZ2VOYW1lID0gJ3RyYW5zcGFyZW50Mi5wbmcnO1xyXG5cclxuLy8g5q2v6LuKXHJcbmV4cG9ydCBjb25zdCBHZWFySW1hZ2VOYW1lID0gJ2ljb25fZ2Vhci5wbmcnO1xyXG5cclxuLy8g57WC5LqG44Oc44K/44OzXHJcbmV4cG9ydCBjb25zdCBQb3dlckltYWdlTmFtZSA9ICdDbG9zZU5vcm1hbC5wbmcnO1xyXG5cclxuLy8g44Oi44OH44Or5a6a576pLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIOODouODh+ODq+OCkumFjee9ruOBl+OBn+ODh+OCo+ODrOOCr+ODiOODquWQjeOBrumFjeWIl1xyXG4vLyDjg4fjgqPjg6zjgq/jg4jjg6rlkI3jgahtb2RlbDMuanNvbuOBruWQjeWJjeOCkuS4gOiHtOOBleOBm+OBpuOBiuOBj+OBk+OBqFxyXG5leHBvcnQgY29uc3QgTW9kZWxEaXI6IHN0cmluZ1tdID0gWyfoiLnplbfnrKzkuInlkajnpLrnr4TnlKhf6Lqr6auU55qE6YOo5YiGJ107XHJcbmV4cG9ydCBjb25zdCBNb2RlbERpclNpemU6IG51bWJlciA9IE1vZGVsRGlyLmxlbmd0aDtcclxuXHJcbi8vIOWklumDqOWumue+qeODleOCoeOCpOODq++8iGpzb27vvInjgajlkIjjgo/jgZvjgotcclxuZXhwb3J0IGNvbnN0IE1vdGlvbkdyb3VwSWRsZSA9ICdJZGxlJzsgLy8g44Ki44Kk44OJ44Oq44Oz44KwXHJcbmV4cG9ydCBjb25zdCBNb3Rpb25Hcm91cFRhcEJvZHkgPSAnVGFwQm9keSc7IC8vIOS9k+OCkuOCv+ODg+ODl+OBl+OBn+OBqOOBjVxyXG5leHBvcnQgY29uc3QgTW90aW9uR3JvdXBUYXBCb2R5MiA9ICdUYXBCb2R5Mic7IC8vIOS9k+OCkuOCv+ODg+ODl+OBl+OBn+OBqOOBjVxyXG5cclxuLy8g5aSW6YOo5a6a576p44OV44Kh44Kk44Or77yIanNvbu+8ieOBqOWQiOOCj+OBm+OCi1xyXG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVIZWFkID0gJ0hlYWQnO1xyXG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVCb2R5ID0gJ0JvZHknO1xyXG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVCb2R5MiA9ICdCb2R5Mic7XHJcblxyXG4vLyDjg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqblrprmlbBcclxuZXhwb3J0IGNvbnN0IFByaW9yaXR5Tm9uZSA9IDA7XHJcbmV4cG9ydCBjb25zdCBQcmlvcml0eUlkbGUgPSAxO1xyXG5leHBvcnQgY29uc3QgUHJpb3JpdHlOb3JtYWwgPSAyO1xyXG5leHBvcnQgY29uc3QgUHJpb3JpdHlGb3JjZSA9IDM7XHJcblxyXG4vLyDjg4fjg5Djg4PjgrDnlKjjg63jgrDjga7ooajnpLrjgqrjg5fjgrfjg6fjg7NcclxuZXhwb3J0IGNvbnN0IERlYnVnTG9nRW5hYmxlID0gdHJ1ZTtcclxuZXhwb3J0IGNvbnN0IERlYnVnVG91Y2hMb2dFbmFibGUgPSBmYWxzZTtcclxuXHJcbi8vIEZyYW1ld29ya+OBi+OCieWHuuWKm+OBmeOCi+ODreOCsOOBruODrOODmeODq+ioreWumlxyXG5leHBvcnQgY29uc3QgQ3ViaXNtTG9nZ2luZ0xldmVsOiBMb2dMZXZlbCA9IExvZ0xldmVsLkxvZ0xldmVsX1ZlcmJvc2U7XHJcblxyXG4vLyDjg4fjg5Xjgqnjg6vjg4jjga7jg6zjg7Pjg4Djg7zjgr/jg7zjgrLjg4Pjg4jjgrXjgqTjgrpcclxuLy9leHBvcnQgY29uc3QgUmVuZGVyVGFyZ2V0V2lkdGggPSAxOTAwO1xyXG4vL2V4cG9ydCBjb25zdCBSZW5kZXJUYXJnZXRIZWlnaHQgPSAxMDAwO1xyXG5cclxuLy8gZXhwb3J0IGNvbnN0IFJlbmRlclRhcmdldFdpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSAyMDtcclxuLy8gZXhwb3J0IGNvbnN0IFJlbmRlclRhcmdldEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIDIwO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJlbmRlclRhcmdldFdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xyXG5leHBvcnQgY29uc3QgUmVuZGVyVGFyZ2V0SGVpZ2h0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDsiXSwibWFwcGluZ3MiOiI7O0FBT0E7QUFNQTtBQUNBO0FBSUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFLQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFTQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/lappdefine.ts\n");

/***/ }),

/***/ "./src/lappdelegate.ts":
/*!*****************************!*\
  !*** ./src/lappdelegate.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar Csm_CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar lappview_1 = __webpack_require__(/*! ./lappview */ \"./src/lappview.ts\");\r\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\r\nvar lapptexturemanager_1 = __webpack_require__(/*! ./lapptexturemanager */ \"./src/lapptexturemanager.ts\");\r\nvar lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ \"./src/lapplive2dmanager.ts\");\r\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\r\nexports.canvas = null;\r\nexports.s_instance = null;\r\nexports.gl = null;\r\nexports.frameBuffer = null;\r\nvar LAppDelegate = (function () {\r\n    function LAppDelegate() {\r\n        this._captured = false;\r\n        this._mouseX = 0.0;\r\n        this._mouseY = 0.0;\r\n        this._isEnd = false;\r\n        this._cubismOption = new live2dcubismframework_1.Option();\r\n        this._view = new lappview_1.LAppView();\r\n        this._textureManager = new lapptexturemanager_1.LAppTextureManager();\r\n    }\r\n    LAppDelegate.getInstance = function () {\r\n        if (exports.s_instance == null) {\r\n            exports.s_instance = new LAppDelegate();\r\n        }\r\n        return exports.s_instance;\r\n    };\r\n    LAppDelegate.releaseInstance = function () {\r\n        if (exports.s_instance != null) {\r\n            exports.s_instance.release();\r\n        }\r\n        exports.s_instance = null;\r\n    };\r\n    LAppDelegate.prototype.initialize = function () {\r\n        exports.canvas = document.createElement('canvas');\r\n        exports.canvas.width = LAppDefine.RenderTargetWidth;\r\n        exports.canvas.height = LAppDefine.RenderTargetHeight;\r\n        exports.gl = exports.canvas.getContext('webgl') || exports.canvas.getContext('experimental-webgl');\r\n        if (!exports.gl) {\r\n            alert('Cannot initialize WebGL. This browser does not support.');\r\n            exports.gl = null;\r\n            document.body.innerHTML =\r\n                'This browser does not support the <code>&lt;canvas&gt;</code> element.';\r\n            return false;\r\n        }\r\n        document.body.appendChild(exports.canvas);\r\n        if (!exports.frameBuffer) {\r\n            exports.frameBuffer = exports.gl.getParameter(exports.gl.FRAMEBUFFER_BINDING);\r\n        }\r\n        exports.gl.enable(exports.gl.BLEND);\r\n        exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);\r\n        var supportTouch = 'ontouchend' in exports.canvas;\r\n        if (supportTouch) {\r\n            exports.canvas.ontouchstart = onTouchBegan;\r\n            exports.canvas.ontouchmove = onTouchMoved;\r\n            exports.canvas.ontouchend = onTouchEnded;\r\n            exports.canvas.ontouchcancel = onTouchCancel;\r\n        }\r\n        else {\r\n            exports.canvas.onmousedown = onClickBegan;\r\n            exports.canvas.onmousemove = onMouseMoved;\r\n            exports.canvas.onmouseup = onClickEnded;\r\n        }\r\n        this._view.initialize();\r\n        this.initializeCubism();\r\n        return true;\r\n    };\r\n    LAppDelegate.prototype.release = function () {\r\n        this._textureManager.release();\r\n        this._textureManager = null;\r\n        this._view.release();\r\n        this._view = null;\r\n        lapplive2dmanager_1.LAppLive2DManager.releaseInstance();\r\n        Csm_CubismFramework.dispose();\r\n    };\r\n    LAppDelegate.prototype.run = function () {\r\n        var _this = this;\r\n        var loop = function () {\r\n            if (exports.s_instance == null) {\r\n                return;\r\n            }\r\n            lapppal_1.LAppPal.updateTime();\r\n            exports.gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n            exports.gl.enable(exports.gl.DEPTH_TEST);\r\n            exports.gl.depthFunc(exports.gl.LEQUAL);\r\n            exports.gl.clear(exports.gl.COLOR_BUFFER_BIT | exports.gl.DEPTH_BUFFER_BIT);\r\n            exports.gl.clearDepth(1.0);\r\n            exports.gl.enable(exports.gl.BLEND);\r\n            exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);\r\n            _this._view.render();\r\n            requestAnimationFrame(loop);\r\n        };\r\n        loop();\r\n    };\r\n    LAppDelegate.prototype.createShader = function () {\r\n        var vertexShaderId = exports.gl.createShader(exports.gl.VERTEX_SHADER);\r\n        if (vertexShaderId == null) {\r\n            lapppal_1.LAppPal.printMessage('failed to create vertexShader');\r\n            return null;\r\n        }\r\n        var vertexShader = 'precision mediump float;' +\r\n            'attribute vec3 position;' +\r\n            'attribute vec2 uv;' +\r\n            'varying vec2 vuv;' +\r\n            'void main(void)' +\r\n            '{' +\r\n            '   gl_Position = vec4(position, 1.0);' +\r\n            '   vuv = uv;' +\r\n            '}';\r\n        exports.gl.shaderSource(vertexShaderId, vertexShader);\r\n        exports.gl.compileShader(vertexShaderId);\r\n        var fragmentShaderId = exports.gl.createShader(exports.gl.FRAGMENT_SHADER);\r\n        if (fragmentShaderId == null) {\r\n            lapppal_1.LAppPal.printMessage('failed to create fragmentShader');\r\n            return null;\r\n        }\r\n        var fragmentShader = 'precision mediump float;' +\r\n            'varying vec2 vuv;' +\r\n            'uniform sampler2D texture;' +\r\n            'void main(void)' +\r\n            '{' +\r\n            '   gl_FragColor = texture2D(texture, vuv);' +\r\n            '}';\r\n        exports.gl.shaderSource(fragmentShaderId, fragmentShader);\r\n        exports.gl.compileShader(fragmentShaderId);\r\n        var programId = exports.gl.createProgram();\r\n        exports.gl.attachShader(programId, vertexShaderId);\r\n        exports.gl.attachShader(programId, fragmentShaderId);\r\n        exports.gl.deleteShader(vertexShaderId);\r\n        exports.gl.deleteShader(fragmentShaderId);\r\n        exports.gl.linkProgram(programId);\r\n        exports.gl.useProgram(programId);\r\n        return programId;\r\n    };\r\n    LAppDelegate.prototype.getView = function () {\r\n        return this._view;\r\n    };\r\n    LAppDelegate.prototype.getTextureManager = function () {\r\n        return this._textureManager;\r\n    };\r\n    LAppDelegate.prototype.initializeCubism = function () {\r\n        this._cubismOption.logFunction = lapppal_1.LAppPal.printMessage;\r\n        this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;\r\n        Csm_CubismFramework.startUp(this._cubismOption);\r\n        Csm_CubismFramework.initialize();\r\n        lapplive2dmanager_1.LAppLive2DManager.getInstance();\r\n        lapppal_1.LAppPal.updateTime();\r\n        this._view.initializeSprite();\r\n    };\r\n    return LAppDelegate;\r\n}());\r\nexports.LAppDelegate = LAppDelegate;\r\nfunction onClickBegan(e) {\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    LAppDelegate.getInstance()._captured = true;\r\n    var posX = e.pageX;\r\n    var posY = e.pageY;\r\n    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\r\n}\r\nfunction onMouseMoved(e) {\r\n    if (!LAppDelegate.getInstance()._captured) {\r\n        return;\r\n    }\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    var rect = e.target.getBoundingClientRect();\r\n    var posX = e.clientX - rect.left;\r\n    var posY = e.clientY - rect.top;\r\n    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\r\n}\r\nfunction onClickEnded(e) {\r\n    LAppDelegate.getInstance()._captured = false;\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    var rect = e.target.getBoundingClientRect();\r\n    var posX = e.clientX - rect.left;\r\n    var posY = e.clientY - rect.top;\r\n    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\r\n}\r\nfunction onTouchBegan(e) {\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    LAppDelegate.getInstance()._captured = true;\r\n    var posX = e.changedTouches[0].pageX;\r\n    var posY = e.changedTouches[0].pageY;\r\n    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\r\n}\r\nfunction onTouchMoved(e) {\r\n    if (!LAppDelegate.getInstance()._captured) {\r\n        return;\r\n    }\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    var rect = e.target.getBoundingClientRect();\r\n    var posX = e.changedTouches[0].clientX - rect.left;\r\n    var posY = e.changedTouches[0].clientY - rect.top;\r\n    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\r\n}\r\nfunction onTouchEnded(e) {\r\n    LAppDelegate.getInstance()._captured = false;\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    var rect = e.target.getBoundingClientRect();\r\n    var posX = e.changedTouches[0].clientX - rect.left;\r\n    var posY = e.changedTouches[0].clientY - rect.top;\r\n    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\r\n}\r\nfunction onTouchCancel(e) {\r\n    LAppDelegate.getInstance()._captured = false;\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    var rect = e.target.getBoundingClientRect();\r\n    var posX = e.changedTouches[0].clientX - rect.left;\r\n    var posY = e.changedTouches[0].clientY - rect.top;\r\n    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFwcGRlbGVnYXRlLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2xhcHBkZWxlZ2F0ZS50cz82OTcxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtcclxuICBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgbGl2ZTJkY3ViaXNtZnJhbWV3b3JrLFxyXG4gIE9wdGlvbiBhcyBDc21fT3B0aW9uXHJcbn0gZnJvbSAnQGZyYW1ld29yay9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgQ3NtX0N1YmlzbUZyYW1ld29yayA9IGxpdmUyZGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XHJcbmltcG9ydCB7IExBcHBWaWV3IH0gZnJvbSAnLi9sYXBwdmlldyc7XHJcbmltcG9ydCB7IExBcHBQYWwgfSBmcm9tICcuL2xhcHBwYWwnO1xyXG5pbXBvcnQgeyBMQXBwVGV4dHVyZU1hbmFnZXIgfSBmcm9tICcuL2xhcHB0ZXh0dXJlbWFuYWdlcic7XHJcbmltcG9ydCB7IExBcHBMaXZlMkRNYW5hZ2VyIH0gZnJvbSAnLi9sYXBwbGl2ZTJkbWFuYWdlcic7XHJcbmltcG9ydCAqIGFzIExBcHBEZWZpbmUgZnJvbSAnLi9sYXBwZGVmaW5lJztcclxuXHJcbmV4cG9ydCBsZXQgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCA9IG51bGw7XHJcbmV4cG9ydCBsZXQgc19pbnN0YW5jZTogTEFwcERlbGVnYXRlID0gbnVsbDtcclxuZXhwb3J0IGxldCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0ID0gbnVsbDtcclxuZXhwb3J0IGxldCBmcmFtZUJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlciA9IG51bGw7XHJcblxyXG4vKipcclxuICog44Ki44OX44Oq44Kx44O844K344On44Oz44Kv44Op44K544CCXHJcbiAqIEN1YmlzbSBTREvjga7nrqHnkIbjgpLooYzjgYbjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBMQXBwRGVsZWdhdGUge1xyXG4gIC8qKlxyXG4gICAqIOOCr+ODqeOCueOBruOCpOODs+OCueOCv+ODs+OCue+8iOOCt+ODs+OCsOODq+ODiOODs++8ieOCkui/lOOBmeOAglxyXG4gICAqIOOCpOODs+OCueOCv+ODs+OCueOBjOeUn+aIkOOBleOCjOOBpuOBhOOBquOBhOWgtOWQiOOBr+WGhemDqOOBp+OCpOODs+OCueOCv+ODs+OCueOCkueUn+aIkOOBmeOCi+OAglxyXG4gICAqXHJcbiAgICogQHJldHVybiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IExBcHBEZWxlZ2F0ZSB7XHJcbiAgICBpZiAoc19pbnN0YW5jZSA9PSBudWxsKSB7XHJcbiAgICAgIHNfaW5zdGFuY2UgPSBuZXcgTEFwcERlbGVnYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNfaW5zdGFuY2U7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgq/jg6njgrnjga7jgqTjg7Pjgrnjgr/jg7PjgrnvvIjjgrfjg7PjgrDjg6vjg4jjg7PvvInjgpLop6PmlL7jgZnjgovjgIJcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHJlbGVhc2VJbnN0YW5jZSgpOiB2b2lkIHtcclxuICAgIGlmIChzX2luc3RhbmNlICE9IG51bGwpIHtcclxuICAgICAgc19pbnN0YW5jZS5yZWxlYXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc19pbnN0YW5jZSA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBUFDjgavlv4XopoHjgarnianjgpLliJ3mnJ/ljJbjgZnjgovjgIJcclxuICAgKi9cclxuICBwdWJsaWMgaW5pdGlhbGl6ZSgpOiBib29sZWFuIHtcclxuICAgIC8vIOOCreODo+ODs+ODkOOCueOBruS9nOaIkFxyXG4gICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICBjYW52YXMud2lkdGggPSBMQXBwRGVmaW5lLlJlbmRlclRhcmdldFdpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IExBcHBEZWZpbmUuUmVuZGVyVGFyZ2V0SGVpZ2h0O1xyXG5cclxuICAgIC8vIGds44Kz44Oz44OG44Kt44K544OI44KS5Yid5pyf5YyWXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpIHx8IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnKTtcclxuXHJcbiAgICBpZiAoIWdsKSB7XHJcbiAgICAgIGFsZXJ0KCdDYW5ub3QgaW5pdGlhbGl6ZSBXZWJHTC4gVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQuJyk7XHJcbiAgICAgIGdsID0gbnVsbDtcclxuXHJcbiAgICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID1cclxuICAgICAgICAnVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIDxjb2RlPiZsdDtjYW52YXMmZ3Q7PC9jb2RlPiBlbGVtZW50Lic7XHJcblxyXG4gICAgICAvLyBnbOWIneacn+WMluWkseaVl1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Kt44Oj44Oz44OQ44K544KSIERPTSDjgavov73liqBcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcclxuXHJcbiAgICBpZiAoIWZyYW1lQnVmZmVyKSB7XHJcbiAgICAgIGZyYW1lQnVmZmVyID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkZSQU1FQlVGRkVSX0JJTkRJTkcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOmAj+mBjuioreWumlxyXG4gICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcclxuICAgIGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xyXG5cclxuICAgIGNvbnN0IHN1cHBvcnRUb3VjaDogYm9vbGVhbiA9ICdvbnRvdWNoZW5kJyBpbiBjYW52YXM7XHJcblxyXG4gICAgaWYgKHN1cHBvcnRUb3VjaCkge1xyXG4gICAgICAvLyDjgr/jg4Pjg4HplqLpgKPjgrPjg7zjg6vjg5Djg4Pjgq/plqLmlbDnmbvpjLJcclxuICAgICAgY2FudmFzLm9udG91Y2hzdGFydCA9IG9uVG91Y2hCZWdhbjtcclxuICAgICAgY2FudmFzLm9udG91Y2htb3ZlID0gb25Ub3VjaE1vdmVkO1xyXG4gICAgICBjYW52YXMub250b3VjaGVuZCA9IG9uVG91Y2hFbmRlZDtcclxuICAgICAgY2FudmFzLm9udG91Y2hjYW5jZWwgPSBvblRvdWNoQ2FuY2VsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8g44Oe44Km44K56Zai6YCj44Kz44O844Or44OQ44OD44Kv6Zai5pWw55m76YyyXHJcbiAgICAgIGNhbnZhcy5vbm1vdXNlZG93biA9IG9uQ2xpY2tCZWdhbjtcclxuICAgICAgY2FudmFzLm9ubW91c2Vtb3ZlID0gb25Nb3VzZU1vdmVkO1xyXG4gICAgICBjYW52YXMub25tb3VzZXVwID0gb25DbGlja0VuZGVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFwcFZpZXfjga7liJ3mnJ/ljJZcclxuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZSgpO1xyXG5cclxuICAgIC8vIEN1YmlzbSBTREvjga7liJ3mnJ/ljJZcclxuICAgIHRoaXMuaW5pdGlhbGl6ZUN1YmlzbSgpO1xyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6Kej5pS+44GZ44KL44CCXHJcbiAgICovXHJcbiAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLl90ZXh0dXJlTWFuYWdlci5yZWxlYXNlKCk7XHJcbiAgICB0aGlzLl90ZXh0dXJlTWFuYWdlciA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5fdmlldy5yZWxlYXNlKCk7XHJcbiAgICB0aGlzLl92aWV3ID0gbnVsbDtcclxuXHJcbiAgICAvLyDjg6rjgr3jg7zjgrnjgpLop6PmlL5cclxuICAgIExBcHBMaXZlMkRNYW5hZ2VyLnJlbGVhc2VJbnN0YW5jZSgpO1xyXG5cclxuICAgIC8vIEN1YmlzbSBTREvjga7op6PmlL5cclxuICAgIENzbV9DdWJpc21GcmFtZXdvcmsuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5a6f6KGM5Yem55CG44CCXHJcbiAgICovXHJcbiAgcHVibGljIHJ1bigpOiB2b2lkIHtcclxuICAgIC8vIOODoeOCpOODs+ODq+ODvOODl1xyXG4gICAgY29uc3QgbG9vcCA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgLy8g44Kk44Oz44K544K/44Oz44K544Gu5pyJ54Sh44Gu56K66KqNXHJcbiAgICAgIGlmIChzX2luc3RhbmNlID09IG51bGwpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOaZgumWk+abtOaWsFxyXG4gICAgICBMQXBwUGFsLnVwZGF0ZVRpbWUoKTtcclxuXHJcbiAgICAgIC8vIOeUu+mdouOBruWIneacn+WMllxyXG4gICAgICBnbC5jbGVhckNvbG9yKDAuMCwgMC4wLCAwLjAsIDAuMCk7XHJcblxyXG4gICAgICAvLyDmt7Hluqbjg4bjgrnjg4jjgpLmnInlirnljJZcclxuICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG5cclxuICAgICAgLy8g6L+R44GP44Gr44GC44KL54mp5L2T44Gv44CB6YGg44GP44Gr44GC44KL54mp5L2T44KS6KaG44GE6Zqg44GZXHJcbiAgICAgIGdsLmRlcHRoRnVuYyhnbC5MRVFVQUwpO1xyXG5cclxuICAgICAgLy8g44Kr44Op44O844OQ44OD44OV44Kh44KE5rex5bqm44OQ44OD44OV44Kh44KS44Kv44Oq44Ki44GZ44KLXHJcbiAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcclxuXHJcbiAgICAgIGdsLmNsZWFyRGVwdGgoMS4wKTtcclxuXHJcbiAgICAgIC8vIOmAj+mBjuioreWumlxyXG4gICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xyXG4gICAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcclxuXHJcbiAgICAgIC8vIOaPj+eUu+abtOaWsFxyXG4gICAgICB0aGlzLl92aWV3LnJlbmRlcigpO1xyXG5cclxuICAgICAgLy8g44Or44O844OX44Gu44Gf44KB44Gr5YaN5biw5ZG844Gz5Ye644GXXHJcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcclxuICAgIH07XHJcbiAgICBsb29wKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgrfjgqfjg7zjg4Djg7zjgpLnmbvpjLLjgZnjgovjgIJcclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlU2hhZGVyKCk6IFdlYkdMUHJvZ3JhbSB7XHJcbiAgICAvLyDjg5Djg7zjg4bjg4Pjgq/jgrnjgrfjgqfjg7zjg4Djg7zjga7jgrPjg7Pjg5HjgqTjg6tcclxuICAgIGNvbnN0IHZlcnRleFNoYWRlcklkID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xyXG5cclxuICAgIGlmICh2ZXJ0ZXhTaGFkZXJJZCA9PSBudWxsKSB7XHJcbiAgICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCdmYWlsZWQgdG8gY3JlYXRlIHZlcnRleFNoYWRlcicpO1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2ZXJ0ZXhTaGFkZXI6IHN0cmluZyA9XHJcbiAgICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcclxuICAgICAgJ2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycgK1xyXG4gICAgICAnYXR0cmlidXRlIHZlYzIgdXY7JyArXHJcbiAgICAgICd2YXJ5aW5nIHZlYzIgdnV2OycgK1xyXG4gICAgICAndm9pZCBtYWluKHZvaWQpJyArXHJcbiAgICAgICd7JyArXHJcbiAgICAgICcgICBnbF9Qb3NpdGlvbiA9IHZlYzQocG9zaXRpb24sIDEuMCk7JyArXHJcbiAgICAgICcgICB2dXYgPSB1djsnICtcclxuICAgICAgJ30nO1xyXG5cclxuICAgIGdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXJJZCwgdmVydGV4U2hhZGVyKTtcclxuICAgIGdsLmNvbXBpbGVTaGFkZXIodmVydGV4U2hhZGVySWQpO1xyXG5cclxuICAgIC8vIOODleODqeOCsOODoeODs+ODiOOCt+OCp+ODvOODgOOBruOCs+ODs+ODkeOCpOODq1xyXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXJJZCA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xyXG5cclxuICAgIGlmIChmcmFnbWVudFNoYWRlcklkID09IG51bGwpIHtcclxuICAgICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ2ZhaWxlZCB0byBjcmVhdGUgZnJhZ21lbnRTaGFkZXInKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZnJhZ21lbnRTaGFkZXI6IHN0cmluZyA9XHJcbiAgICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcclxuICAgICAgJ3ZhcnlpbmcgdmVjMiB2dXY7JyArXHJcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlOycgK1xyXG4gICAgICAndm9pZCBtYWluKHZvaWQpJyArXHJcbiAgICAgICd7JyArXHJcbiAgICAgICcgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodGV4dHVyZSwgdnV2KTsnICtcclxuICAgICAgJ30nO1xyXG5cclxuICAgIGdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlcklkLCBmcmFnbWVudFNoYWRlcik7XHJcbiAgICBnbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVySWQpO1xyXG5cclxuICAgIC8vIOODl+ODreOCsOODqeODoOOCquODluOCuOOCp+OCr+ODiOOBruS9nOaIkFxyXG4gICAgY29uc3QgcHJvZ3JhbUlkID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW1JZCwgdmVydGV4U2hhZGVySWQpO1xyXG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW1JZCwgZnJhZ21lbnRTaGFkZXJJZCk7XHJcblxyXG4gICAgZ2wuZGVsZXRlU2hhZGVyKHZlcnRleFNoYWRlcklkKTtcclxuICAgIGdsLmRlbGV0ZVNoYWRlcihmcmFnbWVudFNoYWRlcklkKTtcclxuXHJcbiAgICAvLyDjg6rjg7Pjgq9cclxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW1JZCk7XHJcblxyXG4gICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtSWQpO1xyXG5cclxuICAgIHJldHVybiBwcm9ncmFtSWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWaWV35oOF5aCx44KS5Y+W5b6X44GZ44KL44CCXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZpZXcoKTogTEFwcFZpZXcge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZpZXc7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VGV4dHVyZU1hbmFnZXIoKTogTEFwcFRleHR1cmVNYW5hZ2VyIHtcclxuICAgIHJldHVybiB0aGlzLl90ZXh0dXJlTWFuYWdlcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fY2FwdHVyZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuX21vdXNlWCA9IDAuMDtcclxuICAgIHRoaXMuX21vdXNlWSA9IDAuMDtcclxuICAgIHRoaXMuX2lzRW5kID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5fY3ViaXNtT3B0aW9uID0gbmV3IENzbV9PcHRpb24oKTtcclxuICAgIHRoaXMuX3ZpZXcgPSBuZXcgTEFwcFZpZXcoKTtcclxuICAgIHRoaXMuX3RleHR1cmVNYW5hZ2VyID0gbmV3IExBcHBUZXh0dXJlTWFuYWdlcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3ViaXNtIFNES+OBruWIneacn+WMllxyXG4gICAqL1xyXG4gIHB1YmxpYyBpbml0aWFsaXplQ3ViaXNtKCk6IHZvaWQge1xyXG4gICAgLy8gc2V0dXAgY3ViaXNtXHJcbiAgICB0aGlzLl9jdWJpc21PcHRpb24ubG9nRnVuY3Rpb24gPSBMQXBwUGFsLnByaW50TWVzc2FnZTtcclxuICAgIHRoaXMuX2N1YmlzbU9wdGlvbi5sb2dnaW5nTGV2ZWwgPSBMQXBwRGVmaW5lLkN1YmlzbUxvZ2dpbmdMZXZlbDtcclxuICAgIENzbV9DdWJpc21GcmFtZXdvcmsuc3RhcnRVcCh0aGlzLl9jdWJpc21PcHRpb24pO1xyXG5cclxuICAgIC8vIGluaXRpYWxpemUgY3ViaXNtXHJcbiAgICBDc21fQ3ViaXNtRnJhbWV3b3JrLmluaXRpYWxpemUoKTtcclxuXHJcbiAgICAvLyBsb2FkIG1vZGVsXHJcbiAgICBMQXBwTGl2ZTJETWFuYWdlci5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgIExBcHBQYWwudXBkYXRlVGltZSgpO1xyXG5cclxuICAgIHRoaXMuX3ZpZXcuaW5pdGlhbGl6ZVNwcml0ZSgpO1xyXG4gIH1cclxuXHJcbiAgX2N1YmlzbU9wdGlvbjogQ3NtX09wdGlvbjsgLy8gQ3ViaXNtIFNESyBPcHRpb25cclxuICBfdmlldzogTEFwcFZpZXc7IC8vIFZpZXfmg4XloLFcclxuICBfY2FwdHVyZWQ6IGJvb2xlYW47IC8vIOOCr+ODquODg+OCr+OBl+OBpuOBhOOCi+OBi1xyXG4gIF9tb3VzZVg6IG51bWJlcjsgLy8g44Oe44Km44K5WOW6p+aomVxyXG4gIF9tb3VzZVk6IG51bWJlcjsgLy8g44Oe44Km44K5WeW6p+aomVxyXG4gIF9pc0VuZDogYm9vbGVhbjsgLy8gQVBQ57WC5LqG44GX44Gm44GE44KL44GLXHJcbiAgX3RleHR1cmVNYW5hZ2VyOiBMQXBwVGV4dHVyZU1hbmFnZXI7IC8vIOODhuOCr+OCueODgeODo+ODnuODjeODvOOCuOODo+ODvFxyXG59XHJcblxyXG4vKipcclxuICog44Kv44Oq44OD44Kv44GX44Gf44Go44GN44Gr5ZG844Gw44KM44KL44CCXHJcbiAqL1xyXG5mdW5jdGlvbiBvbkNsaWNrQmVnYW4oZTogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcclxuICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IHRydWU7XHJcblxyXG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUucGFnZVg7XHJcbiAgY29uc3QgcG9zWTogbnVtYmVyID0gZS5wYWdlWTtcclxuXHJcbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzQmVnYW4ocG9zWCwgcG9zWSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjg57jgqbjgrnjg53jgqTjg7Pjgr/jgYzli5XjgYTjgZ/jgonlkbzjgbDjgozjgovjgIJcclxuICovXHJcbmZ1bmN0aW9uIG9uTW91c2VNb3ZlZChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcpIHtcclxuICAgIExBcHBQYWwucHJpbnRNZXNzYWdlKCd2aWV3IG5vdGZvdW5kJyk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCByZWN0ID0gKGUudGFyZ2V0IGFzIEVsZW1lbnQpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIGNvbnN0IHBvc1g6IG51bWJlciA9IGUuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICBjb25zdCBwb3NZOiBudW1iZXIgPSBlLmNsaWVudFkgLSByZWN0LnRvcDtcclxuXHJcbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX3ZpZXcub25Ub3VjaGVzTW92ZWQocG9zWCwgcG9zWSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjgq/jg6rjg4Pjgq/jgYzntYLkuobjgZfjgZ/jgonlkbzjgbDjgozjgovjgIJcclxuICovXHJcbmZ1bmN0aW9uIG9uQ2xpY2tFbmRlZChlOiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gZmFsc2U7XHJcbiAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldykge1xyXG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgY29uc3QgcG9zWDogbnVtYmVyID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gIGNvbnN0IHBvc1k6IG51bWJlciA9IGUuY2xpZW50WSAtIHJlY3QudG9wO1xyXG5cclxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNFbmRlZChwb3NYLCBwb3NZKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOOCv+ODg+ODgeOBl+OBn+OBqOOBjeOBq+WRvOOBsOOCjOOCi+OAglxyXG4gKi9cclxuZnVuY3Rpb24gb25Ub3VjaEJlZ2FuKGU6IFRvdWNoRXZlbnQpOiB2b2lkIHtcclxuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XHJcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkID0gdHJ1ZTtcclxuXHJcbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVk7XHJcblxyXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0JlZ2FuKHBvc1gsIHBvc1kpO1xyXG59XHJcblxyXG4vKipcclxuICog44K544Ov44Kk44OX44GZ44KL44Go5ZG844Gw44KM44KL44CCXHJcbiAqL1xyXG5mdW5jdGlvbiBvblRvdWNoTW92ZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gIGlmICghTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuX2NhcHR1cmVkKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XHJcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVjdCA9IChlLnRhcmdldCBhcyBFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICBjb25zdCBwb3NZID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIC0gcmVjdC50b3A7XHJcblxyXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc01vdmVkKHBvc1gsIHBvc1kpO1xyXG59XHJcblxyXG4vKipcclxuICog44K/44OD44OB44GM57WC5LqG44GX44Gf44KJ5ZG844Gw44KM44KL44CCXHJcbiAqL1xyXG5mdW5jdGlvbiBvblRvdWNoRW5kZWQoZTogVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl9jYXB0dXJlZCA9IGZhbHNlO1xyXG5cclxuICBpZiAoIUxBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3KSB7XHJcbiAgICBMQXBwUGFsLnByaW50TWVzc2FnZSgndmlldyBub3Rmb3VuZCcpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVjdCA9IChlLnRhcmdldCBhcyBFbGVtZW50KS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgY29uc3QgcG9zWCA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICBjb25zdCBwb3NZID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZIC0gcmVjdC50b3A7XHJcblxyXG4gIExBcHBEZWxlZ2F0ZS5nZXRJbnN0YW5jZSgpLl92aWV3Lm9uVG91Y2hlc0VuZGVkKHBvc1gsIHBvc1kpO1xyXG59XHJcblxyXG4vKipcclxuICog44K/44OD44OB44GM44Kt44Oj44Oz44K744Or44GV44KM44KL44Go5ZG844Gw44KM44KL44CCXHJcbiAqL1xyXG5mdW5jdGlvbiBvblRvdWNoQ2FuY2VsKGU6IFRvdWNoRXZlbnQpOiB2b2lkIHtcclxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fY2FwdHVyZWQgPSBmYWxzZTtcclxuXHJcbiAgaWYgKCFMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldykge1xyXG4gICAgTEFwcFBhbC5wcmludE1lc3NhZ2UoJ3ZpZXcgbm90Zm91bmQnKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gIGNvbnN0IHBvc1ggPSBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgY29uc3QgcG9zWSA9IGUuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QudG9wO1xyXG5cclxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5fdmlldy5vblRvdWNoZXNFbmRlZChwb3NYLCBwb3NZKTtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU9BO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQTJOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUE3TkE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFHQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFHQTtBQUNBO0FBS0E7QUFBQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFHQTtBQUdBO0FBR0E7QUFHQTtBQUVBO0FBR0E7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUVBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQW1CQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFFQTtBQUVBO0FBQ0E7QUFTQTtBQUFBO0FBalFBO0FBc1FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/lappdelegate.ts\n");

/***/ }),

/***/ "./src/lapplive2dmanager.ts":
/*!**********************************!*\
  !*** ./src/lapplive2dmanager.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ \"../../../Framework/src/math/cubismmatrix44.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar Csm_csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar Csm_CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar lappmodel_1 = __webpack_require__(/*! ./lappmodel */ \"./src/lappmodel.ts\");\r\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\r\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\r\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\r\nexports.s_instance = null;\r\nvar LAppLive2DManager = (function () {\r\n    function LAppLive2DManager() {\r\n        this._finishedMotion = function (self) {\r\n            lapppal_1.LAppPal.printMessage('Motion Finished:');\r\n            console.log(self);\r\n        };\r\n        this._viewMatrix = new Csm_CubismMatrix44();\r\n        this._models = new Csm_csmVector();\r\n        this._sceneIndex = 0;\r\n        this.changeScene(this._sceneIndex);\r\n    }\r\n    LAppLive2DManager.getInstance = function () {\r\n        if (exports.s_instance == null) {\r\n            exports.s_instance = new LAppLive2DManager();\r\n        }\r\n        return exports.s_instance;\r\n    };\r\n    LAppLive2DManager.releaseInstance = function () {\r\n        if (exports.s_instance != null) {\r\n            exports.s_instance = void 0;\r\n        }\r\n        exports.s_instance = null;\r\n    };\r\n    LAppLive2DManager.prototype.getModel = function (no) {\r\n        if (no < this._models.getSize()) {\r\n            return this._models.at(no);\r\n        }\r\n        return null;\r\n    };\r\n    LAppLive2DManager.prototype.releaseAllModel = function () {\r\n        for (var i = 0; i < this._models.getSize(); i++) {\r\n            this._models.at(i).release();\r\n            this._models.set(i, null);\r\n        }\r\n        this._models.clear();\r\n    };\r\n    LAppLive2DManager.prototype.onDrag = function (x, y) {\r\n        for (var i = 0; i < this._models.getSize(); i++) {\r\n            var model = this.getModel(i);\r\n            if (model) {\r\n                model.setDragging(x, y);\r\n            }\r\n        }\r\n    };\r\n    LAppLive2DManager.prototype.onTap = function (x, y) {\r\n        if (LAppDefine.DebugLogEnable) {\r\n            lapppal_1.LAppPal.printMessage(\"[APP]tap point: {x: \" + x.toFixed(2) + \" y: \" + y.toFixed(2) + \"}\");\r\n        }\r\n        for (var i = 0; i < this._models.getSize(); i++) {\r\n            if (this._models.at(i).hitTest(LAppDefine.HitAreaNameHead, x, y)) {\r\n                if (LAppDefine.DebugLogEnable) {\r\n                    lapppal_1.LAppPal.printMessage(\"[APP]hit area: [\" + LAppDefine.HitAreaNameHead + \"]\");\r\n                }\r\n                this._models.at(i).setRandomExpression();\r\n            }\r\n            else if (this._models.at(i).hitTest(LAppDefine.HitAreaNameBody, x, y)) {\r\n                if (LAppDefine.DebugLogEnable) {\r\n                    lapppal_1.LAppPal.printMessage(\"[APP]hit area: [\" + LAppDefine.HitAreaNameBody + \"]\");\r\n                }\r\n                this._models\r\n                    .at(i)\r\n                    .startRandomMotion(LAppDefine.MotionGroupTapBody, LAppDefine.PriorityForce, this._finishedMotion);\r\n            }\r\n            else if (this._models.at(i).hitTest(LAppDefine.HitAreaNameBody2, x, y)) {\r\n                if (LAppDefine.DebugLogEnable) {\r\n                    lapppal_1.LAppPal.printMessage(\"[APP]hit area: [\" + LAppDefine.HitAreaNameBody2 + \"]\");\r\n                }\r\n                this._models\r\n                    .at(i)\r\n                    .startRandomMotion(LAppDefine.MotionGroupTapBody2, LAppDefine.PriorityForce, this._finishedMotion);\r\n            }\r\n        }\r\n    };\r\n    LAppLive2DManager.prototype.onUpdate = function () {\r\n        var projection = new Csm_CubismMatrix44();\r\n        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;\r\n        projection.scale(height * 2.0 / width, 2.0);\r\n        if (this._viewMatrix != null) {\r\n            projection.multiplyByMatrix(this._viewMatrix);\r\n        }\r\n        var saveProjection = projection.clone();\r\n        var modelCount = this._models.getSize();\r\n        for (var i = 0; i < modelCount; ++i) {\r\n            var model = this.getModel(i);\r\n            projection = saveProjection.clone();\r\n            model.update();\r\n            model.draw(projection);\r\n        }\r\n    };\r\n    LAppLive2DManager.prototype.nextScene = function () {\r\n        var no = (this._sceneIndex + 1) % LAppDefine.ModelDirSize;\r\n        this.changeScene(no);\r\n    };\r\n    LAppLive2DManager.prototype.changeScene = function (index) {\r\n        this._sceneIndex = index;\r\n        if (LAppDefine.DebugLogEnable) {\r\n            lapppal_1.LAppPal.printMessage(\"[APP]model index: \" + this._sceneIndex);\r\n        }\r\n        var model = LAppDefine.ModelDir[index];\r\n        var modelPath = LAppDefine.ResourcesPath + model + '/';\r\n        var modelJsonName = LAppDefine.ModelDir[index];\r\n        modelJsonName += '.model3.json';\r\n        this.releaseAllModel();\r\n        this._models.pushBack(new lappmodel_1.LAppModel());\r\n        this._models.at(0).loadAssets(modelPath, modelJsonName);\r\n    };\r\n    return LAppLive2DManager;\r\n}());\r\nexports.LAppLive2DManager = LAppLive2DManager;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lapplive2dmanager.ts\n");

/***/ }),

/***/ "./src/lappmodel.ts":
/*!**************************!*\
  !*** ./src/lappmodel.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar live2dcubismframework_1 = __webpack_require__(/*! @framework/live2dcubismframework */ \"../../../Framework/src/live2dcubismframework.ts\");\r\nvar cubismusermodel_1 = __webpack_require__(/*! @framework/model/cubismusermodel */ \"../../../Framework/src/model/cubismusermodel.ts\");\r\nvar cubismmodelsettingjson_1 = __webpack_require__(/*! @framework/cubismmodelsettingjson */ \"../../../Framework/src/cubismmodelsettingjson.ts\");\r\nvar cubismdefaultparameterid_1 = __webpack_require__(/*! @framework/cubismdefaultparameterid */ \"../../../Framework/src/cubismdefaultparameterid.ts\");\r\nvar acubismmotion_1 = __webpack_require__(/*! @framework/motion/acubismmotion */ \"../../../Framework/src/motion/acubismmotion.ts\");\r\nvar cubismeyeblink_1 = __webpack_require__(/*! @framework/effect/cubismeyeblink */ \"../../../Framework/src/effect/cubismeyeblink.ts\");\r\nvar cubismbreath_1 = __webpack_require__(/*! @framework/effect/cubismbreath */ \"../../../Framework/src/effect/cubismbreath.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar csmmap_1 = __webpack_require__(/*! @framework/type/csmmap */ \"../../../Framework/src/type/csmmap.ts\");\r\nvar cubismmotionqueuemanager_1 = __webpack_require__(/*! @framework/motion/cubismmotionqueuemanager */ \"../../../Framework/src/motion/cubismmotionqueuemanager.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! @framework/utils/cubismdebug */ \"../../../Framework/src/utils/cubismdebug.ts\");\r\nvar InvalidMotionQueueEntryHandleValue = cubismmotionqueuemanager_1.Live2DCubismFramework.InvalidMotionQueueEntryHandleValue;\r\nvar csmMap = csmmap_1.Live2DCubismFramework.csmMap;\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismBreath = cubismbreath_1.Live2DCubismFramework.CubismBreath;\r\nvar BreathParameterData = cubismbreath_1.Live2DCubismFramework.BreathParameterData;\r\nvar CubismEyeBlink = cubismeyeblink_1.Live2DCubismFramework.CubismEyeBlink;\r\nvar ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismUserModel = cubismusermodel_1.Live2DCubismFramework.CubismUserModel;\r\nvar CubismModelSettingJson = cubismmodelsettingjson_1.Live2DCubismFramework.CubismModelSettingJson;\r\nvar CubismDefaultParameterId = cubismdefaultparameterid_1.Live2DCubismFramework;\r\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\r\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\r\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\r\n__webpack_require__(/*! whatwg-fetch */ \"./node_modules/whatwg-fetch/fetch.js\");\r\nvar LoadStep;\r\n(function (LoadStep) {\r\n    LoadStep[LoadStep[\"LoadAssets\"] = 0] = \"LoadAssets\";\r\n    LoadStep[LoadStep[\"LoadModel\"] = 1] = \"LoadModel\";\r\n    LoadStep[LoadStep[\"WaitLoadModel\"] = 2] = \"WaitLoadModel\";\r\n    LoadStep[LoadStep[\"LoadExpression\"] = 3] = \"LoadExpression\";\r\n    LoadStep[LoadStep[\"WaitLoadExpression\"] = 4] = \"WaitLoadExpression\";\r\n    LoadStep[LoadStep[\"LoadPhysics\"] = 5] = \"LoadPhysics\";\r\n    LoadStep[LoadStep[\"WaitLoadPhysics\"] = 6] = \"WaitLoadPhysics\";\r\n    LoadStep[LoadStep[\"LoadPose\"] = 7] = \"LoadPose\";\r\n    LoadStep[LoadStep[\"WaitLoadPose\"] = 8] = \"WaitLoadPose\";\r\n    LoadStep[LoadStep[\"SetupEyeBlink\"] = 9] = \"SetupEyeBlink\";\r\n    LoadStep[LoadStep[\"SetupBreath\"] = 10] = \"SetupBreath\";\r\n    LoadStep[LoadStep[\"LoadUserData\"] = 11] = \"LoadUserData\";\r\n    LoadStep[LoadStep[\"WaitLoadUserData\"] = 12] = \"WaitLoadUserData\";\r\n    LoadStep[LoadStep[\"SetupEyeBlinkIds\"] = 13] = \"SetupEyeBlinkIds\";\r\n    LoadStep[LoadStep[\"SetupLipSyncIds\"] = 14] = \"SetupLipSyncIds\";\r\n    LoadStep[LoadStep[\"SetupLayout\"] = 15] = \"SetupLayout\";\r\n    LoadStep[LoadStep[\"LoadMotion\"] = 16] = \"LoadMotion\";\r\n    LoadStep[LoadStep[\"WaitLoadMotion\"] = 17] = \"WaitLoadMotion\";\r\n    LoadStep[LoadStep[\"CompleteInitialize\"] = 18] = \"CompleteInitialize\";\r\n    LoadStep[LoadStep[\"CompleteSetupModel\"] = 19] = \"CompleteSetupModel\";\r\n    LoadStep[LoadStep[\"LoadTexture\"] = 20] = \"LoadTexture\";\r\n    LoadStep[LoadStep[\"WaitLoadTexture\"] = 21] = \"WaitLoadTexture\";\r\n    LoadStep[LoadStep[\"CompleteSetup\"] = 22] = \"CompleteSetup\";\r\n})(LoadStep || (LoadStep = {}));\r\nvar LAppModel = (function (_super) {\r\n    __extends(LAppModel, _super);\r\n    function LAppModel() {\r\n        var _this = _super.call(this) || this;\r\n        _this._modelSetting = null;\r\n        _this._modelHomeDir = null;\r\n        _this._userTimeSeconds = 0.0;\r\n        _this._eyeBlinkIds = new csmVector();\r\n        _this._lipSyncIds = new csmVector();\r\n        _this._motions = new csmMap();\r\n        _this._expressions = new csmMap();\r\n        _this._hitArea = new csmVector();\r\n        _this._userArea = new csmVector();\r\n        _this._idParamAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleX);\r\n        _this._idParamAngleY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleY);\r\n        _this._idParamAngleZ = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleZ);\r\n        _this._idParamEyeBallX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallX);\r\n        _this._idParamEyeBallY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallY);\r\n        _this._idParamBodyAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBodyAngleX);\r\n        _this._state = LoadStep.LoadAssets;\r\n        _this._expressionCount = 0;\r\n        _this._textureCount = 0;\r\n        _this._motionCount = 0;\r\n        _this._allMotionCount = 0;\r\n        return _this;\r\n    }\r\n    LAppModel.prototype.loadAssets = function (dir, fileName) {\r\n        var _this = this;\r\n        this._modelHomeDir = dir;\r\n        fetch(this._modelHomeDir + \"/\" + fileName)\r\n            .then(function (response) { return response.arrayBuffer(); })\r\n            .then(function (arrayBuffer) {\r\n            var setting = new CubismModelSettingJson(arrayBuffer, arrayBuffer.byteLength);\r\n            _this._state = LoadStep.LoadModel;\r\n            _this.setupModel(setting);\r\n        });\r\n    };\r\n    LAppModel.prototype.setupModel = function (setting) {\r\n        var _this = this;\r\n        this._updating = true;\r\n        this._initialized = false;\r\n        this._modelSetting = setting;\r\n        if (this._modelSetting.getModelFileName() != '') {\r\n            var modelFileName = this._modelSetting.getModelFileName();\r\n            fetch(this._modelHomeDir + \"/\" + modelFileName)\r\n                .then(function (response) { return response.arrayBuffer(); })\r\n                .then(function (arrayBuffer) {\r\n                _this.loadModel(arrayBuffer);\r\n                _this._state = LoadStep.LoadExpression;\r\n                loadCubismExpression();\r\n            });\r\n            this._state = LoadStep.WaitLoadModel;\r\n        }\r\n        else {\r\n            lapppal_1.LAppPal.printMessage('Model data does not exist.');\r\n        }\r\n        var loadCubismExpression = function () {\r\n            if (_this._modelSetting.getExpressionCount() > 0) {\r\n                var count_1 = _this._modelSetting.getExpressionCount();\r\n                var _loop_1 = function (i) {\r\n                    var expressionName = _this._modelSetting.getExpressionName(i);\r\n                    var expressionFileName = _this._modelSetting.getExpressionFileName(i);\r\n                    fetch(_this._modelHomeDir + \"/\" + expressionFileName)\r\n                        .then(function (response) { return response.arrayBuffer(); })\r\n                        .then(function (arrayBuffer) {\r\n                        var motion = _this.loadExpression(arrayBuffer, arrayBuffer.byteLength, expressionName);\r\n                        if (_this._expressions.getValue(expressionName) != null) {\r\n                            ACubismMotion.delete(_this._expressions.getValue(expressionName));\r\n                            _this._expressions.setValue(expressionName, null);\r\n                        }\r\n                        _this._expressions.setValue(expressionName, motion);\r\n                        _this._expressionCount++;\r\n                        if (_this._expressionCount >= count_1) {\r\n                            _this._state = LoadStep.LoadPhysics;\r\n                            loadCubismPhysics();\r\n                        }\r\n                    });\r\n                };\r\n                for (var i = 0; i < count_1; i++) {\r\n                    _loop_1(i);\r\n                }\r\n                _this._state = LoadStep.WaitLoadExpression;\r\n            }\r\n            else {\r\n                _this._state = LoadStep.LoadPhysics;\r\n                loadCubismPhysics();\r\n            }\r\n        };\r\n        var loadCubismPhysics = function () {\r\n            if (_this._modelSetting.getPhysicsFileName() != '') {\r\n                var physicsFileName = _this._modelSetting.getPhysicsFileName();\r\n                fetch(_this._modelHomeDir + \"/\" + physicsFileName)\r\n                    .then(function (response) { return response.arrayBuffer(); })\r\n                    .then(function (arrayBuffer) {\r\n                    _this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\r\n                    _this._state = LoadStep.LoadPose;\r\n                    loadCubismPose();\r\n                });\r\n                _this._state = LoadStep.WaitLoadPhysics;\r\n            }\r\n            else {\r\n                _this._state = LoadStep.LoadPose;\r\n                loadCubismPose();\r\n            }\r\n        };\r\n        var loadCubismPose = function () {\r\n            if (_this._modelSetting.getPoseFileName() != '') {\r\n                var poseFileName = _this._modelSetting.getPoseFileName();\r\n                fetch(_this._modelHomeDir + \"/\" + poseFileName)\r\n                    .then(function (response) { return response.arrayBuffer(); })\r\n                    .then(function (arrayBuffer) {\r\n                    _this.loadPose(arrayBuffer, arrayBuffer.byteLength);\r\n                    _this._state = LoadStep.SetupEyeBlink;\r\n                    setupEyeBlink();\r\n                });\r\n                _this._state = LoadStep.WaitLoadPose;\r\n            }\r\n            else {\r\n                _this._state = LoadStep.SetupEyeBlink;\r\n                setupEyeBlink();\r\n            }\r\n        };\r\n        var setupEyeBlink = function () {\r\n            if (_this._modelSetting.getEyeBlinkParameterCount() > 0) {\r\n                _this._eyeBlink = CubismEyeBlink.create(_this._modelSetting);\r\n                _this._state = LoadStep.SetupBreath;\r\n            }\r\n            setupBreath();\r\n        };\r\n        var setupBreath = function () {\r\n            _this._breath = CubismBreath.create();\r\n            var breathParameters = new csmVector();\r\n            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5));\r\n            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5));\r\n            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5));\r\n            breathParameters.pushBack(new BreathParameterData(_this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5));\r\n            breathParameters.pushBack(new BreathParameterData(CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBreath), 0.0, 0.5, 3.2345, 0.5));\r\n            _this._breath.setParameters(breathParameters);\r\n            _this._state = LoadStep.LoadUserData;\r\n            loadUserData();\r\n        };\r\n        var loadUserData = function () {\r\n            if (_this._modelSetting.getUserDataFile() != '') {\r\n                var userDataFile = _this._modelSetting.getUserDataFile();\r\n                fetch(_this._modelHomeDir + \"/\" + userDataFile)\r\n                    .then(function (response) { return response.arrayBuffer(); })\r\n                    .then(function (arrayBuffer) {\r\n                    _this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\r\n                    _this._state = LoadStep.SetupEyeBlinkIds;\r\n                    setupEyeBlinkIds();\r\n                });\r\n                _this._state = LoadStep.WaitLoadUserData;\r\n            }\r\n            else {\r\n                _this._state = LoadStep.SetupEyeBlinkIds;\r\n                setupEyeBlinkIds();\r\n            }\r\n        };\r\n        var setupEyeBlinkIds = function () {\r\n            var eyeBlinkIdCount = _this._modelSetting.getEyeBlinkParameterCount();\r\n            for (var i = 0; i < eyeBlinkIdCount; ++i) {\r\n                _this._eyeBlinkIds.pushBack(_this._modelSetting.getEyeBlinkParameterId(i));\r\n            }\r\n            _this._state = LoadStep.SetupLipSyncIds;\r\n            setupLipSyncIds();\r\n        };\r\n        var setupLipSyncIds = function () {\r\n            var lipSyncIdCount = _this._modelSetting.getLipSyncParameterCount();\r\n            for (var i = 0; i < lipSyncIdCount; ++i) {\r\n                _this._lipSyncIds.pushBack(_this._modelSetting.getLipSyncParameterId(i));\r\n            }\r\n            _this._state = LoadStep.SetupLayout;\r\n            setupLayout();\r\n        };\r\n        var setupLayout = function () {\r\n            var layout = new csmMap();\r\n            _this._modelSetting.getLayoutMap(layout);\r\n            _this._modelMatrix.setupFromLayout(layout);\r\n            _this._state = LoadStep.LoadMotion;\r\n            loadCubismMotion();\r\n        };\r\n        var loadCubismMotion = function () {\r\n            _this._state = LoadStep.WaitLoadMotion;\r\n            _this._model.saveParameters();\r\n            _this._allMotionCount = 0;\r\n            _this._motionCount = 0;\r\n            var group = [];\r\n            var motionGroupCount = _this._modelSetting.getMotionGroupCount();\r\n            for (var i = 0; i < motionGroupCount; i++) {\r\n                group[i] = _this._modelSetting.getMotionGroupName(i);\r\n                _this._allMotionCount += _this._modelSetting.getMotionCount(group[i]);\r\n            }\r\n            for (var i = 0; i < motionGroupCount; i++) {\r\n                _this.preLoadMotionGroup(group[i]);\r\n            }\r\n            if (motionGroupCount == 0) {\r\n                _this._state = LoadStep.LoadTexture;\r\n                _this._motionManager.stopAllMotions();\r\n                _this._updating = false;\r\n                _this._initialized = true;\r\n                _this.createRenderer();\r\n                _this.setupTextures();\r\n                _this.getRenderer().startUp(lappdelegate_1.gl);\r\n            }\r\n        };\r\n    };\r\n    LAppModel.prototype.setupTextures = function () {\r\n        var _this = this;\r\n        var usePremultiply = true;\r\n        if (this._state == LoadStep.LoadTexture) {\r\n            var textureCount_1 = this._modelSetting.getTextureCount();\r\n            var _loop_2 = function (modelTextureNumber) {\r\n                if (this_1._modelSetting.getTextureFileName(modelTextureNumber) == '') {\r\n                    console.log('getTextureFileName null');\r\n                    return \"continue\";\r\n                }\r\n                var texturePath = this_1._modelSetting.getTextureFileName(modelTextureNumber);\r\n                texturePath = this_1._modelHomeDir + texturePath;\r\n                var onLoad = function (textureInfo) {\r\n                    _this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\r\n                    _this._textureCount++;\r\n                    if (_this._textureCount >= textureCount_1) {\r\n                        _this._state = LoadStep.CompleteSetup;\r\n                    }\r\n                };\r\n                lappdelegate_1.LAppDelegate.getInstance()\r\n                    .getTextureManager()\r\n                    .createTextureFromPngFile(texturePath, usePremultiply, onLoad);\r\n                this_1.getRenderer().setIsPremultipliedAlpha(usePremultiply);\r\n            };\r\n            var this_1 = this;\r\n            for (var modelTextureNumber = 0; modelTextureNumber < textureCount_1; modelTextureNumber++) {\r\n                _loop_2(modelTextureNumber);\r\n            }\r\n            this._state = LoadStep.WaitLoadTexture;\r\n        }\r\n    };\r\n    LAppModel.prototype.reloadRenderer = function () {\r\n        this.deleteRenderer();\r\n        this.createRenderer();\r\n        this.setupTextures();\r\n    };\r\n    LAppModel.prototype.update = function () {\r\n        if (this._state != LoadStep.CompleteSetup)\r\n            return;\r\n        var deltaTimeSeconds = lapppal_1.LAppPal.getDeltaTime();\r\n        this._userTimeSeconds += deltaTimeSeconds;\r\n        this._dragManager.update(deltaTimeSeconds);\r\n        this._dragX = this._dragManager.getX();\r\n        this._dragY = this._dragManager.getY();\r\n        var motionUpdated = false;\r\n        this._model.loadParameters();\r\n        if (this._motionManager.isFinished()) {\r\n            this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);\r\n        }\r\n        else {\r\n            motionUpdated = this._motionManager.updateMotion(this._model, deltaTimeSeconds);\r\n        }\r\n        this._model.saveParameters();\r\n        if (!motionUpdated) {\r\n            if (this._eyeBlink != null) {\r\n                this._eyeBlink.updateParameters(this._model, deltaTimeSeconds);\r\n            }\r\n        }\r\n        if (this._expressionManager != null) {\r\n            this._expressionManager.updateMotion(this._model, deltaTimeSeconds);\r\n        }\r\n        this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30);\r\n        this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\r\n        this._model.addParameterValueById(this._idParamAngleZ, this._dragX * this._dragY * -30);\r\n        this._model.addParameterValueById(this._idParamBodyAngleX, this._dragX * 10);\r\n        this._model.addParameterValueById(this._idParamEyeBallX, this._dragX);\r\n        this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\r\n        if (this._breath != null) {\r\n            this._breath.updateParameters(this._model, deltaTimeSeconds);\r\n        }\r\n        if (this._physics != null) {\r\n            this._physics.evaluate(this._model, deltaTimeSeconds);\r\n        }\r\n        if (this._lipsync) {\r\n            var value = 0;\r\n            for (var i = 0; i < this._lipSyncIds.getSize(); ++i) {\r\n                this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\r\n            }\r\n        }\r\n        if (this._pose != null) {\r\n            this._pose.updateParameters(this._model, deltaTimeSeconds);\r\n        }\r\n        this._model.update();\r\n    };\r\n    LAppModel.prototype.startMotion = function (group, no, priority, onFinishedMotionHandler) {\r\n        var _this = this;\r\n        if (priority == LAppDefine.PriorityForce) {\r\n            this._motionManager.setReservePriority(priority);\r\n        }\r\n        else if (!this._motionManager.reserveMotion(priority)) {\r\n            if (this._debugMode) {\r\n                lapppal_1.LAppPal.printMessage(\"[APP]can't start motion.\");\r\n            }\r\n            return InvalidMotionQueueEntryHandleValue;\r\n        }\r\n        var motionFileName = this._modelSetting.getMotionFileName(group, no);\r\n        if (motionFileName == \"透明.motion3.json\") {\r\n            this.playAudio(\"hitVoice1\");\r\n        }\r\n        var name = group + \"_\" + no;\r\n        var motion = this._motions.getValue(name);\r\n        var autoDelete = false;\r\n        if (motion == null) {\r\n            fetch(this._modelHomeDir + \"/\" + motionFileName)\r\n                .then(function (response) { return response.arrayBuffer(); })\r\n                .then(function (arrayBuffer) {\r\n                motion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler);\r\n                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, no);\r\n                if (fadeTime >= 0.0) {\r\n                    motion.setFadeInTime(fadeTime);\r\n                }\r\n                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, no);\r\n                if (fadeTime >= 0.0) {\r\n                    motion.setFadeOutTime(fadeTime);\r\n                }\r\n                motion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);\r\n                autoDelete = true;\r\n            });\r\n        }\r\n        else {\r\n            motion.setFinishedMotionHandler(onFinishedMotionHandler);\r\n        }\r\n        if (this._debugMode) {\r\n            lapppal_1.LAppPal.printMessage(\"[APP]start motion: [\" + group + \"_\" + no);\r\n        }\r\n        return this._motionManager.startMotionPriority(motion, autoDelete, priority);\r\n    };\r\n    LAppModel.prototype.startRandomMotion = function (group, priority, onFinishedMotionHandler) {\r\n        if (this._modelSetting.getMotionCount(group) == 0) {\r\n            return InvalidMotionQueueEntryHandleValue;\r\n        }\r\n        var no = Math.floor(Math.random() * this._modelSetting.getMotionCount(group));\r\n        return this.startMotion(group, no, priority, onFinishedMotionHandler);\r\n    };\r\n    LAppModel.prototype.setExpression = function (expressionId) {\r\n        var motion = this._expressions.getValue(expressionId);\r\n        if (this._debugMode) {\r\n            lapppal_1.LAppPal.printMessage(\"[APP]expression: [\" + expressionId + \"]\");\r\n        }\r\n        if (motion != null) {\r\n            this._expressionManager.startMotionPriority(motion, false, LAppDefine.PriorityForce);\r\n        }\r\n        else {\r\n            if (this._debugMode) {\r\n                lapppal_1.LAppPal.printMessage(\"[APP]expression[\" + expressionId + \"] is null\");\r\n            }\r\n        }\r\n    };\r\n    LAppModel.prototype.setRandomExpression = function () {\r\n        if (this._expressions.getSize() == 0) {\r\n            return;\r\n        }\r\n        var no = Math.floor(Math.random() * this._expressions.getSize());\r\n        for (var i = 0; i < this._expressions.getSize(); i++) {\r\n            if (i == no) {\r\n                var name_1 = this._expressions._keyValues[i].first;\r\n                this.setExpression(name_1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    LAppModel.prototype.motionEventFired = function (eventValue) {\r\n        cubismdebug_1.CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\r\n    };\r\n    LAppModel.prototype.hitTest = function (hitArenaName, x, y) {\r\n        if (this._opacity < 1) {\r\n            return false;\r\n        }\r\n        var count = this._modelSetting.getHitAreasCount();\r\n        for (var i = 0; i < count; i++) {\r\n            if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\r\n                var drawId = this._modelSetting.getHitAreaId(i);\r\n                return this.isHit(drawId, x, y);\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    LAppModel.prototype.playAudio = function (audioId) {\r\n        var audio = document.getElementById(audioId);\r\n        audio.currentTime = 0;\r\n        audio.play();\r\n    };\r\n    LAppModel.prototype.preLoadMotionGroup = function (group) {\r\n        var _this = this;\r\n        var _loop_3 = function (i) {\r\n            var motionFileName = this_2._modelSetting.getMotionFileName(group, i);\r\n            var name_2 = group + \"_\" + i;\r\n            if (this_2._debugMode) {\r\n                lapppal_1.LAppPal.printMessage(\"[APP]load motion: \" + motionFileName + \" => [\" + name_2 + \"]\");\r\n            }\r\n            fetch(this_2._modelHomeDir + \"/\" + motionFileName)\r\n                .then(function (response) { return response.arrayBuffer(); })\r\n                .then(function (arrayBuffer) {\r\n                var tmpMotion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, name_2);\r\n                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, i);\r\n                if (fadeTime >= 0.0) {\r\n                    tmpMotion.setFadeInTime(fadeTime);\r\n                }\r\n                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, i);\r\n                if (fadeTime >= 0.0) {\r\n                    tmpMotion.setFadeOutTime(fadeTime);\r\n                }\r\n                tmpMotion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);\r\n                if (_this._motions.getValue(name_2) != null) {\r\n                    ACubismMotion.delete(_this._motions.getValue(name_2));\r\n                }\r\n                _this._motions.setValue(name_2, tmpMotion);\r\n                _this._motionCount++;\r\n                if (_this._motionCount >= _this._allMotionCount) {\r\n                    _this._state = LoadStep.LoadTexture;\r\n                    _this._motionManager.stopAllMotions();\r\n                    _this._updating = false;\r\n                    _this._initialized = true;\r\n                    _this.createRenderer();\r\n                    _this.setupTextures();\r\n                    _this.getRenderer().startUp(lappdelegate_1.gl);\r\n                }\r\n            });\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this._modelSetting.getMotionCount(group); i++) {\r\n            _loop_3(i);\r\n        }\r\n    };\r\n    LAppModel.prototype.releaseMotions = function () {\r\n        this._motions.clear();\r\n    };\r\n    LAppModel.prototype.releaseExpressions = function () {\r\n        this._expressions.clear();\r\n    };\r\n    LAppModel.prototype.doDraw = function () {\r\n        if (this._model == null)\r\n            return;\r\n        var viewport = [0, 0, lappdelegate_1.canvas.width, lappdelegate_1.canvas.height];\r\n        this.getRenderer().setRenderState(lappdelegate_1.frameBuffer, viewport);\r\n        this.getRenderer().drawModel();\r\n    };\r\n    LAppModel.prototype.draw = function (matrix) {\r\n        if (this._model == null) {\r\n            return;\r\n        }\r\n        if (this._state == LoadStep.CompleteSetup) {\r\n            matrix.multiplyByMatrix(this._modelMatrix);\r\n            this.getRenderer().setMvpMatrix(matrix);\r\n            this.doDraw();\r\n        }\r\n    };\r\n    return LAppModel;\r\n}(CubismUserModel));\r\nexports.LAppModel = LAppModel;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lappmodel.ts\n");

/***/ }),

/***/ "./src/lapppal.ts":
/*!************************!*\
  !*** ./src/lapppal.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar LAppPal = (function () {\r\n    function LAppPal() {\r\n    }\r\n    LAppPal.loadFileAsBytes = function (filePath, callback) {\r\n        fetch(filePath)\r\n            .then(function (response) { return response.arrayBuffer(); })\r\n            .then(function (arrayBuffer) { return callback(arrayBuffer, arrayBuffer.byteLength); });\r\n    };\r\n    LAppPal.getDeltaTime = function () {\r\n        return this.s_deltaTime;\r\n    };\r\n    LAppPal.updateTime = function () {\r\n        this.s_currentFrame = Date.now();\r\n        this.s_deltaTime = (this.s_currentFrame - this.s_lastFrame) / 1000;\r\n        this.s_lastFrame = this.s_currentFrame;\r\n    };\r\n    LAppPal.printMessage = function (message) {\r\n        console.log(message);\r\n    };\r\n    LAppPal.lastUpdate = Date.now();\r\n    LAppPal.s_currentFrame = 0.0;\r\n    LAppPal.s_lastFrame = 0.0;\r\n    LAppPal.s_deltaTime = 0.0;\r\n    return LAppPal;\r\n}());\r\nexports.LAppPal = LAppPal;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFwcHBhbC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9sYXBwcGFsLnRzP2QzNzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG4vKipcclxuICog44OX44Op44OD44OI44OV44Kp44O844Og5L6d5a2Y5qmf6IO944KS5oq96LGh5YyW44GZ44KLIEN1YmlzbSBQbGF0Zm9ybSBBYnN0cmFjdGlvbiBMYXllci5cclxuICpcclxuICog44OV44Kh44Kk44Or6Kqt44G/6L6844G/44KE5pmC5Yi75Y+W5b6X562J44Gu44OX44Op44OD44OI44OV44Kp44O844Og44Gr5L6d5a2Y44GZ44KL6Zai5pWw44KS44G+44Go44KB44KL44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTEFwcFBhbCB7XHJcbiAgLyoqXHJcbiAgICog44OV44Kh44Kk44Or44KS44OQ44Kk44OI44OH44O844K/44Go44GX44Gm6Kqt44G/44GT44KAXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZmlsZVBhdGgg6Kqt44G/6L6844G/5a++6LGh44OV44Kh44Kk44Or44Gu44OR44K5XHJcbiAgICogQHJldHVyblxyXG4gICAqIHtcclxuICAgKiAgICAgIGJ1ZmZlciwgICDoqq3jgb/ovrzjgpPjgaDjg5DjgqTjg4jjg4fjg7zjgr9cclxuICAgKiAgICAgIHNpemUgICAgICAgIOODleOCoeOCpOODq+OCteOCpOOCulxyXG4gICAqIH1cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGxvYWRGaWxlQXNCeXRlcyhcclxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXHJcbiAgICBjYWxsYmFjazogKGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSA9PiB2b2lkXHJcbiAgKTogdm9pZCB7XHJcbiAgICBmZXRjaChmaWxlUGF0aClcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcclxuICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4gY2FsbGJhY2soYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+ODq+OCv+aZgumWk++8iOWJjeWbnuODleODrOODvOODoOOBqOOBruW3ruWIhu+8ieOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g44OH44Or44K/5pmC6ZaTW21zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0RGVsdGFUaW1lKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5zX2RlbHRhVGltZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgdXBkYXRlVGltZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc19jdXJyZW50RnJhbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgdGhpcy5zX2RlbHRhVGltZSA9ICh0aGlzLnNfY3VycmVudEZyYW1lIC0gdGhpcy5zX2xhc3RGcmFtZSkgLyAxMDAwO1xyXG4gICAgdGhpcy5zX2xhc3RGcmFtZSA9IHRoaXMuc19jdXJyZW50RnJhbWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Hjg4Pjgrvjg7zjgrjjgpLlh7rlipvjgZnjgotcclxuICAgKiBAcGFyYW0gbWVzc2FnZSDmloflrZfliJdcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHByaW50TWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxhc3RVcGRhdGUgPSBEYXRlLm5vdygpO1xyXG5cclxuICBzdGF0aWMgc19jdXJyZW50RnJhbWUgPSAwLjA7XHJcbiAgc3RhdGljIHNfbGFzdEZyYW1lID0gMC4wO1xyXG4gIHN0YXRpYyBzX2RlbHRhVGltZSA9IDAuMDtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7O0FBWUE7QUFBQTtBQStDQTtBQXBDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQS9DQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lapppal.ts\n");

/***/ }),

/***/ "./src/lappsprite.ts":
/*!***************************!*\
  !*** ./src/lappsprite.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\r\nvar LAppSprite = (function () {\r\n    function LAppSprite(x, y, width, height, textureId) {\r\n        this._rect = new Rect();\r\n        this._rect.left = x - width * 0.5;\r\n        this._rect.right = x + width * 0.5;\r\n        this._rect.up = y + height * 0.5;\r\n        this._rect.down = y - height * 0.5;\r\n        this._texture = textureId;\r\n        this._vertexBuffer = null;\r\n        this._uvBuffer = null;\r\n        this._indexBuffer = null;\r\n        this._positionLocation = null;\r\n        this._uvLocation = null;\r\n        this._textureLocation = null;\r\n        this._positionArray = null;\r\n        this._uvArray = null;\r\n        this._indexArray = null;\r\n        this._firstDraw = true;\r\n    }\r\n    LAppSprite.prototype.release = function () {\r\n        this._rect = null;\r\n        lappdelegate_1.gl.deleteTexture(this._texture);\r\n        this._texture = null;\r\n        lappdelegate_1.gl.deleteBuffer(this._uvBuffer);\r\n        this._uvBuffer = null;\r\n        lappdelegate_1.gl.deleteBuffer(this._vertexBuffer);\r\n        this._vertexBuffer = null;\r\n        lappdelegate_1.gl.deleteBuffer(this._indexBuffer);\r\n        this._indexBuffer = null;\r\n    };\r\n    LAppSprite.prototype.getTexture = function () {\r\n        return this._texture;\r\n    };\r\n    LAppSprite.prototype.render = function (programId) {\r\n        if (this._texture == null) {\r\n            return;\r\n        }\r\n        if (this._firstDraw) {\r\n            this._positionLocation = lappdelegate_1.gl.getAttribLocation(programId, 'position');\r\n            lappdelegate_1.gl.enableVertexAttribArray(this._positionLocation);\r\n            this._uvLocation = lappdelegate_1.gl.getAttribLocation(programId, 'uv');\r\n            lappdelegate_1.gl.enableVertexAttribArray(this._uvLocation);\r\n            this._textureLocation = lappdelegate_1.gl.getUniformLocation(programId, 'texture');\r\n            lappdelegate_1.gl.uniform1i(this._textureLocation, 0);\r\n            {\r\n                this._uvArray = new Float32Array([\r\n                    1.0,\r\n                    0.0,\r\n                    0.0,\r\n                    0.0,\r\n                    0.0,\r\n                    1.0,\r\n                    1.0,\r\n                    1.0\r\n                ]);\r\n                this._uvBuffer = lappdelegate_1.gl.createBuffer();\r\n            }\r\n            {\r\n                var maxWidth = lappdelegate_1.canvas.width;\r\n                var maxHeight = lappdelegate_1.canvas.height;\r\n                this._positionArray = new Float32Array([\r\n                    (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\r\n                    (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\r\n                    (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\r\n                    (this._rect.up - maxHeight * 0.5) / (maxHeight * 0.5),\r\n                    (this._rect.left - maxWidth * 0.5) / (maxWidth * 0.5),\r\n                    (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5),\r\n                    (this._rect.right - maxWidth * 0.5) / (maxWidth * 0.5),\r\n                    (this._rect.down - maxHeight * 0.5) / (maxHeight * 0.5)\r\n                ]);\r\n                this._vertexBuffer = lappdelegate_1.gl.createBuffer();\r\n            }\r\n            {\r\n                this._indexArray = new Uint16Array([0, 1, 2, 3, 2, 0]);\r\n                this._indexBuffer = lappdelegate_1.gl.createBuffer();\r\n            }\r\n            this._firstDraw = false;\r\n        }\r\n        lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ARRAY_BUFFER, this._uvBuffer);\r\n        lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ARRAY_BUFFER, this._uvArray, lappdelegate_1.gl.STATIC_DRAW);\r\n        lappdelegate_1.gl.vertexAttribPointer(this._uvLocation, 2, lappdelegate_1.gl.FLOAT, false, 0, 0);\r\n        lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ARRAY_BUFFER, this._vertexBuffer);\r\n        lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ARRAY_BUFFER, this._positionArray, lappdelegate_1.gl.STATIC_DRAW);\r\n        lappdelegate_1.gl.vertexAttribPointer(this._positionLocation, 2, lappdelegate_1.gl.FLOAT, false, 0, 0);\r\n        lappdelegate_1.gl.bindBuffer(lappdelegate_1.gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);\r\n        lappdelegate_1.gl.bufferData(lappdelegate_1.gl.ELEMENT_ARRAY_BUFFER, this._indexArray, lappdelegate_1.gl.DYNAMIC_DRAW);\r\n        lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, this._texture);\r\n        lappdelegate_1.gl.drawElements(lappdelegate_1.gl.TRIANGLES, this._indexArray.length, lappdelegate_1.gl.UNSIGNED_SHORT, 0);\r\n    };\r\n    LAppSprite.prototype.isHit = function (pointX, pointY) {\r\n        var height = lappdelegate_1.canvas.height;\r\n        var y = height - pointY;\r\n        return (pointX >= this._rect.left &&\r\n            pointX <= this._rect.right &&\r\n            y <= this._rect.up &&\r\n            y >= this._rect.down);\r\n    };\r\n    return LAppSprite;\r\n}());\r\nexports.LAppSprite = LAppSprite;\r\nvar Rect = (function () {\r\n    function Rect() {\r\n    }\r\n    return Rect;\r\n}());\r\nexports.Rect = Rect;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lappsprite.ts\n");

/***/ }),

/***/ "./src/lapptexturemanager.ts":
/*!***********************************!*\
  !*** ./src/lapptexturemanager.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar csmvector_1 = __webpack_require__(/*! @framework/type/csmvector */ \"../../../Framework/src/type/csmvector.ts\");\r\nvar Csm_csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\r\nvar LAppTextureManager = (function () {\r\n    function LAppTextureManager() {\r\n        this._textures = new Csm_csmVector();\r\n    }\r\n    LAppTextureManager.prototype.release = function () {\r\n        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {\r\n            lappdelegate_1.gl.deleteTexture(ite.ptr().id);\r\n        }\r\n        this._textures = null;\r\n    };\r\n    LAppTextureManager.prototype.createTextureFromPngFile = function (fileName, usePremultiply, callback) {\r\n        var _this = this;\r\n        var _loop_1 = function (ite) {\r\n            if (ite.ptr().fileName == fileName &&\r\n                ite.ptr().usePremultply == usePremultiply) {\r\n                ite.ptr().img = new Image();\r\n                ite.ptr().img.onload = function () { return callback(ite.ptr()); };\r\n                ite.ptr().img.src = fileName;\r\n                return { value: void 0 };\r\n            }\r\n        };\r\n        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {\r\n            var state_1 = _loop_1(ite);\r\n            if (typeof state_1 === \"object\")\r\n                return state_1.value;\r\n        }\r\n        var img = new Image();\r\n        img.onload = function () {\r\n            var tex = lappdelegate_1.gl.createTexture();\r\n            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, tex);\r\n            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MIN_FILTER, lappdelegate_1.gl.LINEAR_MIPMAP_LINEAR);\r\n            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MAG_FILTER, lappdelegate_1.gl.LINEAR);\r\n            if (usePremultiply) {\r\n                lappdelegate_1.gl.pixelStorei(lappdelegate_1.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\r\n            }\r\n            lappdelegate_1.gl.texImage2D(lappdelegate_1.gl.TEXTURE_2D, 0, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.UNSIGNED_BYTE, img);\r\n            lappdelegate_1.gl.generateMipmap(lappdelegate_1.gl.TEXTURE_2D);\r\n            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, null);\r\n            var textureInfo = new TextureInfo();\r\n            if (textureInfo != null) {\r\n                textureInfo.fileName = fileName;\r\n                textureInfo.width = img.width;\r\n                textureInfo.height = img.height;\r\n                textureInfo.id = tex;\r\n                textureInfo.img = img;\r\n                textureInfo.usePremultply = usePremultiply;\r\n                _this._textures.pushBack(textureInfo);\r\n            }\r\n            callback(textureInfo);\r\n        };\r\n        img.src = fileName;\r\n    };\r\n    LAppTextureManager.prototype.releaseTextures = function () {\r\n        for (var i = 0; i < this._textures.getSize(); i++) {\r\n            this._textures.set(i, null);\r\n        }\r\n        this._textures.clear();\r\n    };\r\n    LAppTextureManager.prototype.releaseTextureByTexture = function (texture) {\r\n        for (var i = 0; i < this._textures.getSize(); i++) {\r\n            if (this._textures.at(i).id != texture) {\r\n                continue;\r\n            }\r\n            this._textures.set(i, null);\r\n            this._textures.remove(i);\r\n            break;\r\n        }\r\n    };\r\n    LAppTextureManager.prototype.releaseTextureByFilePath = function (fileName) {\r\n        for (var i = 0; i < this._textures.getSize(); i++) {\r\n            if (this._textures.at(i).fileName == fileName) {\r\n                this._textures.set(i, null);\r\n                this._textures.remove(i);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    return LAppTextureManager;\r\n}());\r\nexports.LAppTextureManager = LAppTextureManager;\r\nvar TextureInfo = (function () {\r\n    function TextureInfo() {\r\n        this.id = null;\r\n        this.width = 0;\r\n        this.height = 0;\r\n    }\r\n    return TextureInfo;\r\n}());\r\nexports.TextureInfo = TextureInfo;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lapptexturemanager.ts\n");

/***/ }),

/***/ "./src/lappview.ts":
/*!*************************!*\
  !*** ./src/lappview.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result[\"default\"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar cubismmatrix44_1 = __webpack_require__(/*! @framework/math/cubismmatrix44 */ \"../../../Framework/src/math/cubismmatrix44.ts\");\r\nvar cubismviewmatrix_1 = __webpack_require__(/*! @framework/math/cubismviewmatrix */ \"../../../Framework/src/math/cubismviewmatrix.ts\");\r\nvar Csm_CubismViewMatrix = cubismviewmatrix_1.Live2DCubismFramework.CubismViewMatrix;\r\nvar Csm_CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar touchmanager_1 = __webpack_require__(/*! ./touchmanager */ \"./src/touchmanager.ts\");\r\nvar lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ \"./src/lapplive2dmanager.ts\");\r\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\r\nvar lappsprite_1 = __webpack_require__(/*! ./lappsprite */ \"./src/lappsprite.ts\");\r\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\r\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\r\nvar LAppView = (function () {\r\n    function LAppView() {\r\n        this._programId = null;\r\n        this._back = null;\r\n        this._gear = null;\r\n        this._touchManager = new touchmanager_1.TouchManager();\r\n        this._deviceToScreen = new Csm_CubismMatrix44();\r\n        this._viewMatrix = new Csm_CubismViewMatrix();\r\n    }\r\n    LAppView.prototype.initialize = function () {\r\n        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;\r\n        var ratio = height / width;\r\n        var left = LAppDefine.ViewLogicalLeft;\r\n        var right = LAppDefine.ViewLogicalRight;\r\n        var bottom = -ratio;\r\n        var top = ratio;\r\n        if (height >= width) {\r\n            ratio = width / height;\r\n            left = -ratio;\r\n            right = ratio;\r\n            bottom = LAppDefine.ViewLogicalLeft;\r\n            top = LAppDefine.ViewLogicalRight;\r\n        }\r\n        this._viewMatrix.setScreenRect(left, right, bottom, top);\r\n        if (height >= width) {\r\n            var screenH = Math.abs(bottom - top);\r\n            this._deviceToScreen.scaleRelative(screenH / height, -screenH / height);\r\n        }\r\n        else {\r\n            var screenW = Math.abs(left - right);\r\n            this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);\r\n        }\r\n        this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);\r\n        this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale);\r\n        this._viewMatrix.setMinScale(LAppDefine.ViewMinScale);\r\n        this._viewMatrix.setMaxScreenRect(LAppDefine.ViewLogicalMaxLeft, LAppDefine.ViewLogicalMaxRight, LAppDefine.ViewLogicalMaxBottom, LAppDefine.ViewLogicalMaxTop);\r\n    };\r\n    LAppView.prototype.release = function () {\r\n        this._viewMatrix = null;\r\n        this._touchManager = null;\r\n        this._deviceToScreen = null;\r\n        this._gear.release();\r\n        this._gear = null;\r\n        this._back.release();\r\n        this._back = null;\r\n        lappdelegate_1.gl.deleteProgram(this._programId);\r\n        this._programId = null;\r\n    };\r\n    LAppView.prototype.render = function () {\r\n        lappdelegate_1.gl.useProgram(this._programId);\r\n        if (this._back) {\r\n            this._back.render(this._programId);\r\n        }\r\n        if (this._gear) {\r\n            this._gear.render(this._programId);\r\n        }\r\n        lappdelegate_1.gl.flush();\r\n        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\r\n        live2DManager.onUpdate();\r\n    };\r\n    LAppView.prototype.initializeSprite = function () {\r\n        var _this = this;\r\n        var width = lappdelegate_1.canvas.width;\r\n        var height = lappdelegate_1.canvas.height;\r\n        var textureManager = lappdelegate_1.LAppDelegate.getInstance().getTextureManager();\r\n        var resourcesPath = LAppDefine.ResourcesPath;\r\n        var imageName = '';\r\n        imageName = LAppDefine.BackImageName;\r\n        var initBackGroundTexture = function (textureInfo) {\r\n            var x = width * 0.5;\r\n            var y = height * 0.5;\r\n            var fwidth = width * 1.0;\r\n            var fheight = height * 1.0;\r\n            _this._back = new lappsprite_1.LAppSprite(x, y, fwidth, fheight, textureInfo.id);\r\n        };\r\n        textureManager.createTextureFromPngFile(resourcesPath + imageName, false, initBackGroundTexture);\r\n        if (this._programId == null) {\r\n            this._programId = lappdelegate_1.LAppDelegate.getInstance().createShader();\r\n        }\r\n    };\r\n    LAppView.prototype.onTouchesBegan = function (pointX, pointY) {\r\n        this._touchManager.touchesBegan(pointX, pointY);\r\n    };\r\n    LAppView.prototype.onTouchesMoved = function (pointX, pointY) {\r\n        var viewX = this.transformViewX(this._touchManager.getX());\r\n        var viewY = this.transformViewY(this._touchManager.getY());\r\n        this._touchManager.touchesMoved(pointX, pointY);\r\n        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\r\n        live2DManager.onDrag(viewX, viewY);\r\n    };\r\n    LAppView.prototype.onTouchesEnded = function (pointX, pointY) {\r\n        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\r\n        live2DManager.onDrag(0.0, 0.0);\r\n        {\r\n            var x = this._deviceToScreen.transformX(this._touchManager.getX());\r\n            var y = this._deviceToScreen.transformY(this._touchManager.getY());\r\n            if (LAppDefine.DebugTouchLogEnable) {\r\n                lapppal_1.LAppPal.printMessage(\"[APP]touchesEnded x: \" + x + \" y: \" + y);\r\n            }\r\n            live2DManager.onTap(x, y);\r\n            if (this._gear.isHit(pointX, pointY)) {\r\n                live2DManager.nextScene();\r\n            }\r\n        }\r\n    };\r\n    LAppView.prototype.transformViewX = function (deviceX) {\r\n        var screenX = this._deviceToScreen.transformX(deviceX);\r\n        return this._viewMatrix.invertTransformX(screenX);\r\n    };\r\n    LAppView.prototype.transformViewY = function (deviceY) {\r\n        var screenY = this._deviceToScreen.transformY(deviceY);\r\n        return this._viewMatrix.invertTransformY(screenY);\r\n    };\r\n    LAppView.prototype.transformScreenX = function (deviceX) {\r\n        return this._deviceToScreen.transformX(deviceX);\r\n    };\r\n    LAppView.prototype.transformScreenY = function (deviceY) {\r\n        return this._deviceToScreen.transformY(deviceY);\r\n    };\r\n    return LAppView;\r\n}());\r\nexports.LAppView = LAppView;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lappview.ts\n");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\r\nwindow.onload = function () {\r\n    if (lappdelegate_1.LAppDelegate.getInstance().initialize() == false) {\r\n        return;\r\n    }\r\n    lappdelegate_1.LAppDelegate.getInstance().run();\r\n};\r\nwindow.onbeforeunload = function () { return lappdelegate_1.LAppDelegate.releaseInstance(); };\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWFpbi50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tYWluLnRzP2NkNDkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBMQXBwRGVsZWdhdGUgfSBmcm9tICcuL2xhcHBkZWxlZ2F0ZSc7XHJcblxyXG4vKipcclxuICog44OW44Op44Km44K244Ot44O844OJ5b6M44Gu5Yem55CGXHJcbiAqL1xyXG53aW5kb3cub25sb2FkID0gKCk6IHZvaWQgPT4ge1xyXG4gIC8vIGNyZWF0ZSB0aGUgYXBwbGljYXRpb24gaW5zdGFuY2VcclxuICBpZiAoTEFwcERlbGVnYXRlLmdldEluc3RhbmNlKCkuaW5pdGlhbGl6ZSgpID09IGZhbHNlKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBMQXBwRGVsZWdhdGUuZ2V0SW5zdGFuY2UoKS5ydW4oKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDntYLkuobmmYLjga7lh6bnkIZcclxuICovXHJcbndpbmRvdy5vbmJlZm9yZXVubG9hZCA9ICgpOiB2b2lkID0+IExBcHBEZWxlZ2F0ZS5yZWxlYXNlSW5zdGFuY2UoKTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQU9BO0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main.ts\n");

/***/ }),

/***/ "./src/touchmanager.ts":
/*!*****************************!*\
  !*** ./src/touchmanager.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar TouchManager = (function () {\r\n    function TouchManager() {\r\n        this._startX = 0.0;\r\n        this._startY = 0.0;\r\n        this._lastX = 0.0;\r\n        this._lastY = 0.0;\r\n        this._lastX1 = 0.0;\r\n        this._lastY1 = 0.0;\r\n        this._lastX2 = 0.0;\r\n        this._lastY2 = 0.0;\r\n        this._lastTouchDistance = 0.0;\r\n        this._deltaX = 0.0;\r\n        this._deltaY = 0.0;\r\n        this._scale = 1.0;\r\n        this._touchSingle = false;\r\n        this._flipAvailable = false;\r\n    }\r\n    TouchManager.prototype.getCenterX = function () {\r\n        return this._lastX;\r\n    };\r\n    TouchManager.prototype.getCenterY = function () {\r\n        return this._lastY;\r\n    };\r\n    TouchManager.prototype.getDeltaX = function () {\r\n        return this._deltaX;\r\n    };\r\n    TouchManager.prototype.getDeltaY = function () {\r\n        return this._deltaY;\r\n    };\r\n    TouchManager.prototype.getStartX = function () {\r\n        return this._startX;\r\n    };\r\n    TouchManager.prototype.getStartY = function () {\r\n        return this._startY;\r\n    };\r\n    TouchManager.prototype.getScale = function () {\r\n        return this._scale;\r\n    };\r\n    TouchManager.prototype.getX = function () {\r\n        return this._lastX;\r\n    };\r\n    TouchManager.prototype.getY = function () {\r\n        return this._lastY;\r\n    };\r\n    TouchManager.prototype.getX1 = function () {\r\n        return this._lastX1;\r\n    };\r\n    TouchManager.prototype.getY1 = function () {\r\n        return this._lastY1;\r\n    };\r\n    TouchManager.prototype.getX2 = function () {\r\n        return this._lastX2;\r\n    };\r\n    TouchManager.prototype.getY2 = function () {\r\n        return this._lastY2;\r\n    };\r\n    TouchManager.prototype.isSingleTouch = function () {\r\n        return this._touchSingle;\r\n    };\r\n    TouchManager.prototype.isFlickAvailable = function () {\r\n        return this._flipAvailable;\r\n    };\r\n    TouchManager.prototype.disableFlick = function () {\r\n        this._flipAvailable = false;\r\n    };\r\n    TouchManager.prototype.touchesBegan = function (deviceX, deviceY) {\r\n        this._lastX = deviceX;\r\n        this._lastY = deviceY;\r\n        this._startX = deviceX;\r\n        this._startY = deviceY;\r\n        this._lastTouchDistance = -1.0;\r\n        this._flipAvailable = true;\r\n        this._touchSingle = true;\r\n    };\r\n    TouchManager.prototype.touchesMoved = function (deviceX, deviceY) {\r\n        this._lastX = deviceX;\r\n        this._lastY = deviceY;\r\n        this._lastTouchDistance = -1.0;\r\n        this._touchSingle = true;\r\n    };\r\n    TouchManager.prototype.getFlickDistance = function () {\r\n        return this.calculateDistance(this._startX, this._startY, this._lastX, this._lastY);\r\n    };\r\n    TouchManager.prototype.calculateDistance = function (x1, y1, x2, y2) {\r\n        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\r\n    };\r\n    TouchManager.prototype.calculateMovingAmount = function (v1, v2) {\r\n        if (v1 > 0.0 != v2 > 0.0) {\r\n            return 0.0;\r\n        }\r\n        var sign = v1 > 0.0 ? 1.0 : -1.0;\r\n        var absoluteValue1 = Math.abs(v1);\r\n        var absoluteValue2 = Math.abs(v2);\r\n        return (sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2));\r\n    };\r\n    return TouchManager;\r\n}());\r\nexports.TouchManager = TouchManager;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdG91Y2htYW5hZ2VyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3RvdWNobWFuYWdlci50cz9hMmVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuZXhwb3J0IGNsYXNzIFRvdWNoTWFuYWdlciB7XHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9zdGFydFggPSAwLjA7XHJcbiAgICB0aGlzLl9zdGFydFkgPSAwLjA7XHJcbiAgICB0aGlzLl9sYXN0WCA9IDAuMDtcclxuICAgIHRoaXMuX2xhc3RZID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFgxID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFkxID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFgyID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFkyID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFRvdWNoRGlzdGFuY2UgPSAwLjA7XHJcbiAgICB0aGlzLl9kZWx0YVggPSAwLjA7XHJcbiAgICB0aGlzLl9kZWx0YVkgPSAwLjA7XHJcbiAgICB0aGlzLl9zY2FsZSA9IDEuMDtcclxuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gZmFsc2U7XHJcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q2VudGVyWCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldENlbnRlclkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9sYXN0WTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXREZWx0YVgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9kZWx0YVg7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RGVsdGFZKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGVsdGFZO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFN0YXJ0WCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0WDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRTdGFydFkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9zdGFydFk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0U2NhbGUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9zY2FsZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRYKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdFg7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0WSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFgxKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdFgxO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFkxKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdFkxO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFgyKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdFgyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFkyKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdFkyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGlzU2luZ2xlVG91Y2goKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fdG91Y2hTaW5nbGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaXNGbGlja0F2YWlsYWJsZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9mbGlwQXZhaWxhYmxlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc2FibGVGbGljaygpOiB2b2lkIHtcclxuICAgIHRoaXMuX2ZsaXBBdmFpbGFibGUgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCv+ODg+ODgemWi+Wni+aZguOCpOODmeODs+ODiFxyXG4gICAqIEBwYXJhbSBkZXZpY2VYIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcclxuICAgKiBAcGFyYW0gZGV2aWNlWSDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXHJcbiAgICovXHJcbiAgcHVibGljIHRvdWNoZXNCZWdhbihkZXZpY2VYOiBudW1iZXIsIGRldmljZVk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fbGFzdFggPSBkZXZpY2VYO1xyXG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xyXG4gICAgdGhpcy5fc3RhcnRYID0gZGV2aWNlWDtcclxuICAgIHRoaXMuX3N0YXJ0WSA9IGRldmljZVk7XHJcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IC0xLjA7XHJcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gdHJ1ZTtcclxuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODieODqeODg+OCsOaZguOBruOCpOODmeODs+ODiFxyXG4gICAqIEBwYXJhbSBkZXZpY2VYIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcclxuICAgKiBAcGFyYW0gZGV2aWNlWSDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXHJcbiAgICovXHJcbiAgcHVibGljIHRvdWNoZXNNb3ZlZChkZXZpY2VYOiBudW1iZXIsIGRldmljZVk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fbGFzdFggPSBkZXZpY2VYO1xyXG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xyXG4gICAgdGhpcy5fbGFzdFRvdWNoRGlzdGFuY2UgPSAtMS4wO1xyXG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OV44Oq44OD44Kv44Gu6Led6Zui5ris5a6aXHJcbiAgICogQHJldHVybiDjg5Xjg6rjg4Pjgq/ot53pm6JcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RmxpY2tEaXN0YW5jZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlRGlzdGFuY2UoXHJcbiAgICAgIHRoaXMuX3N0YXJ0WCxcclxuICAgICAgdGhpcy5fc3RhcnRZLFxyXG4gICAgICB0aGlzLl9sYXN0WCxcclxuICAgICAgdGhpcy5fbGFzdFlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDngrnvvJHjgYvjgonngrnvvJLjgbjjga7ot53pm6LjgpLmsYLjgoHjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSB4MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXHJcbiAgICogQHBhcmFtIHkxIO+8keOBpOebruOBruOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcclxuICAgKiBAcGFyYW0geDIg77yS44Gk55uu44Gu44K/44OD44OB44GX44Gf55S76Z2i44GueOOBruWApFxyXG4gICAqIEBwYXJhbSB5MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXHJcbiAgICovXHJcbiAgcHVibGljIGNhbGN1bGF0ZURpc3RhbmNlKFxyXG4gICAgeDE6IG51bWJlcixcclxuICAgIHkxOiBudW1iZXIsXHJcbiAgICB4MjogbnVtYmVyLFxyXG4gICAgeTI6IG51bWJlclxyXG4gICk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KCh4MSAtIHgyKSAqICh4MSAtIHgyKSArICh5MSAtIHkyKSAqICh5MSAtIHkyKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDvvJLjgaTnm67jga7lgKTjgYvjgonjgIHnp7vli5Xph4/jgpLmsYLjgoHjgovjgIJcclxuICAgKiDpgZXjgYbmlrnlkJHjga7loLTlkIjjga/np7vli5Xph4/vvJDjgILlkIzjgZjmlrnlkJHjga7loLTlkIjjga/jgIHntbblr77lgKTjgYzlsI/jgZXjgYTmlrnjga7lgKTjgpLlj4LnhafjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSB2MSDvvJHjgaTnm67jga7np7vli5Xph49cclxuICAgKiBAcGFyYW0gdjIg77yS44Gk55uu44Gu56e75YuV6YePXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIOWwj+OBleOBhOaWueOBruenu+WLlemHj1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjYWxjdWxhdGVNb3ZpbmdBbW91bnQodjE6IG51bWJlciwgdjI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBpZiAodjEgPiAwLjAgIT0gdjIgPiAwLjApIHtcclxuICAgICAgcmV0dXJuIDAuMDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzaWduOiBudW1iZXIgPSB2MSA+IDAuMCA/IDEuMCA6IC0xLjA7XHJcbiAgICBjb25zdCBhYnNvbHV0ZVZhbHVlMSA9IE1hdGguYWJzKHYxKTtcclxuICAgIGNvbnN0IGFic29sdXRlVmFsdWUyID0gTWF0aC5hYnModjIpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgc2lnbiAqIChhYnNvbHV0ZVZhbHVlMSA8IGFic29sdXRlVmFsdWUyID8gYWJzb2x1dGVWYWx1ZTEgOiBhYnNvbHV0ZVZhbHVlMilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBfc3RhcnRZOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnjjga7lgKRcclxuICBfc3RhcnRYOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnnjga7lgKRcclxuICBfbGFzdFg6IG51bWJlcjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GueOOBruWApFxyXG4gIF9sYXN0WTogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5544Gu5YCkXHJcbiAgX2xhc3RYMTogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuIDjgaTnm67jga5444Gu5YCkXHJcbiAgX2xhc3RZMTogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuIDjgaTnm67jga5544Gu5YCkXHJcbiAgX2xhc3RYMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5444Gu5YCkXHJcbiAgX2xhc3RZMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5544Gu5YCkXHJcbiAgX2xhc3RUb3VjaERpc3RhbmNlOiBudW1iZXI7IC8vIDLmnKzku6XkuIrjgafjgr/jg4Pjg4HjgZfjgZ/jgajjgY3jga7mjIfjga7ot53pm6JcclxuICBfZGVsdGFYOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnjjga7np7vli5Xot53pm6LjgIJcclxuICBfZGVsdGFZOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnnjga7np7vli5Xot53pm6LjgIJcclxuICBfc2NhbGU6IG51bWJlcjsgLy8g44GT44Gu44OV44Os44O844Og44Gn5o6b44GR5ZCI44KP44Gb44KL5ouh5aSn546H44CC5ouh5aSn5pON5L2c5Lit5Lul5aSW44GvMeOAglxyXG4gIF90b3VjaFNpbmdsZTogYm9vbGVhbjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GvdHJ1ZVxyXG4gIF9mbGlwQXZhaWxhYmxlOiBib29sZWFuOyAvLyDjg5Xjg6rjg4Pjg5fjgYzmnInlirnjgYvjganjgYbjgYtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7O0FBT0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFNQTtBQVVBO0FBTUE7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQWdCQTtBQUFBO0FBbExBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/touchmanager.ts\n");

/***/ })

/******/ });